{"sta":1,"data":{"subTitle":"WebGL颜色","content":"<div><div>在我们的所有先前的例子中，我们通过分配所希望的颜色值给 gl_FragColor 变量应用于颜色的对象。除此之外，我们可以为每个顶点定义颜色&nbsp;-&nbsp;就像顶点坐标和索引。本章以一个例子来说明WebGL如何使用颜色应用到一个四边形。</div></div><h3>应用颜色</h3><div>要应用的颜色，必须为每个顶点使用RGB值定义颜色，在&nbsp;JavaScript&nbsp;数组。可以分配相同的值，所有顶点有一个唯一的颜色的对象。定义颜色后，必须创建一个颜色缓冲区并在其中存储这些值，并关联到顶点着色器的属性。</div><div>在顶点着色器，随着坐标属性(保存顶点的位置)，我们定义一个属性和具有变化来处理颜色。</div><div>颜色属性保存每顶点的颜色值，不同的是作为输入传递到片段着色器变量。因此，我们要的颜色值赋值到变化。</div><div>在片段着色器，将保存该颜色值的变化分配给 gl_FragColor，它保存对象的最终颜色。</div><h3>应用颜色步骤</h3><div>下面的步骤是用来创建一个WebGL应用程序绘制四边形和渲染它。</div><div><strong>第1步&nbsp;-&nbsp;准备Canvas和获取WebGL渲染上下文</strong></div><div>在此步骤中，我们使用getContext()得到&nbsp;WebGL&nbsp;渲染上下文对象。</div><div><strong>第2步&nbsp;-&nbsp;定义几何并将其存储在缓冲区对象</strong></div><div>正方形可以用两个三角形来绘制。因此，在这个例子中，我们提供的顶点两个三角形(具有一个公共边缘)和索引。由于我们想要将颜色对它应用，一个变量保持颜色值或也可以定义颜色值，为每个(红，蓝，绿，和粉红色)并被分配给它。</div><pre>var vertices = [\n   -0.5,0.5,0.0,\n   -0.5,-0.5,0.0, \n   0.5,-0.5,0.0,\n   0.5,0.5,0.0 \n];\n\nvar colors = [ 0,0,1, 1,0,0, 0,1,0, 1,0,1,];\n\nindices = [3,2,1,3,1,0]; \n</pre><div><strong>第3步&nbsp;-&nbsp;创建和编译着色器程序</strong></div><div>在这一步中，你需要编写的顶点着色器和片段着色器程序，编译它们，并通过连接这两个程序将创建一个合并程序。</div><ul><li><div>顶点着色器-&nbsp;在程序的顶点着色器，我们定义向量的属性来存储三维坐标(位置)以及每个顶点的颜色。一个变化的变量声明为从顶点着色与片段着色器传递的颜色值。最后，存储在色彩属性的值被分配。</div></li></ul><pre>var vertCode = 'attribute vec3 coordinates;'+\n   'attribute vec3 color;'+\n   'varying vec3 vColor;'+\n\t\n   'void main(void) {' +\n      ' gl_Position = vec4(coordinates, 1.0);' +\n      'vColor = color;'+\n   '}';\n</pre><ul><li><div>片段着色器-&nbsp;在片段着色器，我们分配 varying 到 gl_FragColor 变量。</div></li></ul><pre>var fragCode = 'precision mediump float;'+\n   'varying vec3 vColor;'+\n   'void main(void) {'+\n      'gl_FragColor = vec4(vColor, 1.);'+\n   '}';\n</pre><div><strong>第4步&nbsp;-&nbsp;与缓冲区对象相关联着色器程序</strong></div><div>在这一步，我们关联缓冲器对象和着色器程序。</div><div><strong>第5步&nbsp;-&nbsp;绘制所需的对象</strong></div><div>由于我们使用索引绘制两个三角形形成一个四边形，我们将使用&nbsp;drawElements()方法。在方法我们必须传递索引的数量。&nbsp;indices.length&nbsp;的值表示索引的数量。</div><pre>gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT,0);\n</pre><h3>示例&nbsp;-&nbsp;应用颜色</h3><div>下面的程序演示了WebGL应用程序如何绘制一个四边形，并渲染它。</div><pre>&lt;!doctype html&gt;\n&lt;html&gt;\n   &lt;body&gt;\n    &lt;canvas width = \"300\" height = \"300\" id = \"my_Canvas\"&gt;&lt;/canvas&gt;\n\n      &lt;script&gt;\n\n         /*============= Creating a canvas ==================*/\n         var canvas = document.getElementById('my_Canvas');\n         gl = canvas.getContext('experimental-webgl');\n         \n         /*========== Defining and storing the geometry ==========*/\n\n         var vertices = [\n            -0.5,0.5,0.0,\n            -0.5,-0.5,0.0,\n            0.5,-0.5,0.0,\n            0.5,0.5,0.0\n         ];\n\n         var colors = [0,0,1, 1,0,0, 0,1,0, 1,0,1,];\n         \n         indices = [3,2,1,3,1,0];\n         \n         // Create an empty buffer object and store vertex data\n         var vertex_buffer = gl.createBuffer();\n         gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n         gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n         gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n         // Create an empty buffer object and store Index data\n         var Index_Buffer = gl.createBuffer();\n         gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Index_Buffer);\n         gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);\n         gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n\n         // Create an empty buffer object and store color data\n         var color_buffer = gl.createBuffer ();\n         gl.bindBuffer(gl.ARRAY_BUFFER, color_buffer);\n         gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\n\n         /*======================= Shaders =======================*/\n         \n         // vertex shader source code\n         var vertCode = 'attribute vec3 coordinates;'+\n            'attribute vec3 color;'+\n            'varying vec3 vColor;'+\n            'void main(void) {' +\n               ' gl_Position = vec4(coordinates, 1.0);' +\n               'vColor = color;'+\n            '}';\n            \n         // Create a vertex shader object\n         var vertShader = gl.createShader(gl.VERTEX_SHADER);\n\n         // Attach vertex shader source code\n         gl.shaderSource(vertShader, vertCode);\n\n         // Compile the vertex shader\n         gl.compileShader(vertShader);\n\n\n         // fragment shader source code\n         var fragCode = 'precision mediump float;'+\n            'varying vec3 vColor;'+\n            'void main(void) {'+\n               'gl_FragColor = vec4(vColor, 1.);'+\n            '}';\n            \n         // Create fragment shader object\n         var fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n\n         // Attach fragment shader source code\n         gl.shaderSource(fragShader, fragCode);\n\n         // Compile the fragmentt shader\n         gl.compileShader(fragShader);\n\n         // Create a shader program object to\n         // store the combined shader program\n         var shaderProgram = gl.createProgram();\n\n         // Attach a vertex shader\n         gl.attachShader(shaderProgram, vertShader);\n\n         // Attach a fragment shader\n         gl.attachShader(shaderProgram, fragShader);\n\n         // Link both the programs\n         gl.linkProgram(shaderProgram);\n\n         // Use the combined shader program object\n         gl.useProgram(shaderProgram);\n\n         /* ======== Associating shaders to buffer objects =======*/\n\n         // Bind vertex buffer object\n         gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n\n         // Bind index buffer object\n         gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Index_Buffer);\n\n         // Get the attribute location\n         var coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\n\n         // point an attribute to the currently bound VBO\n         gl.vertexAttribTutorialser(coord, 3, gl.FLOAT, false, 0, 0);\n\n         // Enable the attribute\n         gl.enableVertexAttribArray(coord);\n\n         // bind the color buffer\n         gl.bindBuffer(gl.ARRAY_BUFFER, color_buffer);\n         \n         // get the attribute location\n         var color = gl.getAttribLocation(shaderProgram, \"color\");\n \n         // point attribute to the volor buffer object\n         gl.vertexAttribTutorialser(color, 3, gl.FLOAT, false,0,0) ;\n \n         // enable the color attribute\n         gl.enableVertexAttribArray(color);\n\n         /*============Drawing the Quad====================*/\n\n         // Clear the canvas\n         gl.clearColor(0.5, 0.5, 0.5, 0.9);\n\n         // Enable the depth test\n         gl.enable(gl.DEPTH_TEST);\n\n         // Clear the color buffer bit\n         gl.clear(gl.COLOR_BUFFER_BIT);\n\n         // Set the view port\n         gl.viewport(0,0,canvas.width,canvas.height);\n\n         //Draw the triangle\n         gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT,0);\n\n      &lt;/script&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre><p>这将产生以下结果&nbsp;-</p><p><img src=\"/app/data/html5/webgl/img/1-15122021501W32.png\" alt=\"\"></p>"}}