{"sta":1,"data":{"subTitle":"WebGL绘制模型","content":"<div><div>在相关联的缓冲器与着色之后，最后的步骤是画出所需的原语。&nbsp;WebGL 提供了两种方法，即：drawArrays()和 drawElements()来绘制模型。</div></div><div><h3>drawArrays()</h3><div>drawArrays()是用于使用顶点来绘制模型方法。下面是它的语法&nbsp;-</div><pre>void drawArrays(enum mode, int first, long count)\n</pre><div>此方法采用以下三个参数&nbsp;-</div><ul><li><p>mode&nbsp;−&nbsp;在WebGL中，模型采用原始类型绘制。使用模式，程序员不得不选择通过WebGL提供的原始类型。该选项的可能值为&nbsp;− gl.POINTS, gl.LINE_STRIP, gl.LINE_LOOP, gl.LINES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN, 和 gl.TRIANGLES.</p></li><li><p>first&nbsp;−&nbsp;此选项指定启用数组开始元素。它不能是负值。</p></li><li><p>count&nbsp;−&nbsp;此选项指定要呈现的元素数。</p></li></ul><div>如果您使用drawArray()方法s绘制模型，那么WebGL在渲染图形时，也定义几何形状的顺序创建顶点坐标。</div><h3>示例</h3><div>如果你想使用 drawArray()方法来绘制一个三角形，那么你必须通过三个顶点并调用drawArrays()方法，如下图所示。</div><pre>var vertices = [-0.5,-0.5, -0.25,0.5, 0.0,-0.5,];\ngl.drawArrays(gl.TRIANGLES, 0, 3);\n</pre><div>它会产生一个三角形，如下所示。<br><img src=\"/app/data/html5/webgl/img/1-151220210PQ92.jpg\" alt=\"\"><br></div><div>假设你想绘制连续的三角形，那么必须通过下一个三个顶点顺序在顶点缓冲区并注明元素的数量呈现为6。</div><pre>var vertices = [-0.5,-0.5, -0.25,0.5, 0.0,-0.5, 0.0,-0.5, 0.25,0.5, 0.5,-0.5,];\ngl.drawArrays(gl.TRIANGLES, 0, 6);\n</pre><div>这会产生一种连续的三角形，如下所示。<br><img src=\"/app/data/html5/webgl/img/1-151220210910364.jpg\" alt=\"\"><br></div><h3>drawElements()</h3><div>drawElements()是用于绘制用顶点和索引模型方法。它的语法如下&nbsp;-</div><pre>void <b>drawElements</b>(enum mode, long count, enum type, long offset)\n</pre><div>该方法采用以下四个参数&nbsp;-</div><ul><li><p>mode&nbsp;−&nbsp;WebGL模型使用的是原始类型绘制。使用模式，程序员必须选择WebGL提供的原始类型之一。对于此选项可能值的列表是-&nbsp;l.POINTS, gl.LINE_STRIP, gl.LINE_LOOP, gl.LINES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN, 和 gl.TRIANGLES.</p></li><li><p>count&nbsp;−&nbsp;此选项指定待渲染的元素数量。</p></li><li><p>type&nbsp;−&nbsp;此选项指定必须是UNSIGNED_BYTE或UNSIGNED_SHORT索引的数据类型。</p></li><li><p>offset&nbsp;−&nbsp;此选项指定渲染起点。它通常是第一个元素(0)。</p></li></ul><div>如果您使用drawElements()方法绘制模型，则指数缓冲区对象也应随着顶点缓冲对象创建。如果使用此方法，该顶点数据将被处理一次，并作为中提到的索引多次。</div><h3>示例</h3><div>如果想使用索引来画一个三角形，需要通过指数以及顶点并调用drawElements()方法，如下图所示。<br><ins data-ad-client=\"ca-pub-1090193214637198\" data-ad-slot=\"6494738921\"></ins><pre>var vertices =[-0.5,-0.5,0.0,-0.25,0.5,0.0,0.0,-0.5,0.0]; \nvar indices =[0,1,2]; \ngl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT,0);</pre></div><div>它会产生下面的输出&nbsp;-<br><img src=\"/app/data/html5/webgl/img/1-151220211120134.jpg\" alt=\"\"><br></div><div>如果你想使用 drawElements()方法来绘制渲染三角形，只需添加其他顶点并注明余下顶点的索引。<br><pre>var vertices =[-0.5,-0.5,0.0,-0.25,0.5,0.0,0.0,-0.5,0.0,0.25,0.5,0.0,0.5,-0.5,0.0]; \nvar indices =[0,1,2,2,3,4]; \ngl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT,0);</pre></div><p>它会产生下面的输出&nbsp;-<br><img src=\"/app/data/html5/webgl/img/1-15122021120D07.jpg\" alt=\"\"></p><h3>所需的操作</h3><div>绘制一个原语之前，您需要执行一些操作，这说明如下。</div><h3>清除Canvas</h3><div>首先，应该用clearColor()方法清除canvas。可以传递所需颜色的RGBA值作为参数传递到这个方法。然后WebGL清除canvas，并使用指定的颜色进行填充。因此，你可以用这个方法来设置背景颜色。</div><div>看看下面的例子。在这里，我们传递一个灰色的RGBA值。</div><pre>gl.clearColor(0.5, 0.5, .5, 1);\n</pre><h3>启用深度测试</h3><div>使用&nbsp;enable()&nbsp;方法使深度测试，如下所示。</div><pre>gl.enable(gl.DEPTH_TEST); \n</pre><h3>清除颜色缓冲区位</h3><div>清除颜色以及通过使用 clear()方法，如下图所示的深度缓冲。</div><pre>gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n</pre><h3>设置浏览端口</h3><div>观察端口表示包含绘图缓冲器的渲染结果的矩形可视区域。可以使用 viewport() 方法来设置视口的尺寸。在下面的代码，观察口的尺寸被设置为所述画布的大小。</div><pre>gl.viewport(0,0,canvas.width,canvas.height);</pre></div>"}}