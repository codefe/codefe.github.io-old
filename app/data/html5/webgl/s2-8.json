{"sta":1,"data":{"subTitle":"WebGL关联属性和缓冲区对象","content":"<div><div>在顶点着色器程序中的每个属性点为顶点缓冲区对象。创建顶点缓冲区对象之后，程序员必须将它们与顶点着色器程序的属性相关联。每个属性点只有一个顶点缓冲对象，从它们中提取数据值，然后将这些属性传递给着色器程序。</div></div><div><div>到了顶点缓冲对象的顶点着色器程序的属性联系起来，必须按照下面的步骤&nbsp;-</div><ul><li><div>获取属性的位置</div></li><li><div>点属性顶点缓冲区对象</div></li><li><div>启用属性</div></li></ul><h3>获取属性的位置</h3><div>WebGL提供一种方法 getAttribLocation()，它返回属性的位置。它的语法如下-</div><pre>ulong <b>getAttribLocation</b>(Object <i>program</i>, string <i>name</i>)\n</pre><div>此方法接受顶点着色器的程序对象和顶点着色器程序的属性值。</div><div>下面的代码片段展示了如何使用此方法。</div><pre><b>var</b> coordinatesVar = gl.getAttribLocation(shader_program, \"coordinates\"); \n</pre><div>这里，shader_program是着色器程序对象和坐标是顶点着色器程序的属性。</div><h3>指向属性到VBO</h3><div>要分配缓冲对象的属性变量，WebGL提供了一个名为vertexAttribTutorialser()的方法。下面是该方法的语法-</div><pre>void <b>vertexAttribTutorialser</b>(<i>location</i>, int <i>size</i>, enum <i>type</i>, bool <i>normalized</i>, long <i>stride</i>, long <i>offset</i>)\n</pre><div>此方法接受六个参数，它们讨论下面。</div><ul><li><p>Location&nbsp;−&nbsp;它指定一个属性变量的存储位置。根据这个方案，必须通过由getAttribLocation()方法返回的值</p></li><li><p>Size&nbsp;−&nbsp;它指定在缓冲对象每顶点部件的数量</p></li><li><p>Type&nbsp;−&nbsp;它指定数据的类型</p></li><li><p>Normalized&nbsp;−&nbsp;这是一个布尔值。如果为真，非浮动数据被归一化到[0,1]。否则，它被归一化到[-1,1]。</p></li><li><p>Stride&nbsp;−&nbsp;它指定不同顶点数据元素之间的字节数，或默认为零步幅。</p></li><li><p>Offset&nbsp;−&nbsp;它指定在缓冲器对象，以指示数据从顶点的哪个存储字节偏移(字节)。如果数据是从开始(beginning)存储的，偏移量(offset)为0。</p></li></ul><div>下面的片段展示了如何在程序中使用 vertexAttribTutorialser()&nbsp;-</div><pre>gl.vertexAttribTutorialser(coordinatesVar, 3, gl.FLOAT, <b>false</b>, 0, 0);\n</pre><h3>启用属性</h3><div>激活顶点着色器属性来访问缓冲对象的顶点着色器。对于该操作，WebGL 提供 enableVertexAttribArray()方法。这个方法接受属性作为参数位置。以下是如何在程序中使用此方法-</div><pre>gl.enableVertexAttribArray(coordinatesVar); </pre></div>"}}