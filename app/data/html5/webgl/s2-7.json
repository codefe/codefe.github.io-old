{"sta":1,"data":{"subTitle":"WebGL着色器","content":"<div><div>着色器是在GPU上运行的程序。着色器写入OpenGL&nbsp;ES着色语言(称为ES&nbsp;SL)。&nbsp;ES&nbsp;SL拥有它自己的数据类型，限定符，内置的输入和输出变量。</div></div><div><h3>数据类型</h3><div>下表列出了OpenGL&nbsp;ES SL提供的基本数据类型。</div><table border=\"1\" cellpadding=\"2\" cellspacing=\"0\"><tbody><tr><th>S.No.</th><th>类型</th><th>描述</th></tr><tr><td>1</td><td>void</td><td><div>表示一个空值</div></td></tr><tr><td>2</td><td>bool</td><td><div>接受true或false</div></td></tr><tr><td>3</td><td>int</td><td><div>这是一个有符号整数数据类型</div></td></tr><tr><td>4</td><td>float</td><td><div>这是一个浮点标量数据类型</div></td></tr><tr><td>5</td><td>vec2, vec3, vec4</td><td><div>正分量浮点矢量</div></td></tr><tr><td>6</td><td>bvec2, bvec3, bvec4</td><td><div>布尔矢量</div></td></tr><tr><td>7</td><td>ivec2, ivec3, ivec4</td><td><div>有符号整数矢量</div></td></tr><tr><td>8</td><td>mat2, mat3, mat4</td><td>2x2, 3x3, 4x4&nbsp;<span>浮点矩阵</span></td></tr><tr><td>9</td><td>sampler2D</td><td><div>访问2D纹理</div></td></tr><tr><td>10</td><td>samplerCube</td><td><div>访问立方体映射纹理</div></td></tr></tbody></table><h3>修饰符</h3><div>在 OpenGL&nbsp;ES&nbsp;SL 有三大修饰符&nbsp;-</div><table border=\"1\" cellpadding=\"2\" cellspacing=\"0\"><tbody><tr><th>S.No.</th><th><div>修饰符</div></th><th>描述</th></tr><tr><td>1</td><td><b>attribute</b></td><td><div>这个修饰符充当每个顶点数据的顶点着色器和OpenGL&nbsp;ES之间的链接。此顶点着色器<span>属性的值</span>在每次执行时变化</div></td></tr><tr><td>2</td><td><b>uniform</b></td><td><div>这修饰符链接着色器程序及其WebGL的应用程序。不同属性修饰词，制服(uniforms)的值不会改变。制服(uniforms)是只读的;&nbsp;可以用它们与任何基本数据类型来声明一个变量。</div><div>示例&nbsp;-&nbsp;统一 vec4 光的位置;</div></td></tr><tr><td>3</td><td><b>varying</b></td><td><div>这个修饰符形成顶点着色器的内插数据和片段着色器之间的联系。它可用于下列数据类型-&nbsp;float,&nbsp;vec2,&nbsp;vec3,&nbsp;vec4,&nbsp;mat2,&nbsp;mat3,&nbsp;mat4,&nbsp;或数组。</div><div>示例&nbsp;-&nbsp;改变VEC3正常;</div></td></tr></tbody></table><h3>顶点着色器</h3><div>顶点着色器是一个程序代码，这被称为在每个顶点。它改变(移动)的几何形状(例如：三角形)从一个地方到另一个。它处理每个顶点的数据(每个顶点的数据)，例如顶点坐标，法线，色彩，和纹理坐标。</div><div>在顶点着色器的ES&nbsp;GL代码，程序员必须定义的属性来处理数据。这些属性指向一个顶点缓冲区对象是用JavaScript编写的。下面的任务可以使用顶点着色器与顶点变换进行&nbsp;-</div><ul><li><div>顶点变换</div></li><li><div>正常转化和正常化</div></li><li><div>纹理坐标生成</div></li><li><div>纹理坐标变换</div></li><li><div>光线</div></li><li><div>彩色材料应用</div></li></ul><h3><h3>预定义变量</h3></h3><div>OpenGL&nbsp;ES SL提供了顶点着色器下面的预定义变量&nbsp;-</div><table border=\"1\" cellpadding=\"2\" cellspacing=\"0\"><tbody><tr><th>S.No.</th><th>变量</th><th>描述</th></tr><tr><td>1</td><td><b>highp vec4 gl_Position;</b></td><td><div>保存顶点的位置</div></td></tr><tr><td>2</td><td><b>mediump float gl_PointSize;</b></td><td><div>保存变换点的大小。<span>此</span>变量<span>的单位</span>是像素</div></td></tr></tbody></table><h3><h3>示例代码</h3></h3><div>下面我们来看看顶点着色器的示例代码。它处理一个三角形的顶点。</div><pre>attribute vec2 coordinates;\n\nvoid main(void) {\n   gl_Position = vec4(coordinates, 0.0, 1.0);\n};\n</pre><div>如果你仔细观察上面的代码，我们已经声明属性变量名称坐标。(此变量将使用getAttribLocation()方法,&nbsp;属性的坐标被作为参数传递给该方法带着色器程序对象的顶点缓存对象相关联。)</div><div>在给定的顶点着色器程序的第二步骤，gl_position&nbsp;变量被定义。</div><h3>gl_Position</h3><div>gl_Position&nbsp;仅在顶点着色器程序的预定义变量。它包含的顶点位置。在上面的代码，坐标属性是通过在一个载体形式。作为顶点着色器是一个每顶点操作，为每个顶点计算&nbsp;gl_Position&nbsp;值。</div><div>之后，gl_position&nbsp;值用于由原始组件，剪裁，剔除，以及其他有关的原语操作后的顶点处理是通过固定的功能操作。</div><div>我们可以写顶点着色器的所有可能的操作，我们将在本教程中单独讨论顶点着色器程序。</div><h3>片段着色器</h3><div>网状由多个三角形形成，而每个三角形的表面被称为一个片段。片段着色器是在每个片段上的每个像素上运行代码。这是写入计算并填补单个像素的颜色。下面的任务可以使用片段着色来进行-</div><ul><li><div>在插值操作</div></li><li><div>纹理访问</div></li><li><div>纹理应用</div></li><li><div>灰蒙</div></li><li><div>颜色总和</div></li></ul><h3><h3>预定义变量</h3></h3><div>OpenGL&nbsp;ES&nbsp;SL提供了片段着色器如下面的预定义变量-</div><table border=\"1\" cellpadding=\"2\" cellspacing=\"0\"><tbody><tr><th>S.No.</th><th>变量</th><th>描述</th></tr><tr><td>1</td><td>mediump vec4&nbsp;<b>gl_FragCoord</b>;</td><td><div>保存帧缓冲器中的片段位置</div></td></tr><tr><td>2</td><td>bool gl_FrontFacing;</td><td><div>存放属于一个前置原语的片段</div></td></tr><tr><td>3</td><td>mediump vec2 gl_PointCoord;</td><td><div>存放在一个点(点仅光栅化)片段的位置</div></td></tr><tr><td>4</td><td>mediump vec4 gl_FragColor;</td><td><div>保存着色器的输出片段的颜色值</div></td></tr><tr><td>5</td><td>mediump vec4 gl_FragData[n]</td><td><div>持有该片段颜色的色彩附件n</div></td></tr></tbody></table><h3>示例代码</h3><div>片段着色器的下面的代码示例演示如何将着色到三角形的每一个像素。</div><ins data-ad-client=\"ca-pub-1090193214637198\" data-ad-slot=\"6494738921\"></ins><pre>void main(void) {\n   gl_FragColor = vec4(0, 0.8, 0, 1);\n}\n</pre><div>在上面的代码中，颜色值存储在变量gl.FragColor。片段着色器程序传递的输出以使用固定函数变量的管道;&nbsp;FragColor就是其中之一。这个变量保存了该模型的像素的颜色值。</div><h3>存储和编译着色器程序</h3><div>由于着色器是独立的程序，我们可以把它们作为一个单独的脚本，并在应用程序中使用。或者也可以直接将它们保存在字符串格式，如下图所示。</div><pre>var vertCode =\n   'attribute vec2 coordinates;' +\n\t\n   'void main(void) {' +\n      ' gl_Position = vec4(coordinates, 0.0, 1.0);' +\n   '}';\n</pre><h3>编译着色器</h3><div>编译包括以下三个步骤：&nbsp;-</div><ul><li><div>创建Shader对象</div></li><li><div>所述源代码以创建着色器对象</div></li><li><div>编译程序</div></li></ul><h3>创建顶点着色器</h3><div>要创建一个空的着色器，WebGL提供了一个名为createShader()的方法。它创建并返回着色器对象。它的语法如下-</div><pre>Object <b>createShader</b> (enum type)\n</pre><div>如观察到的语法，该方法接受预定义的枚举值作为参数。我们有两种选择这一点&nbsp;-</div><ul><li><p>gl.VERTEX_SHADER创建顶点着色器</p></li><li><p>gl.FRAGMENT_SHADER&nbsp;创建片段着色器。</p></li></ul><h3>附加源到Shader</h3><div>可以使用Shader对象&nbsp;shaderSource&nbsp;()方法创建源代码附加。它的语法如下&nbsp;-</div><pre>void <b>shaderSource</b>(Object shader, string source)\n</pre><div>此方法接受两个参数&nbsp;-</div><ul><li><p>shader&nbsp;−&nbsp;必须创建Shader对象传递作为一个参数。</p></li><li><p>Source&nbsp;−&nbsp;必须以字符串格式传入着色器程序代码。</p></li></ul><h3>编译程序</h3><div>要编译程序，必须使用 compileShader()方法。它的语法如下&nbsp;-</div><pre>compileShader(Object shader)\n</pre><div>这个方法接受着色器程序对象作为参数。创建着色器程序对象之后，附加源代码，将对象传递给该方法。</div><div>下面的代码片段展示了如何创建和编译一个顶点着色器和片段着色器来创建一个三角形。</div><pre>// Vertex Shader\nvar vertCode =\n   'attribute vec3 coordinates;' +\n\t\n   'void main(void) {' +\n      ' gl_Position = vec4(coordinates, 1.0);' +\n   '}';\n      \nvar vertShader = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource(vertShader, vertCode);\ngl.compileShader(vertShader);\n \n// Fragment Shader\nvar fragCode =\n   'void main(void) {' +\n      ' gl_FragColor = vec4(0, 0.8, 0, 1);' +\n   '}';\n      \nvar fragShader = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(fragShader, fragCode);\ngl.compileShader(fragShader);\n</pre><h3>合并程序</h3><div>创建和编译两个着色器程序后，你需要创建一个合并的程序同时包含着色器(顶点和片段)。下面的步骤必须遵循&nbsp;-</div><ul><li><div>创建一个程序对象</div></li><li><div>附加两个着色器</div></li><li><div>连接两个着色器</div></li><li><div>使用程序</div></li></ul><h3>创建一个程序对象</h3><div>通过使用 createProgram()方法创建程序对象。它会返回一个空的程序对象。下面是它的语法-</div><pre>createProgram();\n</pre><h3>附加着色器</h3><div>附加的着色器的使用&nbsp;attachShader()方法创建的程序对象。它的语法如下-</div><pre><b>attachShader</b>(Object <i>program</i>, Object <i>shader</i>);\n</pre><div>此方法接受两个参数&nbsp;-</div><ul><li><p>Program&nbsp;−&nbsp;通过创建空的程序对象作为一个参数</p></li><li><p>Shader&nbsp;−&nbsp;传递的着色器编译程序中的一个(顶点着色器，片段着色器)</p></li></ul><div>注&nbsp;- 需要附加两者都使用这种方法的着色器。</div><h3>链接着色器</h3><div><div>使用linkProgram()方法链接着色器。通过传递到所附加的着色器程序对象。它的语法如下-</div></div><pre>linkProgram(shaderProgram);\n</pre><h3>使用程序</h3><div>WebGL提供了一个名为useProgram()方法。需要链接程序时向它传递。它的语法如下&nbsp;-</div><pre>useProgram(shaderProgram);\n</pre><div>下面的代码片段展示了如何创建，连接和使用组合着色器程序。</div><pre>var shaderProgram = gl.createProgram();\ngl.attachShader(shaderProgram, vertShader);\ngl.attachShader(shaderProgram, fragShader);\ngl.linkProgram(shaderProgram);\ngl.useProgram(shaderProgram); </pre></div><p><!--StartFragment--><br><!--EndFragment--></p>"}}