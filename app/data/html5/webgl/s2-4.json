{"sta":1,"data":{"subTitle":"WebGL示例程序","content":"<div><div>我们已经讨论过了WebGL和WebGL管道的基础知识(一个遵循的程序来渲染图形应用程序)。在本章中，我们将采取一个示例应用程序使用WebGL创建一个三角形，并观察遵循应用程序的步骤。</div></div><div><h3>WebGL应用程序的结构</h3><div>WebGL应用程序代码是JavaScript和OpenGL着色语言的组合。</div><ul><li><div>JavaScript是需要与CPU进行沟通</div></li><li><div>OpenGL着色语言，需要与GPU通信</div></li></ul><p><img alt=\"\" src=\"/app/data/html5/webgl/img/1-1512160H41Ia.jpg\"></p><p><br></p><h3>示例应用程序</h3><div>现在让我们举一个简单的例子，来了解如何使用WebGL绘制一个简单的三角形二维坐标。</div><pre>&lt;!doctype html&gt;\n&lt;html&gt;\n   &lt;body&gt;\n      &lt;canvas width = \"300\" height = \"300\" id = \"my_Canvas\"&gt;&lt;/canvas&gt;\n\t\t\n      &lt;script&gt;\n\n\n         <b>/* Step1: Prepare the canvas and get WebGL context */</b>\n\n         var canvas = document.getElementById('my_Canvas');\n         var gl = canvas.getContext('experimental-webgl');\n\n\n         <b>/* Step2: Define the geometry and store it in buffer objects */</b>\n\n         var vertices = [-0.5, 0.5, -0.5, -0.5, 0.0, -0.5,];\n\n         // Create a new buffer object\n         var vertex_buffer = gl.createBuffer();\n\n         // Bind an empty array buffer to it\n         gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n         \n         // Pass the vertices data to the buffer\n         gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\n         // Unbind the buffer\n         gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\n         <b>/* Step3: Create and compile Shader programs */</b>\n\n         // Vertex shader source code\n         var vertCode =\n            'attribute vec2 coordinates;' + \n            'void main(void) {' + ' gl_Position = vec4(coordinates,0.0, 1.0);' + '}';\n\n         //Create a vertex shader object\n         var vertShader = gl.createShader(gl.VERTEX_SHADER);\n\n         //Attach vertex shader source code\n         gl.shaderSource(vertShader, vertCode);\n\n         //Compile the vertex shader\n         gl.compileShader(vertShader);\n\n         //Fragment shader source code\n         var fragCode = 'void main(void) {' + 'gl_FragColor = vec4(0.0, 0.0, 0.0, 0.1);' + '}';\n\n         // Create fragment shader object\n         var fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n\n         // Attach fragment shader source code\n         gl.shaderSource(fragShader, fragCode);\n\n         // Compile the fragment shader\n         gl.compileShader(fragShader);\n\n         // Create a shader program object to store combined shader program\n         var shaderProgram = gl.createProgram();\n\n         // Attach a vertex shader\n         gl.attachShader(shaderProgram, vertShader); \n         \n         // Attach a fragment shader\n         gl.attachShader(shaderProgram, fragShader);\n\n         // Link both programs\n         gl.linkProgram(shaderProgram);\n\n         // Use the combined shader program object\n         gl.useProgram(shaderProgram);\n\n\n         <b>/* Step 4: Associate the shader programs to buffer objects */</b>\n\n         //Bind vertex buffer object\n         gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);\n\n         //Get the attribute location\n         var coord = gl.getAttribLocation(shaderProgram, \"coordinates\");\n\n         //point an attribute to the currently bound VBO\n         gl.vertexAttribYiibaier(coord, 2, gl.FLOAT, false, 0, 0);\n\n         //Enable the attribute\n         gl.enableVertexAttribArray(coord);\n\n\n         <b>/* Step5: Drawing the required object (triangle) */</b>\n\n         // Clear the canvas\n         gl.clearColor(0.5, 0.5, 0.5, 0.9);\n\n         // Enable the depth test\n         gl.enable(gl.DEPTH_TEST); \n         \n         // Clear the color buffer bit\n         gl.clear(gl.COLOR_BUFFER_BIT);\n\n         // Set the view port\n         gl.viewport(0,0,canvas.width,canvas.height);\n\n         // Draw the triangle\n         gl.drawArrays(gl.TRIANGLES, 0, 3);\n         \n      &lt;/script&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre><div>这将产生以下结果&nbsp;-</div><p><img alt=\"\" src=\"/app/data/html5/webgl/img/1-1512160H645637.png\"></p><div>我们使用WebGL绘制一个简单的三角形遵循五个序列步骤。这些步骤的解释如下-</div><h4>步骤1&nbsp;-&nbsp;准备画布，并得到WebGL的渲染上下文</h4><div>我们得到当前HTML&nbsp;Canvas对象并获取WebGL渲染环境。</div><h4>步骤2&nbsp;-&nbsp;定义几何并将其存储在缓冲器的对象</h4><div>我们定义几何的如顶点，索引，颜色等的属性，并把它们存储在&nbsp;JavaScrip&nbsp;t数组。然后，我们创建一个或多个缓冲器的对象和传递包含数据到相应的缓冲对象的阵列。在这个例子中，我们存储一个三角形的顶点在JavaScript数组中，并传递这个数组到一个顶点缓冲区对象。</div><h4>步骤3&nbsp;-&nbsp;创建和编译着色器程序</h4><div>我们写的顶点着色器和片段着色器程序，编译它们，并通过连接这两个程序将创建一个合并成程序。</div><h4>步骤4&nbsp;-&nbsp;关联缓冲区对象和着色器程序</h4><div>我们关联缓冲器对象，并合并的着色器程序。</div><h4>第5步&nbsp;-&nbsp;绘制所需的对象(三角形)</h4><p>此步骤包括操作如：清除颜色，清除缓冲比特，启用深度测试，设置视图端口等。最后，使用其中一个方法所需要的原语来绘制&nbsp;−&nbsp;drawArrays()&nbsp;或&nbsp;drawElements().</p><div>所有这些步骤在本教程中进一步解释。</div></div>"}}