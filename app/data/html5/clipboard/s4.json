{"sta":1,"data":{"subTitle":"安全和权限","content":"<p>剪贴板访问一直为浏览器带来安全问题。如果没有适当的权限，页面可能会悄悄地将所有恶意内容复制到用户的剪贴板，粘贴时会产生灾难性的结果。想象一下，一个网页，静静地复制<span>&nbsp;</span><code>rm -rf /</code><span>&nbsp;</span>或<a href=\"http://www.aerasec.de/security/advisories/decompression-bomb-vulnerability.html\" rel=\"nofollow\">解压缩炸弹图像</a>到剪贴板。</p><p>让网页不受限制地读取剪贴板更加麻烦。用户经常将敏感信息（如密码和个人详细信息）复制到剪贴板，然后可以通过任何页面阅读，而用户根本无法察觉。</p><p>与许多新的 API 一样，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Clipboard\" rel=\"nofollow\"><code>navigator.clipboard</code></a><span>&nbsp;</span>仅支持通过 HTTPS 提供的页面。为了防止滥用，只有当页面处于活动选项卡时才允许剪贴板访问。活动选项卡中的页面可以在不请求权限的情况下写入剪贴板，但从剪贴板中读取始终需要权限。</p><p></p><p>为了更容易，复制和粘贴的两个新权限已添加到<span>&nbsp;</span><a href=\"https://developers.google.com/web/updates/2015/04/permissions-api-for-the-web\" rel=\"nofollow\">Permissions API</a><span>&nbsp;</span>中。当页面处于活动选项卡时，clipboard-write 权限会自动授予页面。当您通过从剪贴板中读取数据时，则必须要求获取 clipboard-read 权限。</p><blockquote>{ name: 'clipboard-read' }<br>\n{ name: 'clipboard-write' }</blockquote><p>与使用权限 API 的任何其它内容一样，可以检查您的应用是否具有与剪贴板交互的权限：</p><pre><code>navigator.permissions.query({\n  name: 'clipboard-read'\n}).then(permissionStatus =&gt; {\n  // permissionStatus.state 的值是 'granted'、'denied'、'prompt':\n  console.log(permissionStatus.state);\n\n  // 监听权限状态改变事件\n  permissionStatus.onchange = () =&gt; {\n    console.log(permissionStatus.state);\n  };\n});</code></pre><p>以下是剪贴板 API 的“异步”部分真正派上用场的地方：尝试读取或写入剪贴板数据将自动提示用户获得权限（如果尚未授予）。由于 API 是基于 Promise 的，所以如果用户拒绝剪贴板权限时，Promise 将被 reject，因此页面可以适当地作出响应。\n<br>\n<br>因为只有当页面是当前活动选项卡时，Chrome 才允许剪贴板访问，因此如果直接粘贴到 DevTools 中，则会发现这里的一些示例运行不正确，因为此时 DevTools 本身是活动选项卡（页面不是活动选项卡）。有一个技巧：我们需要使用 setTimeout 推迟剪贴板访问，然后在调用函数之前快速单击页面内部以使页面获取焦点：</p><pre><code>setTimeout(async () =&gt; {\n  const text = await navigator.clipboard.readText();\n  console.log(text);\n}, 2000);</code></pre><p><br></p>"}}