{"sta":1,"data":{"subTitle":"添加缓存数据","content":"<p>对于这类的缓存，你可以把它想象成一个<code>Request</code>对象数组，<code>Request</code>请求获取的响应数据将会按键值存储在缓存对象里。有两个方法可以往缓存里添加数据：<code>add</code><span>&nbsp;</span>和<span>&nbsp;</span><code>addAll</code>。用这两个方法将要缓存的请求的地址添加进去。关于<code>Request</code>对象的介绍你可以参考<a href=\"http://www.webhek.com/introduction-to-fetch\">fetch API</a>这篇文章。</p><p></p><p>使用<code>addAll</code>方法可以批量添加缓存请求：<br></p><pre><code>caches.open('test-cache').then(function(cache) { \n  cache.addAll(['/', '/images/logo.png'])\n    .then(function() { \n      // Cached!\n    });\n});</code></pre><p>这个addAll方法可以接受一个地址数组作为参数，这些请求地址的响应数据将会被缓存在cache对象里。addAll返回的是一个Promise。添加单个地址使用add方法：</p><pre><code>caches.open('test-cache').then(function(cache) {\n  cache.add('/page/1');  // \"/page/1\" 地址将会被请求，响应数据会缓存起来。\n});</code></pre><p>add()方法还可以接受一个自定义的Request:</p><pre><code>caches.open('test-cache').then(function(cache) {\n  cache.add(new Request('/page/1', { /* 请求参数 */ }));\n});</code></pre><p>跟add()方法很相似，put()方法也可以添加请求地址，同时添加它的响应数据：</p><pre><code>fetch('/page/1').then(function(response) {\n  return caches.open('test-cache').then(function(cache) {\n    return cache.put('/page/1', response);\n  });\n});</code></pre><p><br></p>"}}