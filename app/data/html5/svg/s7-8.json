{"sta":1,"data":{"subTitle":"SVG animation参数详解","content":"<p><strong>1. attributeName = &lt;attributeName&gt;</strong><br>要变化的元素属性名称，① 可以是元素直接暴露的属性，例如，对于本文反复出现的「马」对应的<code>text</code>元素上的<code>x</code>,<span>&nbsp;</span><code>y</code>或者<code>font-size</code>; ② 可以是CSS属性。例如，透明度<code>opacity</code>.</p><p><strong>2. attributeType = “CSS | XML | auto”</strong><br><code>attributeType</code>支持三个固定参数，<code>CSS</code>/<code>XML</code>/<code>auto</code>. 用来表明<code>attributeName</code>属性值的列表。<code>x</code>,<span>&nbsp;</span><code>y</code>以及<code>transform</code>就属于<code>XML</code>,<span>&nbsp;</span><code>opacity</code>就属于<code>CSS</code>.<span>&nbsp;</span><code>auto</code>为默认值，自动判别的意思（实际上是先当成CSS处理，如果发现不认识，直接XML类别处理）。因此，如果你不确信某属性是XML类别还是CSS类别的时候，我的建议是不设置<code>attributeType</code>值，直接让浏览器自己去判断，几乎无差错。</p><p>不知大家有没有和我一样的疑问：“既然浏览器酱可以自己判断属性类别，那这个属性还有什么意义吗？”我琢磨着，可能某些属性，XML能其作用，CSS也能其作用，例如<code>font-size</code>, 此时就需要明确下归属。</p><p><strong>3. from, to, by, values</strong><br>上面4个属性是一个家族的，是最具哲理的一个家族。他们解决的是非常有哲理的问题：你从哪里来？要到哪里去？……</p><dl><dt>from<span>&nbsp;</span><span>= “<strong>&lt;value&gt;</strong>“</span></dt><dd>动画的起始值。</dd><dt>to<span>&nbsp;</span><span>= “<strong>&lt;value&gt;</strong>“</span></dt><dd>指定动画的结束值。</dd><dt>by<span>&nbsp;</span><span>= “<strong>&lt;value&gt;</strong>“</span></dt><dd>动画的相对变化值。</dd><dt>values<span>&nbsp;</span><span>= “<strong>&lt;list&gt;</strong>“</span></dt><dd>用分号分隔的一个或多个值，可以看出是动画的多个关键值点。</dd></dl><p><code>from</code>,<span>&nbsp;</span><code>to</code>,<span>&nbsp;</span><code>by</code>,<span>&nbsp;</span><code>values</code>虽然属于一个家族，但是相互之间还是有制约关系的。有以下一些规则：<br><strong>a.<span>&nbsp;</span></strong>如果动画的起始值与元素的默认值是一样的，<code>from</code>参数可以省略。<br><strong>b.<span>&nbsp;</span></strong>（不考虑<code>values</code>）<code>to</code>,<code>by</code>两个参数至少需要有一个出现。否则动画效果没有。<code>to</code>表示绝对值，<code>by</code>表示相对值。拿位移距离，如果<code>from</code>是<code>100</code>,<span>&nbsp;</span><code>to</code>值为<code>160</code>则表示移动到<code>160</code>这个位置，但是，如果<code>by</code>值是<code>160</code>，则表示移动到<code>100+160=260</code>这个位置。<br><strong>c.<span>&nbsp;</span></strong>如果<code>to</code>,<code>by</code>同时出现，则<code>by</code>打酱油，只识别<code>to</code>.<br><strong>d.<span>&nbsp;</span></strong>如果<code>to</code>,<code>by</code>,<code>values</code>都没设置，自然没动画效果。如果任意（包括<code>from</code>）一个属性的值不合法，规范上说是没有动画效果。但是，据我测试，FireFox浏览器确实如此，但是Chrome特意做了写容错处理。例如，本来是数值的属性，写了个诸如<code>a</code>这个不合法的值，其会当作<code>0</code>来处理，动画效果依然存在。<br><strong>e.<span>&nbsp;</span></strong><code>values</code>可以是一个值或多值。根据我在Chrome浏览器下的测试，是一个值的时候是没有动画效果。多值时候有动画效果。当<code>values</code>值设置并能识别时候，<code>from</code>,<span>&nbsp;</span><code>to</code>,<span>&nbsp;</span><code>by</code>的值都会被忽略。那<code>values</code>属性是干什么的呢？别看名字挺大众的，其还是有些功力的。我们实现动画，不可能就是单纯的从a位置到b位置，有时候，需要去c位置过渡下。此时，实际上有3个动画关键点。而<code>from</code>,<span>&nbsp;</span><code>to</code>/<code>by</code>只能驾驭两个，此时就是<code>values</code>大显身手的时候了！例如下面这个聪明的马儿来回跑的效果（没有效果点这里<a href=\"/app/data/html5/svg/case/horse-values.svg\" target=\"_blank\">horse-values.svg</a>）：<br><img src=\"/app/data/html5/svg/case/horse-values.svg\" width=\"320\" height=\"200\" alt=\"马儿来回跑\"></p><p>相关SVG代码如下：</p><div><pre>&lt;svg width=\"320\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n    &lt;text font-family=\"microsoft yahei\" font-size=\"120\" y=\"150\" x=\"160\"&gt;\n        马\n        &lt;animate attributeName=\"x\" <span>values=\"160;40;160\"</span> dur=\"3s\" repeatCount=\"indefinite\" /&gt;\n    &lt;/text&gt;\n&lt;/svg&gt;</pre></div><p>总结下，也就是<code>from-to</code>动画、<code>from-by</code>动画、<code>to</code>动画、<code>by</code>动画以及<code>values</code>动画。</p><p><strong>4. begin, end</strong><br><code>begin</code>指动画开始的时间，看上去很简单。设个时间，延迟嘛~~实际上非也非也，上面出现的<code>beigin=\"3s\"</code>只是最简单最基本的表示。</p><p><code>begin</code>的定义是分号分隔的一组值。看到没？是一组值，单值只是其中的情况之一。例如，<code>beigin=\"3s;5s\"</code>表示的是<code>3s</code>之后动画走一下，<code>6s</code>时候动画再走一下（如果之前动画没走完，会立即停止从头开始）。所以，如果一次动画时间为<code>3s</code>, 即<code>dur=\"3s\"</code>，同时没有<code>repeatCount</code>属性时候，我们可以看到动画似乎连续执行了<code>2</code>次。</p><p><strong>时间值</strong><br>既然这里提到了时间，就顺势讲简单一下SVG animation中的时间表示(也适用于<code>dur</code>,<span>&nbsp;</span><code>end</code>属性)。常见单位有<span>&nbsp;</span><code>\"h\"</code>|<code>\"min\"</code>|<code>\"s\"</code>|<code>\"ms\"</code></p><p>时间值支持的格式和规则相当复杂，例如我我规范上看到这个：<code>1997-07-16T19:20:30.45+01:00</code>. 以及洋洋洒洒N多看不懂的示意。尼玛，这个要通透我周末钓鱼时间都没了，关键是没有必要。所以，我们还是了解下最常见的基本使用。</p><p>上面的单位含义都是英文单位的缩写。例如<code>h</code>表示小时(hour).</p><p>时间值支持小数写法，因此，<code>90s</code>我们也可以使用<code>1.5miu</code>表示。时间值还支持<code>hh:mm:ss</code>这种写法，因此，<code>90s</code>我们也可以使用<code>01:30</code>表示。</p><p>还有一点，十进制的小数值是秒的浮点定义。什么意思呢？就是如果<code>begin=\"1.5\"</code>没有单位，这里的小数点表示秒，也就是<code>1.5s</code>的意思。所以，上面N次出现的<code>beigin=\"3s\"</code>也可以简写作<code>beigin=\"3\"</code>. 我测了下，FireFox和Chrome浏览器都是支持的。</p><p><code>begin</code>的单值除了普通value，还有下面这些类别的value：<br><code>offset-value</code><span>&nbsp;</span>|<span>&nbsp;</span><code>syncbase-value</code><span>&nbsp;</span>|<span>&nbsp;</span><code>event-value</code><span>&nbsp;</span>|<span>&nbsp;</span><code>repeat-value</code><span>&nbsp;</span>|<span>&nbsp;</span><code>accessKey-value</code><span>&nbsp;</span>|<span>&nbsp;</span><code>media-marker-value</code><span>&nbsp;</span>|<span>&nbsp;</span><code>wallclock-sync-value</code><span>&nbsp;</span>|<span>&nbsp;</span><code>\"indefinite\"</code></p><p>①<span>&nbsp;</span><code>offset-value</code>表示偏移值，数值前面有<code>+</code>或<code>-</code>. 应该指相对于documentdocument的<code>begin</code>值而言。<br>②<span>&nbsp;</span><code>syncbase-value</code>基于同步确定的值。语法为：<code>[元素的id].begin/end +/- 时间值</code>. 就是说借用其他元素的begin值再加加减减，这个可以准确实现两个独立元素的动画级联效果。OK，看完下面的例子一定会豁然开朗，对于上面的<code>offset-value</code>也会有一定的认知。</p><p>这样的代码：</p><div><pre>&lt;svg width=\"320\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n    &lt;text font-family=\"microsoft yahei\" font-size=\"120\" y=\"160\" x=\"160\"&gt;马\n        &lt;animate id=\"x\" attributeName=\"x\" to=\"60\" begin=\"0s\" dur=\"3s\" fill=\"freeze\" /&gt;\n        &lt;animate attributeName=\"y\" to=\"100\" <span>begin=\"x.end\"</span> dur=\"3s\" fill=\"freeze\" /&gt;\n    &lt;/text&gt;\n&lt;/svg&gt;</pre></div><p>于是，实现了一个马儿折线跑的效果，先横向移动，再无缝纵向移动（没有效果点这里<a href=\"/app/data/html5/svg/case/horse-animate-x-y.svg\" target=\"_blank\">horse-animate-x-y.svg</a>）。<br><img src=\"/app/data/html5/svg/case/horse-animate-x-y.svg\" width=\"320\" height=\"200\" alt=\"马儿折线跑\"></p><p>如果您发现没有效果，可以狠狠地点击这里直接在浏览器中显示SVG：<a href=\"/app/data/html5/svg/case/horse-animate-x-y.svg\" target=\"_blank\">horse-animate-x-y.svg</a></p><p>可以看到，后面<code>attributeName</code>为<code>y</code>的元素的<code>begin</code>值是<code>x.end</code>.<span>&nbsp;</span><code>x.end</code>中的<code>x</code>就是上面一个<code>animate</code>元素的<code>id</code>值，而<code>end</code>是动画元素都有的一个属性，动画结束的时间。因此，<code>begin=\"x.end\"</code>意思就是，当<code>id</code>为<code>x</code>的元素动画结束的时候，我执行动画。非常类似于PowerPoint动画的“上一个动画之后”的选项。</p><p>当然，我们还可以增加一些偏移值，例如<code>begin=\"x.end-1s\"</code>, 就表示<code>id</code>为<code>x</code>的元素动画结束前一秒开始纵向移动。</p><p>③<span>&nbsp;</span><code>event-value</code>这个表示与事件相关联的值。类似于PowerPoint动画的“点击执行该动画”。语法是：<code>[元素的id].[事件类型] +/- 时间值</code>. 举个例子，点击下图的圆圈圈，马儿它就会自己跑！</p><p><svg width=\"320\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"><circle id=\"circle\" cx=\"100\" cy=\"100\" r=\"50\"></circle><text font-family=\"microsoft yahei\" font-size=\"120\" y=\"160\" x=\"160\">马<animate attributeName=\"x\" to=\"60\" begin=\"circle.click\" dur=\"3s\" /></text></svg></p><p>SVG代码如下：</p><div><pre>&lt;svg id=\"svg\" width=\"320\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n    &lt;circle id=\"circle\" cx=\"100\" cy=\"100\" r=\"50\"&gt;&lt;/circle&gt;\n    &lt;text font-family=\"microsoft yahei\" font-size=\"120\" y=\"160\" x=\"160\"&gt;马\n        &lt;animate attributeName=\"x\" to=\"60\" <span>begin=\"circle.click\"</span> dur=\"3s\" /&gt;\n    &lt;/text&gt;\n&lt;/svg&gt;</pre></div><p>代码的关键点就是上面红色高亮的<code>begin=\"circle.click\"</code>, 其中<code>circle</code>为<code>circle</code>元素（黑色圆）的<code>id</code>,<span>&nbsp;</span><code>click</code>表示点击事件。含义一目了然，如果你想点击圆圈圈2秒钟后马儿才跑，很简单，偏移时间加上就可以了——<code>begin=\"circle.click+2s\"</code>.</p><p>主要注意的是，这类与事件关联的SVG需要内联在页面中，否则<code>click</code>什么的都是徒劳。</p><p>④<span>&nbsp;</span><code>repeat-value</code>指重复多少次之后干嘛干嘛。语法为：<code>[元素的id].repeat(整数) +/- 时间值</code>. 举个例子，下面这个马儿会在水平运动2次之后，斜向运动（没有效果点这里<a href=\"/app/data/html5/svg/case/horse-repeat-value.svg\" target=\"_blank\">horse-repeat-value.svg</a>）……<br><img src=\"/app/data/html5/svg/case/horse-repeat-value.svg\" width=\"320\" height=\"200\" alt=\"马儿跑了2次后变向\"></p><p>SVG代码如下：</p><div><pre>&lt;svg width=\"320\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n    &lt;text font-family=\"microsoft yahei\" font-size=\"120\" y=\"160\" x=\"160\"&gt;马\n        &lt;animate id=\"x\" attributeName=\"x\" to=\"60\" begin=\"0s\" dur=\"3s\" repeatCount=\"indefinite\" /&gt;\n        &lt;animate attributeName=\"y\" to=\"100\" <span>begin=\"x.repeat(2)\"</span> dur=\"3s\" fill=\"freeze\" /&gt;\n    &lt;/text&gt;\n&lt;/svg&gt;</pre></div><p><code>begin=\"x.repeat(2)\"</code>指<code>id</code>为<code>x</code>的元素的动画重复<code>2</code>次后执行~~</p><p>⑤<span>&nbsp;</span><code>accessKey-value</code>定义快捷键。即按下某个按键动画开始。语法为：<code>accessKey(\" character \")</code>.<span>&nbsp;</span><code>character</code>表示快捷键所在的字符，举个例子，按下<code>s</code>键动画走起。SVG代码如下：</p><div><pre>&lt;svg width=\"320\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n    &lt;text font-family=\"microsoft yahei\" font-size=\"120\" y=\"160\" x=\"160\"&gt;马\n        &lt;animate attributeName=\"x\" to=\"60\" <span>begin=\"accessKey(s)\"</span> dur=\"3s\" repeatCount=\"indefinite\" /&gt;\n    &lt;/text&gt;\n&lt;/svg&gt;</pre></div><p>SVG实时显示如下：<br><svg width=\"320\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"><text font-family=\"microsoft yahei\" font-size=\"120\" y=\"160\" x=\"160\">马</text></svg></p><p>按下键盘上的字母<code>\"s\"</code>, 理论上动画就会执行。但是，据我测试，我的Chrome浏览器（版本36）上是没有效果的，FireFox浏览器效果杠杠的！所以，如果您的浏览器没有效果，但是手上有火狐，可以复制下面这个地址去FireFox浏览器下感受下：<a href=\"/app/data/html5/svg/case/horse-accesskey-value.svg\" target=\"_blank\">horse-accesskey-value.svg</a></p><p>⑥<span>&nbsp;</span><code>wallclock-sync-value</code>指真实世界的时钟时间定义。时间语法是基于在ISO8601中定义的语法。例如上面提到的<code>1997-07-16T19:20:30.45+01:00</code>这个让人呵呵呵的时间表示。</p><p>⑦<span>&nbsp;</span><code>\"indefinite\"</code>就是这个字符串值，表示“无限等待”。据说需要<code>beginElement()</code>方法触发或者指向该动画元素的超链接(SVG中的<code>a</code>元素)。<br>下面代码是<code>beginElement()</code>方法触发的例子：</p><div><pre>&lt;svg id=\"svg\" width=\"320\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n    &lt;text font-family=\"microsoft yahei\" font-size=\"120\" y=\"160\" x=\"160\"&gt;马\n        &lt;animate attributeName=\"x\" to=\"60\" <span>begin=\"indefinite\" dur=\"3s\" /&gt;\n    &lt;/text&gt;\n&lt;/svg&gt;</span></pre></div><div><pre>var animate = document.getElementsByTagName(\"animate\")[0];\nif (animate) {\n    document.getElementById(\"svg\").onclick = function() {\n        <span>animate.beginElement();\n    };\n}</span></pre></div><p>上面是HTML代码，下面是JS代码。意思很简单，点击我们的<code>svg</code>, 触发<code>animate</code>元素的<code>beginElement()</code>方法，前提是<code>begin=\"indefinite\"</code>.</p><p>超链接触发的例子参见下面：<br><svg width=\"320\" height=\"200\" font-family=\"microsoft yahei\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><text font-size=\"120\" y=\"160\" x=\"160\">马<animate id=\"animatef\" attributeName=\"x\" to=\"60\" begin=\"indefinite\" dur=\"3s\" repeatCount=\"indefinite\" /></text><a xlink:href=\"#animatef\"><text x=\"10\" y=\"20\" fill=\"#cd0000\" font-size=\"30\">点击我</text> </a></svg></p><p>SVG代码如下：</p><div><pre>&lt;svg width=\"320\" height=\"200\" font-family=\"microsoft yahei\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n     &lt;text font-size=\"120\" y=\"160\" x=\"160\"&gt;马\n          &lt;animate id=\"animate\" attributeName=\"x\" to=\"60\" <span>begin=\"indefinite\"</span> dur=\"3s\" repeatCount=\"indefinite\" /&gt;\n     &lt;/text&gt;\n     &lt;a xlink:href=\"#animate\"&gt;\n          &lt;text x=\"10\" y=\"20\" fill=\"#cd0000\" font-size=\"30\"&gt;点击我&lt;/text&gt;\n     &lt;/a&gt;\n&lt;/svg&gt;</pre></div><p>从上面代码可以看出，动画触发条件很简单，只要<code>a</code>元素的<code>xlink:href</code>指向的我们的动画元素就可以了。</p><p>如果上面SVG没效果，可以试试点击这里直接浏览器中访问：<a href=\"/app/data/html5/svg/case/horse-begin-link.svg\" target=\"_blank\">horse-begin-link.svg</a></p><p>最后，搞一段规范上出现的一段文字：</p><blockquote><p>If no begin is specified, the default value is “0” – the animation begins when the document begins. If there is any error in the argument value syntax for begin, the default value for begin will be used.</p></blockquote><p>意思是，没有<code>begin</code>或者<code>begin</code>参数解析异常，都当作<code>0</code>处理。</p><p>说到现在基本上都是<code>begin</code>属性，实际上<code>end</code>与<code>begin</code>除了名字和字面含义不一样，其值的种类与表意都是一模一样的，我这里就不重复啰嗦了。</p><p><strong>5. dur</strong><br><code>dur</code>属性值比<code>begin</code>简单了好几层楼，就后面两种：常规时间值 |<span>&nbsp;</span><code>\"indefinite\"</code>.</p><p>“常规时间值”就是<code>3s</code>之类的正常值；<code>\"indefinite\"</code>指事件无限。试想下，动画时间无限，实际上就是动画压根不执行的意思。因此，设置为<code>\"indefinite\"</code>跟没有<code>dur</code>是一个意思，与<code>dur</code>解析异常一个意思。</p><p><strong>6. calcMode, keyTimes, keySplines</strong><br>这几个参数是控制动画先快还是先慢类似这样作用的。</p><p><code>calcMode</code>属性支持4个值：<code>discrete</code><span>&nbsp;</span>|<span>&nbsp;</span><code>linear</code><span>&nbsp;</span>|<span>&nbsp;</span><code>paced</code><span>&nbsp;</span>|<span>&nbsp;</span><code>spline</code>. 中文意思分别是：“离散”|“线性”|“踏步”|“样条”。</p><dl><dt>discrete</dt><dd><code>from</code>值直接跳到<code>to</code>值。</dd><dt>linear</dt><dd>animateMotion元素以外元素的<code>calcMode</code>默认值。动画从头到尾的速率都是一致的。</dd><dt>paced</dt><dd>通过插值让动画的变化步调平稳均匀。仅支持线性数值区域内的值，这样点之间“距离”的概念才能被计算（如<code>position</code>,<span>&nbsp;</span><code>width</code>,<span>&nbsp;</span><code>height</code>等）。如果”<code>paced</code>“指定，任何<code>keyTimes</code>或<code>keySplines</code>值都会打酱油。</dd><dt>spline</dt><dd>插值定义贝塞尔曲线。<code>spline</code>点的定义在<code>keyTimes</code>属性中，每个时间间隔控制点由<code>keySplines</code>定义。</dd></dl><p><strong>keyTimes = “&lt;list&gt;”</strong><br>跟上面提到的<code>&lt;list&gt;</code>类似，都是分号分隔一组值。<code>keyTimes</code>总名字上看是关键时间点的意思，大致就是这个意思。前面提到过<code>values</code>也是多值，这里有一些约定的规则：首先，<code>keyTimes</code>值的数目要和<code>values</code>一致，如果是<code>from/to/by</code>动画，<code>keyTimes</code>就必须有两个值。然后对于<code>linear</code>和<code>spline</code>动画，第一个数字要是<code>0</code>, 最后一个是<code>1</code>。 最后，每个连续的时间值必须比它前面的值大或者相等。</p><p><code>paced</code>模式下，<code>keyTimes</code>会被忽略；<code>keyTimes</code>定义错误，也会被忽略；<code>dur</code>为<code>indefinite</code>也会被忽略。</p><p><strong>keySplines = “&lt;list&gt;”</strong><br><code>keySplines</code>表示的是与<code>keyTimes</code>相关联的一组贝塞尔控制点（默认<code>0 0 1 1</code>）。每个控制点使用4个浮点值表示：<code>x1 y1 x2 y2</code>. 只有模式是<code>spline</code>时候这个参数才有用，也是分号分隔，值范围<code>0~1</code>，总是比<code>keyTimes</code>少一个值。</p><p>如果<code>keySplines</code>值不合法或个数不对，是没有动画效果的。</p><p>叨叨这么多，规范的术语还真是拗口，不急，我们先感受例子，然后再给大家通俗解释：<br>如下4个SVG，只展示重要部分代码：</p><div><pre>&lt;animate attributeName=\"x\" dur=\"5s\" values=\"0; 20; 160\" calcMode=\"linear\" /&gt;</pre></div><div><pre>&lt;animate attributeName=\"x\" dur=\"5s\" values=\"0; 20; 160\" calcMode=\"paced\"/&gt;</pre></div><div><pre>&lt;animate attributeName=\"x\" dur=\"5s\" values=\"0; 80; 160\" keyTimes=\"0; .8; 1\" calcMode=\"linear\"/&gt;</pre></div><div><pre>&lt;animate attributeName=\"x\" dur=\"5s\" values=\"0; 80; 160\" keyTimes=\"0; .8; 1\" calcMode=\"spline\"  keySplines=\".5 0 .5 1; 0 0 1 1\" /&gt;</pre></div><p>其效果为……您可以狠狠地点击这里：<a href=\"/app/data/html5/svg/case/horse-calcmode.svg\" target=\"_blank\">calcMode, keyTimes, keySplines属性demo</a></p><p>可以看到到4匹马上半途中你追我赶的经常场面：<br></p><table><tbody><tr><td width=\"10\"></td><td width=\"172\"><img alt=\"Example keySplines01 - keySplines of 0 0 1 1 (the default)\" width=\"172\" height=\"174\" src=\"/app/data/html5/svg/img/interpSpline01.png\"><span>keySplines=”0&nbsp;0&nbsp;1&nbsp;1″<br>(the default)</span></td><td width=\"20\"></td><td width=\"172\"><img alt=\"Example keySplines02 - keySplines of .5 0 .5 1\" src=\"/app/data/html5/svg/img/interpSpline02.png\" width=\"172\" height=\"174\"><span>keySplines=”.5&nbsp;0&nbsp;.5&nbsp;1″<br>&nbsp;</span></td></tr><tr><td width=\"10\"></td><td width=\"172\"><img alt=\"Example keySplines03 - keySplines of 0 .75 .25 1\" src=\"/app/data/html5/svg/img/interpSpline03.png\" width=\"172\" height=\"174\"><span>keySplines=”0&nbsp;.75&nbsp;.25&nbsp;1″</span></td><td width=\"20\"></td><td width=\"172\"><img alt=\"Example keySplines04 - keySplines of 1 0 .25 .25\" src=\"/app/data/html5/svg/img/interpSpline04.png\" width=\"172\" height=\"174\"><span>keySplines=”1&nbsp;0&nbsp;.25&nbsp;.25″</span></td></tr></tbody></table><p>拿最后一个SVG说事吧，实际上就是<code>values</code>,<span>&nbsp;</span><code>keyTimes</code>,<span>&nbsp;</span><code>keySplines</code>三个人之间事情。<code>values</code>确定动画的关键位置，<code>keyTimes</code>确定到这个关键点需要的时间，<code>keySplines</code>确定的是每个时间点段之间的贝塞尔曲线，也就是具体的缓动表现。我们平时CSS3写的<code>transition</code>动画效果，也是这么回事，这是<code>values</code>值就两个，所以，<code>keyTimes</code>只能是<code>0;1</code>, 贝塞尔曲线就只有一个，要不<code>ease</code>, 要不<code>linear</code>等。</p><p><strong>7. repeatCount, repeatDur</strong><br><code>repeatCount</code>表示动画执行次数，可以是合法数值或者”<code>indefinite</code>“（动画循环到电脑死机）。</p><p><code>repeatDur</code>定义重复动画的总时间。可以是普通时间值或者”<code>indefinite</code>（”动画循环到电脑死机）。</p><p>例如这个：</p><div><pre>&lt;animate attributeName=\"x\" to=\"60\" dur=\"3s\" repeatCount=\"indefinite\" repeatDur=\"10s\" /&gt;</pre></div><p>动画只玩执行完整<code>3</code>个<span>&nbsp;</span><code>+</code><span>&nbsp;</span>一个<code>1/3</code>个动画。因为repeat总时间就<code>10s</code>而已。</p><p><strong>8. fill</strong><br><code>fill</code>表示动画间隙的填充方式。支持参数有：<code>freeze</code><span>&nbsp;</span>|<span>&nbsp;</span><code>remove</code>. 其中<code>remove</code>是默认值，表示动画结束直接回到开始的地方。<code>freeze</code>“冻结”表示动画结束后像是被冻住了，元素保持了动画结束之后的状态。</p><p><strong>9. accumulate, additive</strong><br><code>accumulate</code>是累积的意思。支持参数有：<code>none</code><span>&nbsp;</span>|<span>&nbsp;</span><code>sum</code>. 默认值是<code>none</code>. 如果值是<code>sum</code>表示动画结束时候的位置作为下次动画的起始位置。</p><p><code>additive</code>控制动画是否附加。支持参数有：<code>replace</code><span>&nbsp;</span>|<span>&nbsp;</span><code>sum</code>. 默认值是<code>replace</code>. 如果值是<code>sum</code>表示动画的基础知识会附加到其他低优先级的动画上，</p><p>举两个例子，下面是例子1：</p><div><pre>&lt;img ...&gt;\n&nbsp;&nbsp; &lt;animateMotion begin=\"0\" dur=\"5s\" path=\"<em>[some path]</em>\" <span>additive=\"sum\"</span> fill=\"freeze\" /&gt;\n&nbsp;&nbsp; &lt;animateMotion begin=\"5s\" dur=\"5s\" path=\"<em>[some path]</em>\" <span>additive=\"sum\"</span> fill=\"freeze\" /&gt;\n&nbsp;&nbsp; &lt;animateMotion begin=\"10s\" dur=\"5s\" path=\"<em>[some path]</em>\" <span>additive=\"sum\"</span> fill=\"freeze\" /&gt;\n&lt;/img&gt;</pre></div><p>这里轮到第二个动画的时候，路径是从第一个动画路径结束地方开始的，于是，3个动画完美无缝连接起来了。</p><p>例子2：</p><div><pre>&lt;animateTransform attributeName=\"transform\" type=\"scale\" from=\"1\" to=\"3\" dur=\"10s\" repeatCount=\"indefinite\" additive=\"sum\"/&gt;\n&lt;animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 30 20\" to=\"360 30 20\" dur=\"10s\" fill=\"freeze\" repeatCount=\"indefinite\" additive=\"sum\"/&gt;;</pre></div><p>这里，两个动画同时都是<code>transform</code>，都要使用一个<code>type</code>属性，好在这个例子<code>additive=\"sum\"</code>是累加的而不是<code>replace</code>替换。于是，我们就可以是实现一边旋转一边放大的效果（没有效果点这里<a href=\"/app/data/html5/svg/case/horse-animate-sum.svg\" target=\"_blank\">horse-animate-sum.svg</a>）。</p><p><img src=\"/app/data/html5/svg/case/horse-animate-sum.svg\" width=\"320\" height=\"200\" alt=\"旋转放大木马\"></p><p><strong>10. restart</strong><br><code>restart</code>这个属性诞生的背景如下：很多动画呢，其触发可能与事件相关，例如，点击某圆圈，马儿就跑。而且，似乎没点一次，马儿就跑一下。现在，存在这种情况，希望马儿只跑一次，之后在点击就没有反应。这种需求的出现迫使<code>restart</code>参数的出现。支持的参数有：<code>always</code><span>&nbsp;</span>|<span>&nbsp;</span><code>whenNotActive</code><span>&nbsp;</span>|<span>&nbsp;</span><code>never</code>.</p><p><code>always</code>是默认值，表示总是，也就是点一次圈圈，马儿跑一下。<code>whenNotActive</code>表示动画正在进行的时候，是不能重启动画的。<code>never</code>表示动画是一波流。</p><p>很好理解的参数，就不举例了。</p><p><code>11. min, max</code><br><code>min/max</code>表示动画执行最短和最长时间。支持参数为时间值和<code>\"media\"</code>（媒介元素有效）,<span>&nbsp;</span><code>max</code>还支持<code>indefinite</code>.</p><p><!--StartFragment--><!--EndFragment--></p><p><code>12. ...</code><br>等其他遗漏参数。</p>"}}