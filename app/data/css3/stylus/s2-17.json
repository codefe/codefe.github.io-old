{"sta":1,"data":{"subTitle":"继承(@extend)","content":"<h3>继承</h3><p>Stylus的<span><font color=\"#c24f4a\">@extend</font></span>指令受<a href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#extend\">SASS实现</a>的启发，基本一致，除了些轻微差异。此功能大大简化了继承其他语义规则集的语义规则集的维护。</p><h3>混合书写下的“继承”</h3><p>尽管你可以使用混写实现类似效果，但会导致重复的CSS. 典型的模式式定义如下的几个类名，然后归结到一个元素中，例如\"warning message\".</p><p>该技术实现是没什么问题，但是维护就比较麻烦了。</p><pre><code>message,\n.warning {\n  padding: 10px;\n  border: 1px solid #eee;\n}\n\n.warning {\n  color: #E2E21E;\n}</code></pre><h3>使用__@extend__</h3><p>使用<code>__@extend__</code>得到同样的输出，只要把对应的选择器传给<code>@extend</code>即可。然后<code>.warning</code>选择器就会继承已经存在的<code>.message</code>规则。</p><pre><code>.message {\n  padding: 10px;\n  border: 1px solid #eee;\n}\n\n.warning {\n  @extend .message;\n  color: #E2E21E;\n}</code></pre><p>这儿是个更复杂的例子，演示了<code>__@extend__</code>如何级联。</p><pre><code>red = #E33E1E\nyellow = #E2E21E\n\n.message\n  padding: 10px\n  font: 14px Helvetica\n  border: 1px solid #eee\n\n.warning\n  @extends .message\n  border-color: yellow\n  background: yellow + 70%\n\n.error\n  @extends .message\n  border-color: red\n  background: red + 70%\n\n.fatal\n  @extends .error\n  font-weight: bold\n  color: red</code></pre><p>生成CSS如下：</p><pre><code>.message,\n.warning,\n.error,\n.fatal {\n  padding: 10px;\n  font: 14px Helvetica;\n  border: 1px solid #eee;\n}\n.warning {\n  border-color: #e2e21e;\n  background: #f6f6bc;\n}\n.error,\n.fatal {\n  border-color: #e33e1e;\n  background: #f7c5bc;\n}\n.fatal {\n  font-weight: bold;\n  color: #e33e1e;\n}</code></pre><p>目前Stylus与SASS不同之处在于SASS不允许<code>__@extend__</code>嵌套选择器。</p><pre><code>form\n  button\n    padding: 10px\n\na.button\n  @extend form button \nSyntax error: Can't extend form button: can't extend nested selectors\n// 解析错误： 无法继承自 button: 不能继承嵌套选择器\n        on line 6 of standard input\n  Use --trace for backtrace.</code></pre><p>Stylus中，只要选择器匹配，就可以生效：</p><pre><code>form\n input[type=text]\n   padding: 5px\n   border: 1px solid #eee\n   color: #ddd\n\ntextarea\n @extends form input[type=text]\n padding: 10px</code></pre><p>生成：</p><p><!--StartFragment--><!--EndFragment--></p><pre><code>form input[type=text],\nform textarea {\n  padding: 5px;\n  border: 1px solid #eee;\n  color: #ddd;\n}\ntextarea {\n  padding: 10px;\n}</code></pre>"}}