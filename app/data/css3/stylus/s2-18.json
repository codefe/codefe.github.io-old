{"sta":1,"data":{"subTitle":"函数之url()","content":"<h3>内联Data URI图像</h3><p>Stylus捆绑了一个可选函数，名叫<code>url()</code>，其替换了字面上的<code>url()</code>调用（且使用base64<span>&nbsp;</span><a href=\"http://en.wikipedia.org/wiki/Data_URI_scheme\"><font color=\"#c24f4a\">Data URIs</font></a>有条件地内联它们）。</p><h3>示例</h3><p>通过<code>require('stylus').url</code>该函数本身是可用的，其接受一个<code>options</code>对象，当看到<code>url()</code>时候，返回Stylus内部调用的函数。</p><p><code>.define(name, callback)</code>方法指定了一个可被调用的JavaScript函数。在这种情况下，因为我们图片在<code>./css/images</code>中，我们可以忽视<code>paths</code>选项（默认情况下，会查找相关要呈现的图像文件）。如果愿意，该行为时可以改变的。</p><pre><code>stylus(str)\n  .set('filename', __dirname + '/css/test.styl')\n  .define('url', stylus.url())\n  .render(function(err, css){\n\n  });</code></pre><p>例如，想象图片在<code>./public/images</code>, 我们想要使用<code>url(images/tobi.png)</code>, 我们可以传递<code>paths</code>公共目录。这样，它就成为了向上查找进程的一部分。</p><p>同样，如果我们想替换为<code>url(tobi.png)</code>, 我们可以传递<code>paths: [__dirname + '/public/images']</code>.</p><pre><code>stylus(str)\n  .set('filename', __dirname + '/css/test.styl')\n  .define('url', stylus.url({ paths: [__dirname + '/public'] }))\n  .render(function(err, css){\n\n  });</code></pre><h6>选项(Options)</h6><p><!--StartFragment--><!--EndFragment--></p><ul><li><code>limit</code><span>&nbsp;</span>大小默认限制30Kb(30000)</li><li><code>paths</code><span>&nbsp;</span>图像解析路径</li></ul>"}}