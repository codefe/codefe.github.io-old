{"sta":1,"data":{"subTitle":"JavaScript API","content":"<h3>JavaScript API</h3><p><code>require</code>模块，用给定的Stylus代码字符串调用<code>render()</code>，以及（可选的）<code>optional</code>对象。</p><p>传递<code>filename</code>参数可以利用Stylus框架提供更好的错误报告。</p><pre><code>var stylus = require('stylus');\n\nstylus.render(str, { filename: 'nesting.css' }, function(err, css){\n  if (err) throw err;\n  console.log(css);\n});</code></pre><p>我们可以用更渐进的方式实现做一样的事：</p><pre><code>var stylus = require('stylus');\n\nstylus(str)\n  .set('filename', 'nesting.css')\n  .render(function(err, css){\n    // logic\n  });</code></pre><h3>.set(setting, value)</h3><p>应用诸如<code>filename</code>的设置，或导入<code>paths</code>:</p><pre><code>.set('filename', __dirname + '/test.styl')\n .set('paths', [__dirname, __dirname + '/mixins'])</code></pre><h3>.include(path)</h3><p>渐进替换<code>.set('paths',...)</code>的就是<code>.include()</code>. 当其他Stylus库（已暴露路径）暴露的时候，这个是理想的选择。</p><pre><code>stylus(str)\n  .include(require('nib').path)\n  .include(process.env.HOME + '/mixins')\n  .render(...)</code></pre><h3>.import(path)</h3><p>推迟给定<code>path</code>导入，直到计算被执行。下面这个例子基本上跟在Stylus片段中执行<code>@import 'mixins/vendor'</code>一样：</p><pre><code>var stylus = require('../')\n  , str = require('fs').readFileSync(__dirname + '/test.styl', 'utf8');\n\nstylus(str)\n  .set('filename', __dirname + '/test.styl')\n  .import('mixins/vendor')\n  .render(function(err, css){\n  if (err) throw err;\n  console.log(css);\n});</code></pre><h3>.define(name, node)</h3><p>通过传递一个<code>Node</code>，我们可以定义一个全局变量。当库（该库依赖于其它库可用性）里面暴露某些条件特征的时候，这个就很有用。例如<span>Nib</span>扩展库条件支持node-canvas, 提供图片生成。</p><p>但这并不是一直可用的，因此Nib可以定义：</p><pre><code>.define('has-canvas', stylus.nodes.false);\n .define('some-setting', new stylus.nodes.String('some value'));</code></pre><p>如果可能，Stylus也会转换JavaScript值为Stylus值。</p><pre><code>.define('string', 'some string')\n .define('number', 15.5)\n .define('some-bool', true)\n .define('list', [1,2,3])\n .define('list', [1,2,[3,4,[5,6]]])\n .define('list', { foo: 'bar', bar: 'baz' })\n .define('families', ['Helvetica Neue', 'Helvetica', 'sans-serif'])</code></pre><p>下面是一些规则应用在js函数返回值上：</p><pre><code>.define('get-list', function(){\n  return ['foo', 'bar', 'baz'];\n})</code></pre><h3>.define(name, fn)</h3><p>该方法允许你未Stylus提供JavaScript定义的函数。正如想到JavaScript用C++绑定。当有一些事情无法用Stylus完成的时候，就在JavaScript中定义它。</p><p>下面这个例子，我们定义了4个函数：<code>add()</code>,<span>&nbsp;</span><code>sub()</code>,<span>&nbsp;</span><code>image-width()</code>,<span>&nbsp;</span><code>image-height()</code>. 这些函数必须返回一个<code>Node</code>, 通过<code>stylus.nodes</code>该构造以及其它nodes都可以了。</p><pre>  <code>var stylus = require('../')\n    , nodes = stylus.nodes\n    , utils = stylus.utils\n    , fs = require('fs');\n\n  function add(a, b) {\n    return a.operate('+', b);\n  }\n\n  function sub(a, b) {\n    return a.operate('-', b);\n  }\n\n  function imageDimensions(img) {\n    // 宣告 node (img) 是一个 String 节点, \n    // 为错误报告传递参数名\n    utils.assertType(img, 'string', 'img');\n    var path = img.val;\n\n    // 得到尺寸有必要取得字节数\n    // 如果这是真的，你会每种格式都处理下，\n    // 而不是读取整个图片 :)\n    var data = fs.readFileSync(__dirname + '/' + path);\n\n    // GIF\n    // 当然，你可以支持更多 :)\n    if ('GIF' == data.slice(0, 3).toString()) {\n      var w = data.slice(6, 8)\n        , h = data.slice(8, 10);\n      w = w[1] &lt;&lt; 8 | w[0];\n      h = h[1] &lt;&lt; 8 | h[0];\n    }\n\n    return [w, h];\n  }\n\n  function imageWidth(img) {\n    return new nodes.Unit(imageDimensions(img)[0]);\n  }\n\n  function imageHeight(img) {\n    return new nodes.Unit(imageDimensions(img)[1]);\n  }\n\n  stylus(str)\n    .set('filename', 'js-functions.styl')\n    .define('add', add)\n    .define('sub', sub)\n    .define('image-width', imageWidth)\n    .define('image-height', imageHeight)\n    .render(function(err, css){\n      if (err) throw err;\n      console.log(css);\n    });</code></pre><p>为了进一步的参考（直到本文档全部结束），请看下面的文件：</p><ul><li><code>lib/nodes/*</code></li><li><code>lib/utils.js</code></li></ul><h3>.use(fn)</h3><p>当被调用时，给定<code>fn</code>被渲染器调用，允许所有上面的方法被使用。这允许插件轻易地暴露自己，定义函数，路径等。</p><p><!--StartFragment--><!--EndFragment--></p><pre><code>var mylib = function(style){\n  style.define('add', add);\n  style.define('sub', sub);\n};\n\nstylus(str)\n  .use(mylib)\n  .render(...)</code></pre>"}}