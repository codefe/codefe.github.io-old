{"sta":1,"data":{"subTitle":"条件(Conditionals)","content":"<h3>条件</h3><p>条件提供了语言的刘控制，否则就是纯粹的静态语言。提供的条件有导入、混入、函数以及更多。下面的例子纯粹示例，并不是使用建议。</p><h3>if / else if / else</h3><p>这没什么好说的，跟一般的语言一致，<code>if</code>表达式满足(<code>true</code>)的时候执行后面语句块，否则，继续后面的<code>else if</code>或<code>else</code>.</p><p>下面这个例子，根据overload的条件，决定是使用<code>padding</code>还是<code>margin</code>.</p><pre><code>overload-padding = true\n\nif overload-padding\n  padding(y, x)\n    margin y x\n\nbody\n  padding 5px 10px</code></pre><p>另外的例子：</p><pre><code>box(x, y, margin = false)\n  padding y x\n  if margin\n    margin y x\n\nbody\n  box(5px, 10px, true)</code></pre><p>另外的<code>box()</code>帮手：</p><pre><code>box(x, y, margin-only = false)\n  if margin-only\n    margin y x\n  else\n    padding y x</code></pre><h3>除非(unless)</h3><p>熟悉Ruby程序语言的用户应该都知道<code>unless</code>条件，其基本上与<code>if</code>相反，本质上是<code>(!(expr))</code>.</p><p>下面这个例子中，如果<code>disable-padding-override</code>是<code>undefined</code>或<code>false</code>,<span>&nbsp;</span><code>padding</code>将被干掉，显示<code>margin</code>代替之。但是，如果是<code>true</code>,<span>&nbsp;</span><code>padding</code>将会如期继续输出<code>padding 5px 10px</code>.</p><pre><code>disable-padding-override = true\n\nunless disable-padding-override is defined and disable-padding-override\n  padding(x, y)\n    margin y x\n\nbody\n  padding 5px 10px</code></pre><h3>后缀条件</h3><p>Stylus支持后缀条件，这就意味着<code>if</code>和<code>unless</code>可以当作操作符；当右边表达式为真的时候执行左边的操作对象。</p><p>例如，我们定义<code>negative()</code>来执行一些基本的检查。下面我们使用块式条件：</p><pre><code>negative(n)\n  unless n is a 'unit'\n    error('无效数值')\n  if n &lt; 0\n    yes\n  else\n    no</code></pre><p>接下来，我们利用后缀条件让我们的方法简洁。</p><pre><code>negative(n)\n  error('无效数值') unless n is a 'unit'\n  return yes if n &lt; 0\n  no</code></pre><p>当然，我们可以更进一步。如这个<code>n &lt; 0 ? yes : no</code>可以用布尔代替：<code>n &lt; 0</code>.</p><p>后缀条件适用于大多数的单行语句。如，<code>@import</code>,<span>&nbsp;</span><code>@charset</code>, 混合书写等。当然，下面所示的属性也是可以的：</p><pre><code>pad(types = margin padding, n = 5px)\n  padding unit(n, px) if padding in types\n  margin unit(n, px) if margin in types\n\nbody\n  pad()\n\nbody\n  pad(margin)\n\nbody\n  apply-mixins = true\n  pad(padding, 10) if apply-mixins</code></pre><p>生成为：</p><p><!--StartFragment--><!--EndFragment--></p><pre><code>body {\n  padding: 5px;\n  margin: 5px;\n}\nbody {\n  margin: 5px;\n}\nbody {\n  padding: 10px;\n}</code></pre>"}}