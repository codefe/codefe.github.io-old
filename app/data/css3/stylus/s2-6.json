{"sta":1,"data":{"subTitle":"方法(Functions)","content":"<h3>函数</h3><p>Stylus强大之处就在于其内置的语言函数定义。其定义与混入(mixins)一致；却可以返回值。</p><h6>返回值</h6><p>很简单的例子，两数值相加的方法：</p><pre><code>add(a, b)\n  a + b</code></pre><p>我们可以在特定条件下使用该方法，如在属性值中：</p><pre><code>body \n  padding add(10px, 5)</code></pre><p>渲染：</p><pre><code>body {\n  padding: 15px;\n}</code></pre><h3>默认参数</h3><p>可选参数往往有个默认的给定表达。在Stylus中，我们甚至可以超越默认参数。</p><p>例如：</p><blockquote>add(a, b = a)<br>  &nbsp;&nbsp;&nbsp;&nbsp;a + b<br><br>add(10, 5)<br><span>// =&gt; 15<br><br></span>add(10)<br><span>// =&gt; 20</span></blockquote><p><span>注意：</span>因为参数默认是赋值，我们可可以使用函数调用作为默认值。</p><pre><code>add(a, b = unit(a, px))\n  a + b</code></pre><h3>函数体</h3><p>我们可以把简单的<code>add()</code>方法更进一步。通过内置<code>unit()</code>把单位都变成<code>px</code>, 因为赋值在每个参数上，因此，我们可以无视单位换算。</p><blockquote>add(a, b = a)<br>  &nbsp;&nbsp;&nbsp;&nbsp;a = unit(a, px)<br>  &nbsp;&nbsp;&nbsp;&nbsp;b = unit(b, px)<br>  &nbsp;&nbsp;&nbsp;&nbsp;a + b<br><br>add(15%, 10deg)<br><span>// =&gt; 25</span></blockquote><h3>多个返回值</h3><p>Stylus的函数可以返回多个值，就像你给变量赋多个值一样。</p><p>例如，下面就是一个有效赋值：</p><blockquote>sizes = 15px 10px<br><br>\nsizes[0]<br><span>// =&gt; 15px</span></blockquote><p>类似的，我们可以在函数中返回多个值：</p><blockquote>sizes()<br> &nbsp;&nbsp;&nbsp;&nbsp;15px 10px<br><br>\nsizes()[0]<br><span>// =&gt; 15px</span></blockquote><p>有个小小的例外就是返回值是标识符。例如，下面看上去像一个属性赋值给Stylus（因为没有操作符）。</p><pre><code>swap(a, b)\n  b a</code></pre><p>为避免歧义，我们可以使用括号，或是<code>return</code>关键字。</p><pre><code>swap(a, b)\n  (b a)\n\nswap(a, b)\n  return b a</code></pre><h3>条件</h3><p>比方说，我们想要创建一个名为<code>stringish()</code>的函数，用来决定参数是否是字符串。我们检查<code>val</code>是否是字符串或缩进（类似字符）。如下，使用<code>yes</code>和<code>no</code>代替<code>true</code>和<code>false</code>.</p><pre><code>stringish(val)\n  if val is a 'string' or val is a 'ident'\n    yes\n  else\n    no</code></pre><p>使用：</p><blockquote>stringish('yay') == yes<br><span>// =&gt; true<br><br></span>\nstringish(yay) == yes<br><span>// =&gt; true<br><br></span>\nstringish(0) == no<br><span>// =&gt; true</span></blockquote><p><span>注意：</span><code>yes</code>和<code>no</code>并不是布尔值。本例中，它们只是简单的未定义标识符。</p><p>另外一个例子：</p><pre><code>compare(a, b)\n  if a &gt; b\n    higher\n  else if a &lt; b\n    lower\n  else\n    equal</code></pre><p>使用：</p><blockquote>compare(5, 2)<br><span>// =&gt; higher<br><br></span>\ncompare(1, 5)<br><span>// =&gt; lower<br><br></span>\ncompare(10, 10)<br><span>// =&gt; equal</span></blockquote><h3>别名</h3><p>给函数起个别名，和简单，直接等于就可以了。例如上面的<code>add()</code>弄个别名<code>plus()</code>, 如下：</p><blockquote>plus = add<br><br>\nplus(1, 2)<br><span>// =&gt; 3</span></blockquote><h3>变量函数</h3><p>我们可以把函数当作变量传递到新的函数中。例如，<code>invoke()</code>接受函数作为参数，因此，我们可以传递<code>add()</code>以及<code>sub()</code>.</p><pre><code>invoke(a, b, fn)\n  fn(a, b)\n\nadd(a, b)\n  a + b\n\nbody\n  padding invoke(5, 10, add)\n  padding invoke(5, 10, sub)</code></pre><p>结果：</p><pre><code>body {\n  padding: 15;\n  padding: -5;\n}</code></pre><h3>参数</h3><p><code>arguments</code>是所有函数体都有的局部变量，包含传递的所有参数。</p><p>例如：</p><blockquote>sum()<br>  &nbsp;&nbsp;&nbsp;&nbsp;n = 0<br>  &nbsp;&nbsp;&nbsp;&nbsp;for num in arguments<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n = n + num<br><br>\nsum(1,2,3,4,5)<br><span>// =&gt; 15</span></blockquote><h3>哈希示例</h3><p>下面，我们定义<code>get(hash, key)</code>方法，用来返回<code>key</code>值或<code>null</code>. 我们遍历每个键值对，如果键值匹配，返回对应的值。</p><pre><code>get(hash, key)\n  return pair[1] if pair[0] == key for pair in hash</code></pre><p>下面例子可以证明，语言函数模样的Stylus表达式具有更大的灵活性。</p><p><!--StartFragment--><!--EndFragment--></p><blockquote>hash = (one 1) (two 2) (three 3)<br><br>\nget(hash, two)<br><span>// =&gt; 2<br><br></span>\nget(hash, three)<br><span>// =&gt; 3<br><br></span>\nget(hash, something)<br><span>// =&gt; null</span></blockquote>"}}