{"sta":1,"data":{"subTitle":"内置方法(Built-in Functions)","content":"<h3>red(color)</h3><p>返回<code>color</code>中的红色比重。</p><blockquote>red(#c00)<br><span>// =&gt; 204</span></blockquote><h3>green(color)</h3><p>返回<code>color</code>中的绿色比重。</p><blockquote>green(#0c0)<br><span>// =&gt; 204</span></blockquote><h3>blue(color)</h3><p>返回<code>color</code>中的蓝色比重。</p><blockquote>red(#00c)<br><span>// =&gt; 204</span></blockquote><h3>alpha(color)</h3><p>返回<code>color</code>中的透明度比重。</p><blockquote>alpha(#fff)<br><span>// =&gt; 1<br><br></span>\nalpha(rgba(0,0,0,0.3))<br><span>// =&gt; 0.3</span></blockquote><h3>dark(color)</h3><p>检查<code>color</code>是否是暗色。</p><blockquote>dark(black)<br><span>// =&gt; true<br><br></span>\ndark(#005716)<br><span>// =&gt; true<br><br></span>\ndark(white)<br><span>// =&gt; false</span></blockquote><h3>light(color)</h3><p>检查<code>color</code>是否是亮色。</p><blockquote>light(black)<br><span>// =&gt; false<br><br></span>\nlight(white)<br><span>// =&gt; true<br><br></span>\nlight(#00FF40)<br><span>// =&gt; true</span></blockquote><h3>hue(color)</h3><p>返回给定<code>color</code>的色调。</p><blockquote>hue(hsla(50deg, 100%, 80%))<br><span>// =&gt; 50deg</span></blockquote><h3>saturation(color)</h3><p>返回给定<code>color</code>的饱和度。</p><blockquote>saturation(hsla(50deg, 100%, 80%))<br><span>// =&gt; 100%</span></blockquote><h3>lightness(color)</h3><p>返回给定<code>color</code>的亮度。</p><blockquote>lightness(hsla(50deg, 100%, 80%))<br><span>// =&gt; 80%</span></blockquote><h3>push(expr, args…)</h3><p>后面推送给定的<code>args</code>给<code>expr</code>.</p><blockquote>nums = 1 2<br>push(nums, 3, 4, 5)<br><br>\nnums<br><span>// =&gt; 1 2 3 4 5</span></blockquote><p>别名为<code>append()</code>.</p><h3>unshift(expr, args…)</h3><p>起始位置插入给定的<code>args</code>给<code>expr</code>.</p><blockquote>nums = 4 5<br>unshift(nums, 3, 2, 1)<br><br>\nnums<br><span>// =&gt; 1 2 3 4 5</span></blockquote><p>别名为<code>prepend()</code>.</p><h3>keys(pairs)</h3><p>返回给定<code>pairs</code>中的键。</p><blockquote>pairs = (one 1) (two 2) (three 3)<br>keys(pairs)<br><span>// =&gt; one two three</span></blockquote><h3>values(pairs)</h3><p>返回给定<code>pairs</code>中的值。</p><blockquote>pairs = (one 1) (two 2) (three 3)<br>values(pairs)<br><span>// =&gt; 1 2 3</span></blockquote><h3>typeof(node)</h3><p>字符串形式返回<code>node</code>类型。</p><blockquote>type(12)<br><span>// =&gt; 'unit'<br><br></span>\ntypeof(12)<br><span>// =&gt; 'unit'<br><br></span>\ntypeof(#fff)<br><span>// =&gt; 'rgba'<br><br></span>\ntype-of(#fff)<br><span>// =&gt; 'rgba'</span></blockquote><p>别名有<code>type-of</code>和<code>type</code>.</p><h3>unit(unit[, type])</h3><p>返回<code>unit</code>类型的字符串或空字符串，或者赋予<code>type</code>值而无需单位转换。</p><blockquote>unit(10)<br><span>// =&gt; ''<br><br></span>\nunit(15in)<br><span>// =&gt; 'in'<br><br></span>\nunit(15%, 'px')<br><span>// =&gt; 15px<br><br></span>\nunit(15%, px)<br><span>// =&gt; 15px</span></blockquote><h3>match(pattern, string)</h3><p>检测<code>string</code>是否匹配给定的<code>pattern</code>.</p><blockquote>match('^foo(bar)?', foo)<br>match('^foo(bar)?', foobar)<br><span>// =&gt; true<br><br></span>\nmatch('^foo(bar)?', 'foo')<br>match('^foo(bar)?', 'foobar')<br><span>// =&gt; true<br><br></span>\nmatch('^foo(bar)?', 'bar')<br><span>// =&gt; false</span></blockquote><h3>abs(unit)</h3><p>绝对值。</p><blockquote>abs(-5px)<br><span>// =&gt; 5px<br><br></span>\nabs(5px)<br><span>// =&gt; 5px</span></blockquote><h3>ceil(unit)</h3><p>向上取整。</p><blockquote>ceil(5.5in)<br><span>// =&gt; 6in</span></blockquote><h3>floor(unit)</h3><p>向下取整。</p><blockquote>floor(5.6px)<br><span>// =&gt; 5px</span></blockquote><h3>round(unit)</h3><p>四舍五入取整。</p><blockquote>round(5.5px)<br><span>// =&gt; 6px<br><br></span>\nround(5.4px)<br><span>// =&gt; 5px</span></blockquote><h3>min(a, b)</h3><p>取较小值。</p><blockquote>min(1, 5)<br><span>// =&gt; 1</span></blockquote><h3>max(a, b)</h3><p>取较大值。</p><blockquote>max(1, 5)<br><span>// =&gt; 5</span></blockquote><h3>even(unit)</h3><p>是否为偶数。</p><blockquote>even(6px)<br><span>// =&gt; true</span></blockquote><h3>odd(unit)</h3><p>是否为奇数。</p><blockquote>odd(5mm)<br><span>// =&gt; true</span></blockquote><h3>sum(nums)</h3><p>求和。</p><blockquote>sum(1 2 3)<br><span>// =&gt; 6</span></blockquote><h3>avg(nums)</h3><p>求平均数。</p><blockquote>avg(1 2 3)<br><span>// =&gt; 2</span></blockquote><h3>join(delim, vals…)</h3><p>给定<code>vals</code>使用<code>delim</code>连接。</p><blockquote>join(' ', 1 2 3)<br><span>// =&gt; \"1 2 3\"<br><br></span>\njoin(',', 1 2 3)<br><span>// =&gt; \"1,2,3\"<br><br></span>\njoin(', ', foo bar baz)<br><span>// =&gt; \"foo, bar, baz\"<br><br></span>\njoin(', ', foo, bar, baz)<br><span>// =&gt; \"foo, bar, baz\"<br><br></span>\njoin(', ', 1 2, 3 4, 5 6)<br><span>// =&gt; \"1 2, 3 4, 5 6\"</span></blockquote><h3>hsla(color | h,s,l,a)</h3><p>转换给定<code>color</code>为<code>HSLA</code>节点，或h,s,l,a比重值。</p><blockquote>hsla(10deg, 50%, 30%, 0.5)<br><span>// =&gt; HSLA<br><br></span>\nhsla(#ffcc00)<br><span>// =&gt; HSLA</span></blockquote><h3>rgba(color | r,g,b,a)</h3><p>从r,g,b,a通道返回<code>RGBA</code>, 或提供<code>color</code>来调整透明度。</p><blockquote>rgba(255,0,0,0.5)<br><span>// =&gt; rgba(255,0,0,0.5)<br><br></span>\nrgba(255,0,0,1)<br><span>// =&gt; #ff0000<br><br></span>\nrgba(#ffcc00, 0.5)<br><span>// rgba(255,204,0,0.5)</span></blockquote><p>另外，stylus支持<code>#rgba</code>以及<code>#rrggbbaa</code>符号。</p><blockquote>#fc08<br><span>// =&gt; rgba(255,204,0,0.5)<br><br></span>\n#ffcc00ee<br><span>// =&gt; rgba(255,204,0,0.9)</span></blockquote><h3>rgb(color | r,g,b)</h3><p>从r,g,b通道返回<code>RGBA</code>或生成一个<code>RGBA</code>节点。</p><blockquote>rgb(255,204,0)<br><span>// =&gt; #ffcc00<br><br></span>\nrgb(#fff)<br><span>// =&gt; #fff</span></blockquote><h3>lighten(color, amount)</h3><p>给定<code>color</code>增亮<code>amount</code>值。该方法单位敏感，例如，支持百分比，如下：</p><blockquote>lighten(#2c2c2c, 30)<br><span>// =&gt; #787878<br><br></span>\nlighten(#2c2c2c, 30%)<br><span>// =&gt; #393939</span></blockquote><h3>darken(color, amount)</h3><p>给定<code>color</code>变暗<code>amount</code>值。该方法单位敏感，例如，支持百分比，如下：</p><blockquote>darken(#D62828, 30)<br><span>// =&gt; #551010<br><br></span>\ndarken(#D62828, 30%)<br><span>// =&gt; #961c1c</span></blockquote><h3>desaturate(color, amount)</h3><p>给定<code>color</code>饱和度减小<code>amount</code>.</p><blockquote>desaturate(#f00, 40%)<br><span>// =&gt; #c33</span></blockquote><h3>saturate(color, amount)</h3><p>给定<code>color</code>饱和度增加<code>amount</code>.</p><blockquote>saturate(#c33, 40%)<br><span>// =&gt; #f00</span></blockquote><h3>invert(color)</h3><p>颜色反相。红绿蓝颜色反转，透明度不变。</p><blockquote>invert(#d62828)<br><span>// =&gt; #29d7d7</span></blockquote><h3>unquote(str | ident)</h3><p>给定<code>str</code>引号去除，返回<code>Literal</code>节点。</p><blockquote>unquote(\"sans-serif\")<br><span>// =&gt; sans-serif<br><br></span>\nunquote(sans-serif)<br><span>// =&gt; sans-serif<br><br></span>\nunquote('1px / 2px')<br><span>// =&gt; 1px / 2px</span></blockquote><h3>s(fmt, …)</h3><p><code>s()</code>方法类似于<code>unquote()</code>，不过后者返回的是<code>Literal</code>节点，而这里起接受一个格式化的字符串，非常像C语言的<code>sprintf()</code>. 目前，唯一标识符是<code>%s</code>.</p><blockquote>s('bar()');<br><span>// =&gt; bar()<br><br></span>\ns('bar(%s)', 'baz');<br><span>// =&gt; bar(\"baz\")<br><br></span>\ns('bar(%s)', baz);<br><span>// =&gt; bar(baz)<br><br></span>\ns('bar(%s)', 15px);<br><span>// =&gt; bar(15px)<br><br></span>\ns('rgba(%s, %s, %s, 0.5)', 255, 100, 50);<br><span>// =&gt; rgba(255, 100, 50, 0.5)<br><br></span>\ns('bar(%Z)', 15px);<br><span>// =&gt; bar(%Z)<br><br></span>\ns('bar(%s, %s)', 15px);<br><span>// =&gt; bar(15px, null)</span></blockquote><p>为表现一致检测这个<code>%</code>字符串操作符。</p><h3>operate(op, left, right)</h3><p>在<code>left</code>和<code>right</code>操作对象上执行给定的<code>op</code>.</p><blockquote>op = '+'<br>operate(op, 15, 5)<br><span>// =&gt; 20</span></blockquote><h3>length([expr])</h3><p>括号表达式扮演元组，<code>length()</code>方法返回该表达式的长度。</p><blockquote>length((1 2 3 4))<br><span>// =&gt; 4<br><br></span>\nlength((1 2))<br><span>// =&gt; 2<br><br></span>\nlength((1))<br><span>// =&gt; 1<br><br></span>\nlength(())<br><span>// =&gt; 0<br><br></span>\nlength(1 2 3)<br><span>// =&gt; 3<br><br></span>\nlength(1)<br><span>// =&gt; 1<br><br></span>\nlength()<br><span>// =&gt; 0</span></blockquote><h3>warn(msg)</h3><p>使用给定的<code>error</code>警告，并不退出。</p><blockquote>warn(\"oh noes!\")</blockquote><h3>error(msg)</h3><p>伴随着给定的错误<code>msg</code>退出。</p><pre><code>add(a, b)\n  unless a is a 'unit' and b is a 'unit'\n    error('add() expects units')\n  a + b</code></pre><h3>last(expr)</h3><p>返回给定<code>expr</code>的最后一个值。</p><blockquote>nums = 1 2 3<br>last(nums)<br>last(1 2 3)<br><span>// =&gt; 3<br><br></span>\nlist = (one 1) (two 2) (three 3)<br>last(list)<br><span>// =&gt; (three 3)</span></blockquote><h3>p(expr)</h3><p>检查给定的<code>expr</code>.</p><blockquote>fonts = Arial, sans-serif<br>p('test')<br>p(123)<br>p((1 2 3))<br>p(fonts)<br>p(#fff)<br>p(rgba(0,0,0,0.2))<br><br>\nadd(a, b)<br>  &nbsp;&nbsp;&nbsp;&nbsp;a + b<br><br>\np(add)</blockquote><p>标准输出：</p><blockquote>inspect: \"test\"<br>inspect: 123<br>inspect: 1 2 3<br>inspect: Arial, sans-serif<br>inspect: #fff<br>inspect: rgba(0,0,0,0.2)<br>inspect: add(a, b)</blockquote><h3>opposite-position(positions)</h3><p>返回给定<code>positions</code>相反内容。</p><blockquote>opposite-position(right)<br><span>// =&gt; left<br><br></span>\nopposite-position(top left)<br><span>// =&gt; bottom right<br><br></span>\nopposite-position('top' 'left')<br><span>// =&gt; bottom right</span></blockquote><h3>image-size(path)</h3><p>返回指定<code>path</code>图片的<code>width</code>和<code>height</code>. 向上查找路径的方法和<code>@import</code>一样，<code>paths</code>设置的时候改变。</p><blockquote>width(img)<br>  &nbsp;&nbsp;&nbsp;&nbsp;return image-size(img)[0]<br><br>\nheight(img)<br>  &nbsp;&nbsp;&nbsp;&nbsp;return image-size(img)[1]<br><br>\nimage-size('tux.png')<br><span>// =&gt; 405px 250px<br><br></span>\nimage-size('tux.png')[0] == width('tux.png')<br><span>// =&gt; true</span></blockquote><h3>add-property(name, expr)</h3><p>使用给定的<code>expr</code>为最近的块域添加属性<code>name</code>。</p><p>例如：</p><pre><code>something()\n  add-property('bar', 1 2 3)\n  s('bar')\n\nbody\n  foo: something()</code></pre><p>真实面目：</p><pre><code>body {\n  bar: 1 2 3;\n  foo: bar;\n}</code></pre><p>接下来，“神奇”的<code>current-property</code>局部变量将大放异彩，这个变量自动提供给函数体，且包含当前属性名和值的表达式。</p><p>例如，我们使用<code>p()</code>检查这个局部变量，我们可以得到：</p><blockquote>p(current-property)<br><span>// =&gt; \"foo\" (foo __CALL__ bar baz)<br><br></span>\np(current-property[0])<br><span>// =&gt; \"foo\"<br><br></span>\np(current-property[1])<br><span>// =&gt; foo __CALL__ bar baz</span></blockquote><p>使用<code>current-property</code>我们可以让例子走得更远点，使用新值复制该属性，且确保功能的条件仅在属性值中使用。</p><pre><code>something(n)\n  if current-property\n    add-property(current-property[0], s('-webkit-something(%s)', n))\n    add-property(current-property[0], s('-moz-something(%s)', n))\n    s('something(%s)', n)\n  else\n    error('something() must be used within a property')\n\nbody {\n  foo: something(15px) bar;\n}</code></pre><p>生成为：</p><pre><code>body {\n  foo: -webkit-something(15px);\n  foo: -moz-something(15px);\n  foo: something(15px) bar;\n}</code></pre><p>如果你注意上面这个例子，会发现<code>bar</code>只在一开始调用的时候出现，因为我们返回<code>something(15px)</code>, 其仍留在表达式里，然而，其他人并不重视其余的表达式。</p><p>更强大的解决方案如下，定义一个名为<code>replace()</code>的函数，其克隆表达式，以防止出现变化，用另外一个替换表达式的字符串值，并返回克隆的表达式。然后我们继续在表达式中替换<code>__CALL__</code>，表示循环调用<code>something()</code>.</p><pre><code>replace(expr, str, val)\n  expr = clone(expr)\n  for e, i in expr\n    if str == e\n      expr[i] = val\n  expr\n\nsomething(n)\n  if current-property\n    val = current-property[1]\n    webkit = replace(val, '__CALL__', s('-webkit-something(%s)', n))\n    moz = replace(val, '__CALL__', s('-moz-something(%s)', n))\n    add-property(current-property[0], webkit)\n    add-property(current-property[0], moz)\n    s('something(%s)', n)\n  else\n    error('something() 必须在属性中使用')</code></pre><p>生成：</p><pre><code>body {\n  foo: foo -webkit-something(5px) bar baz;\n  foo: foo -moz-something(5px) bar baz;\n  foo: foo something(5px) bar baz;\n}</code></pre><p>无论是内部调用的使用还是调用的位置上，我们实现的方法现在是完全透明的了。这个强大概念有助于在一些私有属性使用时调用，例如渐变。</p><h3>未定义方法</h3><p>未定义方法一字面量形式输出。例如，我们可以在CSS中调用<code>rgba-stop(50%, #fff)</code>, 其会按照你所期望的显示，我们也可以使用这些内部助手。</p><p>下面这个例子中我们简单定义了方法<code>stop()</code>, 其返回了字面上<code>rgba-stop()</code>调用。</p><p><!--StartFragment--><!--EndFragment--></p><blockquote>stop(pos, rgba)<br>  &nbsp;&nbsp;&nbsp;&nbsp;rgba-stop(pos, rgba)<br><br>\nstop(50%, orange)<br><span>// =&gt; rgba-stop(50%, #ffa500)</span></blockquote>"}}