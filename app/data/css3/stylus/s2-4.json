{"sta":1,"data":{"subTitle":"运算符(Operators)","content":"<h3>运算符优先级</h3><p>下表运算符优先级，从最高到最低：</p><pre><code>[]\n! ~ + -\nis defined\n** * / %\n+ -\n... ..\n&lt;= &gt;= &lt; &gt;\nin\n== is != is not isnt\nis a\n&amp;&amp; and || or\n?:\n= := ?= += -= *= /= %=\nnot\nif unless</code></pre><h3>一元运算符</h3><p>以下一元运算符可用，<code>!</code>,<span>&nbsp;</span><code>not</code>,<span>&nbsp;</span><code>-</code>,<span>&nbsp;</span><code>+</code>, 以及<code>~</code>.</p><blockquote>!0<br><span>// =&gt; true<br></span>\n!!0<br><span>// =&gt; false<br></span>\n!1<br><span>// =&gt; false<br></span>\n!!5px<br><span>// =&gt; true<br></span>\n-5px<br><span>// =&gt; -5px<br></span>\n--5px<br><span>// =&gt; 5px<br></span>\nnot true<br><span>// =&gt; false<br></span>\nnot not true<br><span>// =&gt; true</span></blockquote><p>逻辑运算符<code>not</code>的优先级较低，因此，下面这个例子可以替换：</p><blockquote>a = 0<br>b = 1<br>\n!a and !b<br><span>// =&gt; false<br></span><span>// 解析为: (!a) and (!b)</span></blockquote><p>用：</p><blockquote>not a or b<br><span>// =&gt; false<br></span><span>// 解析为: not (a or b</span>)</blockquote><h3>二元运算符</h3><p><strong>下标运算符</strong><code>[]</code>允许我们通过索引获取表达式内部值。括号表达式可以充当元组（如<code>(15px 5px)</code>,<span>&nbsp;</span><code>(1, 2, 3)</code>）。</p><p>下面这个例子使用错误处理的元组（并展示了该结构的多功能性）：</p><blockquote>add(a, b)<br>  &nbsp;&nbsp;&nbsp;&nbsp;if a is a 'unit' and b is a 'unit'<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a + b<br>  &nbsp;&nbsp;&nbsp;&nbsp;else<br>    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(error 'a 和 b 必须是 units!')<br><br>\nbody<br>  &nbsp;&nbsp;&nbsp;&nbsp;padding add(1,'5')<br>  &nbsp; &nbsp;&nbsp;<span>// =&gt; padding: error \"a 和 b 必须是 units\";<br><br></span>\n  &nbsp;&nbsp;&nbsp;&nbsp;padding add(1,'5')[0]<br>  &nbsp; &nbsp;&nbsp;<span>// =&gt; padding: error;<br><br></span>\n  &nbsp;&nbsp;&nbsp;&nbsp;padding add(1,'5')[0] == error<br>  &nbsp; &nbsp;&nbsp;<span>// =&gt; padding: true;<br><br></span>\n  &nbsp;&nbsp;&nbsp;&nbsp;padding add(1,'5')[1]<br>  &nbsp; &nbsp;&nbsp;<span>// =&gt; padding: \"a 和 b 必须是 units\";</span></blockquote><p>这儿有个更复杂的例子。现在，我们调用内置的<code>error()</code>函数，当标识符（第一个值）等于<code>error</code>的时候返回错误信息。</p><pre><code>if (val = add(1,'5'))[0] == error\n  error(val[1])</code></pre><h6>范围.. ...</h6><p>同时提供包含界线操作符(<code>..</code>)和范围操作符(<code>...</code>)，见下表达式：</p><blockquote>1..5<br><span>// =&gt; 1 2 3 4 5<br><br></span>\n1...5<br><span>// =&gt; 1 2 3 4</span></blockquote><h6>加减：+ -</h6><p>二元加乘运算其单位会转化，或使用默认字面量值。例如，<code>5s - 2px</code>结果是<code>3s</code>.</p><blockquote>15px - 5px<br><span>// =&gt; 10px<br><br></span>\n5 - 2<br><span>// =&gt; 3<br><br></span>\n5in - 50mm<br><span>// =&gt; 3.031in<br><br></span>\n5s - 1000ms<br><span>// =&gt; 4s<br><br></span>\n20mm + 4in<br><span>// =&gt; 121.6mm<br><br></span>\n\"foo \" + \"bar\"<br><span>// =&gt; \"foo bar\"<br><br></span>\n\"num \" + 15<br><span>// =&gt; \"num 15\"</span></blockquote><h6>乘除：/ * %</h6><blockquote>2000ms + (1s * 2)<br><span>// =&gt; 4000ms<br><br></span>\n5s / 2<br><span>// =&gt; 2.5s<br><br></span>\n4 % 2<br><span>// =&gt; 0</span></blockquote><p>当在属性值内使用<code>/</code>时候，你<span>必须</span>用括号包住。否则<code>/</code>会根据其字面意思处理（支持CSS的<code>line-height</code>）。</p><blockquote>font: 14px/1.5;</blockquote><p>但是，下面这个却等同于<code>14px</code><span>&nbsp;</span>÷<span>&nbsp;</span><code>1.5</code>:</p><pre>font: (14px/1.5);</pre><p>只有<code>/</code>操作符的时候需要这样。</p><h6>指数：**</h6><p>指数操作符：</p><blockquote>2 ** 8<br><span>// =&gt; 256</span></blockquote><h6>相等与关系运算：== != &gt;= &lt;= &gt; &lt;</h6><p>相等运算符可以被用来等同单位、颜色、字符串甚至标识符。这是个强大的概念，甚至任意的标识符（例如<code>wahoo</code>）可以作为原子般使用。函数可以返回<code>yes</code>和<code>no</code>代替<code>true</code>和<code>false</code>（虽然不建议）。</p><blockquote>5 == 5<br><span>// =&gt; true<br><br></span>\n10 &gt; 5<br><span>// =&gt; true<br><br></span>\n#fff == #fff<br><span>// =&gt; true<br><br></span>\ntrue == false<br><span>// =&gt; false<br><br></span>\nwahoo == yay<br><span>// =&gt; false<br><br></span>\nwahoo == wahoo<br><span>// =&gt; true<br><br></span>\n\"test\" == \"test\"<br><span>// =&gt; true<br><br></span>\ntrue is true<br><span>// =&gt; true<br><br></span>\n'hey' is not 'bye'<br><span>// =&gt; true<br><br></span>\n'hey' isnt 'bye'<br><span>// =&gt; true<br><br></span>\n(foo bar) == (foo bar)<br><span>// =&gt; true<br><br></span>\n(1 2 3) == (1 2 3)<br><span>// =&gt; true<br><br></span>\n(1 2 3) == (1 1 3)<br><span>// =&gt; false</span></blockquote><p>只有精确值才匹配，例如，<code>0 == false</code>和<code>null == false</code>均返回<code>false</code>.</p><p>别名：</p><blockquote>== &nbsp; &nbsp; &nbsp;is<br>!= &nbsp; &nbsp; &nbsp; is not<br>!= &nbsp; &nbsp; &nbsp; isnt</blockquote><h6>真与假</h6><p>Stylus近乎一切都是<code>true</code>, 包括有后缀的单位，甚至<code>0%</code>,<span>&nbsp;</span><code>0px</code>等都被认作<code>true</code>.</p><p>不过，<code>0</code>在算术上本身是<code>false</code>.</p><p>表达式（或“列表”）长度大于1被认为是真。</p><p><code>true</code>例子：</p><blockquote>0%<br> 0px<br>1px<br> -1<br>-1px<br>hey<br>'hey'<br>(0 0 0)<br>('' '')</blockquote><p><code>false</code>例子：</p><blockquote>0<br> null<br>false<br>''</blockquote><h6>逻辑操作符：&amp;&amp; || 和 or</h6><p>逻辑操作符<code>&amp;&amp;</code>和<code>||</code>别名是<code>and</code><span>&nbsp;</span>/<span>&nbsp;</span><code>or</code>。它们优先级相同。</p><blockquote>5 &amp;&amp; 3<br><span>// =&gt; 3<br><br></span>\n0 || 5<br><span>// =&gt; 5<br><br></span>\n0 &amp;&amp; 5<br><span>// =&gt; 0<br><br></span>\n#fff is a 'rgba' and 15 is a 'unit'<br><span>// =&gt; true</span></blockquote><h6>存在操作符：in</h6><p>检查左边内容是否在右边的表达式中。</p><p>简单的例子：</p><blockquote>nums = 1 2 3<br>1 in nums<br><span>// =&gt; true<br><br></span>\n5 in nums<br><span>// =&gt; false</span></blockquote><p>一些未定义标识符：</p><blockquote>words = foo bar baz<br>bar in words<br><span>// =&gt; true<br><br></span>\nHEY in words<br><span>// =&gt; false</span></blockquote><p>元组同样适用：</p><blockquote>vals = (error 'one') (error 'two')<br>error in vals<br><span>// =&gt; false<br><br></span>\n(error 'one') in vals<br><span>// =&gt; true<br><br></span>\n(error 'two') in vals<br><span>// =&gt; true<br><br></span>\n(error 'something') in vals<br><span>// =&gt; false</span></blockquote><p>混合书写适用例子：</p><pre><code>pad(types = padding, n = 5px)\n  if padding in types\n    padding n\n  if margin in types\n    margin n\n\nbody\n  pad()\n\nbody\n  pad(margin)\n\nbody\n  pad(padding margin, 10px)</code></pre><p>对应于：</p><pre><code>body {\n  padding: 5px;\n}\nbody {\n  margin: 5px;\n}\nbody {\n  padding: 10px;\n  margin: 10px;\n}</code></pre><h6>条件赋值：?= :=</h6><p>条件赋值操作符<code>?=</code>（别名<code>?:</code>）让我们无需破坏旧值（如果存在）定义变量。该操作符可以扩展成三元内<code>is defined</code>的二元操作。</p><p>例如，下面这些都是平起平坐的：</p><pre><code>color := white\ncolor ?= white\ncolor = color is defined ? color : white</code></pre><p>如果我们使用等号<code>=</code>, 就只是简单地赋值。</p><blockquote>color = white<br>color = black<br><br>\ncolor<br><span>// =&gt; black</span></blockquote><p>但当使用<code>?=</code>，第二个相当就嗝屁了（因为变量已经定义了）：</p><blockquote>color = white<br>color ?= black<br><br>\ncolor<br><span>// =&gt; white</span></blockquote><h6>实例检查：is a</h6><p>Stylus提供一个二元运算符叫做<code>is a</code>, 用做类型检查。</p><blockquote>15 is a 'unit'<br><span>// =&gt; true<br><br></span>\n#fff is a 'rgba'<br><span>// =&gt; true<br><br></span>\n15 is a 'rgba'<br><span>// =&gt; false</span></blockquote><p>另外，我们可以使用<code>type()</code>这个内置函数。</p><blockquote>type(#fff) == 'rgba'<br><span>// =&gt; true</span></blockquote><p><font color=\"#c24f4a\">注意</font>：<code>color</code>是唯一的特殊情况，当左边是<code>RGBA</code>或者<code>HSLA</code>节点时，都为<code>true</code>.</p><h6>变量定义：is defined</h6><p>此伪二元运算符右边空荡荡，左边无计算。用来检查变量是否已经分配了值。</p><blockquote>foo is defined<br><span>// =&gt; false<br><br></span>\nfoo = 15px<br>foo is defined<br><span>// =&gt; true<br><br></span>\n#fff is defined<br><span>// =&gt; 'invalid \"is defined\" check on non-variable #fff'</span></blockquote><p>另外，我们可以使用内置<code>lookup(name)</code>方法做这个活动态查找。</p><blockquote>name = 'blue'<br>lookup('light-' + name)<br><span>// =&gt; null<br><br></span>\nlight-blue = #80e2e9<br>lookup('light-' + name)<br><span>// =&gt; #80e2e9</span></blockquote><p>该操作符必不可少，因为一个未定义的标识符仍是真值。如：</p><pre><code>body\n  if ohnoes\n    padding 5px</code></pre><p>当未定义的时候，产生的是下面的CSS：</p><pre><code>body {\n  padding: 5px;\n}</code></pre><p>显然，这不是我们想要的，如下书写就安全了：</p><pre><code>body\n  if ohnoes is defined\n    padding 5px</code></pre><h3>三元</h3><p>三元运算符的运作正如大部分语言里面的那样。三个操作对象的操作符（条件表达式、真表达式以及假表达式）。</p><blockquote>num = 15<br>num ? unit(num, 'px') : 20px<br><span>// =&gt; 15px</span></blockquote><h6>铸造</h6><p>作为替代简洁的内置<code>unit()</code>函数，语法<code>(expr) unit</code>可用来强制后缀。</p><pre><code>body\n  n = 5\n  foo: (n)em\n  foo: (n)%\n  foo: (n + 5)%\n  foo: (n * 5)px\n  foo: unit(n + 5, '%')\n  foo: unit(5 + 180 / 2, deg)</code></pre><h6>颜色操作</h6><p>颜色操作提供了一个简洁，富有表现力的方式来改变其组成。例如，我们可以对每个RGB：</p><blockquote>#0e0 + #0e0<br><span>// =&gt; #0f0</span></blockquote><p>另外一个例子是通过增加或减少百分值调整颜色亮度。颜色亮，加；暗，则减。</p><blockquote>#888 + 50%<br><span>// =&gt; #c3c3c3<br><br></span>\n#888 - 50%<br><span>// =&gt; #444</span></blockquote><p>我们也可以通过增加或减去色度调整色调。例如，红色增加<code>65deg</code>就变成了黄色。</p><blockquote>#f00 + 50deg<br><span>// =&gt; #ffd500</span></blockquote><p>值适当固定。例如，我们可以\"旋转\"180度的色调，如果目前的值是<code>320deg</code>, 将变成<code>140deg</code>.</p><p>我们也可能一次调整几个值（包括alpha），通过使用<code>rgb()</code>,<span>&nbsp;</span><code>rgba()</code>,<span>&nbsp;</span><code>hsl()</code>, 或<span>&nbsp;</span><code>hsla()</code>:</p><blockquote>#f00 - rgba(100,0,0,0.5)<br><span>// =&gt; rgba(155,0,0,0.5)</span></blockquote><h6>格式化字符串</h6><p>格式化字符串模样的字符串<code>%</code>可以用来生成字面量值，通过传参给内置<code>s()</code>方法。</p><blockquote>'X::Microsoft::Crap(%s)' % #fc0<br><span>// =&gt; X::Microsoft::Crap(#fc0)</span></blockquote><p>多个值需要括起来：</p><p><!--StartFragment--><!--EndFragment--></p><blockquote>'-webkit-gradient(%s, %s, %s)' % (linear (0 0) (0 100%))<br><span>// =&gt; -webkit-gradient(linear, 0 0, 0 100%)</span></blockquote>"}}