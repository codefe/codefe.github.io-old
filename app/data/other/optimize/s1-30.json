{"sta":1,"data":{"subTitle":"高性能JS-DOM","content":"<blockquote data-source-line=\"1\"><p>用脚本进行DOM操作的代价是很昂贵的，它是富web应用中最常见的性能瓶颈。主要有以下三种问题：</p><ol><li><p>访问和修改DOM元素</p></li><li><p>修改DOM元素的样式导致repaint和reflow</p></li><li><p>通过DOM事件处理与用户进行交互</p></li></ol></blockquote><h3 data-source-line=\"6\">浏览器中的DOM</h3><p data-source-line=\"7\">DOM是（Document Object Model）一个与语言无关的、用来操作XML和HTML文档的应用程序接口（Application Program Interface）。&nbsp;尽管DOM与语言无关，但是在浏览器中的接口却是用JavaScript来实现的。</p><h3 data-source-line=\"9\">一个前端小知识</h3><p data-source-line=\"10\">浏览器通常会把js和DOM分开来分别独立实现。<br>举个栗子冷知识，在IE中，js的实现名为JScript，位于jscript.dll文件中；DOM的实现则存在另一个库中，名为mshtml.dll（Trident）。<br>Chrome中的DOM实现为webkit中的webCore，但js引擎是Google自己研发的V8。<br>Firefox中的js引擎是SpiderMonkey，渲染引擎（DOM）则是Gecko。</p><h3 data-source-line=\"14\">DOM，天生就慢</h3><p data-source-line=\"15\">前面的小知识中说过，浏览器把实现页面渲染的部分和解析js的部分分开来实现，既然是分开的，一旦两者需要产生连接，就要付出代价。<br>两个例子：</p><ol data-source-line=\"17\"><li><p>小明和小红是两个不同学校的学生，两个人家里经济条件都不太好，买不起手机（好尴尬的设定Orz...），所以只能通过写信来互相交流，这样的过程肯定比他俩面对面交谈时所需要花费的代价大（额外的事件、写信的成本等）。</p></li><li><p>官方例子：把DOM和js（ECMAScript）各自想象为一座岛屿，它们之间用收费桥进行连接。ECMAScript每次访问DOM，都要途径这座桥，并交纳“过桥费”。访问DOM的次数越多，费用也就越高。</p></li></ol><p data-source-line=\"20\">因此，推荐的做法是：尽可能的减少过桥的次数，努力待在ECMAScript岛上。</p><h3 data-source-line=\"21\">DOM的访问与修改</h3><p data-source-line=\"22\">前面说到访问DOM需要交纳“过桥费”，而修改DOM元素则代价更为昂贵，因为它会导致浏览器重新计算页面的几何变化。 来看一段代码：</p><pre data-source-line=\"24\"><code><span><span>function <span>innerHTMLLoop(<span>){ &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; <span>15000; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;<span>document.getElementById(<span>'text').innerHTML += <span>'dom'; &nbsp;\n &nbsp; &nbsp;} &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"31\">这段代码，每次循环会访问两次特定的元素：第一次读取这个元素的innerHTML属性，第二次重写它。<br>看清楚了这一点，不难得到一个效率更高的版本：</p><pre data-source-line=\"33\"><code><span><span>function <span>innerHTMLLoop2(<span>){ &nbsp;\n &nbsp; &nbsp;<span>var content = <span>''; &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; <span>15000; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;content += <span>'dom'; &nbsp;\n &nbsp; &nbsp;} &nbsp;\n &nbsp; &nbsp;<span>document.getElementById(<span>'text').innerHTML += content; &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"42\">用一个局部变量包层每次更新后的内容，等待循环结束后，一次性的写入页面（尽可能的把更多的工作交给js的部分来做）。<br>根据统计，在所有的浏览器中，修改后的版本都运行的更快（优化幅度最明显的是IE8，使用后者比使用前者快273倍）。</p><h3 data-source-line=\"44\">HTML元素集合</h3><p data-source-line=\"45\">HTML元素集合是包含了DOM节点引用的类数组对象。<br>可以用以下方法或属性得到一个HTML元素集合：</p><ul data-source-line=\"47\"><li><p>document.getElementsByName()</p></li><li><p>document.getElementsByTagName()</p></li><li><p>document.getElementsByClassName()</p></li><li><p>document.images&nbsp;<em>页面中所有img元素</em></p></li><li><p>document.links&nbsp;<em>页面中所有a元素</em></p></li><li><p>document.forms&nbsp;<em>页面中所有表单元素</em></p></li><li><p>document.forms[0].elements&nbsp;<em>页面中第一个表单的所有字段</em></p></li></ul><p data-source-line=\"55\">HTML元素集合处于一种“实时的状态”，这意味着当底层文档对象更新时，它也会自动更新，也就是说，HTML元素集合与底层的文档对象之间保持的连接。正因如此，每当你想从HTML元素集合中获取一些信息时，都会产生一次查询操作，这正是低效之源。</p><h4 data-source-line=\"56\">昂贵的集合</h4><pre data-source-line=\"57\"><code><span>//这是一个死循环 &nbsp;<span>//不管你信不信，反正我是信了 &nbsp;<span>var alldivs = <span>document.getElementsByTagName(<span>'div'); &nbsp;<span>for (<span>var i = <span>0; i &lt; alldivs.length; i++){ &nbsp;\n &nbsp; &nbsp;<span>document.body.appendChild(<span>document.createElement(<span>'div')); &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"65\">乍一看，这段代码只是单纯的把页面中的div数量翻倍：遍历所有的div，每次创建一个新的div并创建到添加到body中。<br>但事实上，这是一个死循环：因为循环的退出条件alldivs.length在每一次循环结束后都会增加，因为这个HTML元素集合反映的是底层文档元素的实时状态。<br>接下来，我们通过这段代码，对一个HTML元素集合做一些处理：</p><pre data-source-line=\"68\"><code><span><span>function <span>toArray(<span>coll){ &nbsp;\n &nbsp; &nbsp;<span>for (<span>var i = <span>0, a = [], len = coll.lengthl i &lt; len; i++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;a[i] = coll[i]; &nbsp;\n &nbsp; &nbsp;} &nbsp;\n &nbsp; &nbsp;<span>return a; &nbsp;\n} &nbsp;\n &nbsp;<span>//将一个HTML元素集合拷贝到一个数组中 &nbsp;<span>var coll = <span>document.getElementsByTagName(<span>'div'); &nbsp;<span>var arr = toArray(coll);</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"80\">现在比较以下两个函数：</p><pre data-source-line=\"81\"><code><span><span>function <span>loopCollection(<span>){ &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; coll.length; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;<span>//processing... &nbsp;\n &nbsp; &nbsp;} &nbsp;\n} &nbsp;\n &nbsp;<span><span>function <span>loopCopiedArray(<span>){ &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; arr.length; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;<span>//processing... &nbsp;\n &nbsp; &nbsp;} &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"94\">在IE6中，后者比前者快114倍；IE7中119倍；IE8中79倍...<br>所以，在相同的内容和数量下，遍历一个数组的速度明显快于遍历一个HTML元素集合。<br>由于在每一次迭代循环中，读取元素集合的length属性会引发集合进行更新，这在所有的浏览器中都有明显的性能问题，所以你也可以这么干：</p><pre data-source-line=\"97\"><code><span><span>function <span>loopCacheLengthCollection(<span>){ &nbsp;\n &nbsp; &nbsp;<span>var coll = <span>document.getElementsByTagName(<span>'div'), &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;len = coll.length; &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; len; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;<span>//processing... &nbsp;\n &nbsp; &nbsp;} &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"106\">这个函数和上面的loopCopiedArray()一样快。</p><h4 data-source-line=\"107\">访问集合元素时使用局部变量</h4><p data-source-line=\"108\">一般来说，对于任何类型的DOM访问，当同一个DOM属性或者方法需要被多次访问时，最好使用一个局部变量缓存此成员。当遍历一个集合时，首要优化原则是把集合存储在局部变量中，并把length缓存在循环外部，然后使用局部变量访问这些需要多次访问的元素。<br>一个栗子，在循环之中访问每个元素的三个属性。</p><pre data-source-line=\"110\"><code><span><span>function <span>collectionGlobal(<span>){ &nbsp;\n &nbsp; &nbsp;<span>var coll = <span>document.getElementsByTagName(<span>'div'), &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;len = coll.length, &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = <span>''; &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; len; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = <span>document.getElementsByTagName(<span>'div')[count].nodeName; &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = <span>document.getElementsByTagName(<span>'div')[count].nodeType; &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = <span>document.getElementsByTagName(<span>'div')[count].tagName; &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;<span>//我的天不会有人真的这么写吧... &nbsp;\n &nbsp; &nbsp;} &nbsp;\n &nbsp; &nbsp;<span>return name; &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"124\">上面这段代码，大家不要当真...正常人肯定是写不出来的...这里是为了对比一下，所以把这种最慢的情况写给大家看。<br>接下来，是一个稍微优化了的版本：</p><pre data-source-line=\"126\"><code><span><span>function <span>collectionLocal(<span>){ &nbsp;\n &nbsp; &nbsp;<span>var coll = <span>document.getElementsByTagName(<span>'div'), &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;len = coll.length, &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = <span>''; &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; length; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = coll[count].nodeName; &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = coll[count].nodeType; &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = coll[count].tagName; &nbsp;\n &nbsp; &nbsp;} &nbsp;\n &nbsp; &nbsp;<span>return name; &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"139\">这次就看起来正常很多了，最后是这次优化之旅的最终版本：</p><pre data-source-line=\"140\"><code><span><span>function <span>collectionNodesLocal(<span>){ &nbsp;\n &nbsp; &nbsp;<span>var coll = <span>document.getElementsByTagName(<span>'div'), &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;len = coll.length, &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = <span>'', &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;ele = <span>null; &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; len; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;ele = coll[count]; &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = ele.nodeName; &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = ele.nodeType; &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = ele.tagName; &nbsp;\n &nbsp; &nbsp;} &nbsp;\n &nbsp; &nbsp;<span>return name; &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><h3 data-source-line=\"155\">遍历DOM</h3><h4 data-source-line=\"156\">在DOM中爬行</h4><p data-source-line=\"157\">通常你需要从某一个DOM元素开始，操作周围的元素，或者递归查找所有的子节点。<br>考虑下面两个等价的栗子：</p><pre data-source-line=\"159\"><code><span>//1 &nbsp;<span><span>function <span>testNextSibling(<span>){ &nbsp;\n &nbsp; &nbsp;<span>var el = <span>document.getElementById(<span>'mydiv'), &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;ch = el.firstChild, &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = <span>''; &nbsp;\n &nbsp; &nbsp;<span>do { &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = ch.nodeName; &nbsp;\n &nbsp; &nbsp;} <span>while (ch = ch.nextSibling); &nbsp;\n &nbsp; &nbsp;<span>return name; &nbsp;\n} &nbsp;\n &nbsp;<span>//2 &nbsp;<span><span>function <span>testChildNodes(<span>){ &nbsp;\n &nbsp; &nbsp;<span>var el = <span>document.getElementById(<span>'mydiv'), &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;ch = el.childNodes, &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;len = ch.length, &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;<span>//childNodes是一个元素集合，因此在循环中主席缓存length属性以避免迭代更新 &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = <span>''; &nbsp;\n &nbsp; &nbsp;<span>for (<span>var count = <span>0; count &lt; len; count++){ &nbsp;\n &nbsp; &nbsp; &nbsp; &nbsp;name = ch[count].nodeName; &nbsp;\n &nbsp; &nbsp;} &nbsp;\n &nbsp; &nbsp;<span>return name; &nbsp;\n}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre><p data-source-line=\"184\">在不同浏览器中，两种方法的运行时间几乎相等。但在老版本的IE浏览器中，nextSibling的性能比childNodes更好一些。</p><h4 data-source-line=\"185\">元素节点</h4><p data-source-line=\"186\">我们知道，DOM节点有以下五种分类：</p><ul data-source-line=\"187\"><li><p>整个文档是一个文档节点</p></li><li><p>每个HTML元素是元素节点</p></li><li><p>HTML元素内的文本是文本节点</p></li><li><p>每个HTML属性是属性节点</p></li><li><p>注释是注释节点</p></li></ul><p data-source-line=\"193\">诸如childNodes、firstChild、nextSibling这些DOM属性是不区分元素节点和其他类型的节点的，但往往我们只需要访问元素节点，此时需要做一些过滤的工作。事实上，这些类型检查的过程都是不必要的DOM操作。<br>许多现代浏览器提供的API只返回元素节点，如果可用的话推荐直接只用这些API，因为它们的执行效率比自己在js中过滤的效率要高。</p><ol start=\"0\" data-source-line=\"195\"><li><p>现代浏览器提供的API（被替换的API）</p></li><li><p>children(childNodes)</p></li><li><p>childElementCount (childNodes.length)</p></li><li><p>firstElementChild (firstChild)</p></li><li><p>lastElementChild (lastChild)</p></li><li><p>nextElementSibling (nextSibling)</p></li><li><p>previousElementSibling (previousSibling)</p></li></ol><p data-source-line=\"203\">使用这些新的API，可以直接获取到元素节点，也正是因此，其速度也更快。</p><h4 data-source-line=\"204\">选择器API</h4><p data-source-line=\"205\">有时候为了得到需要的元素列表，开发人员不得不组合调用getElementById、getElementsByTagName，并遍历返回的节点，但这种繁密的过程效率低下。<br>最新的浏览器提供了一个传递参数为CSS选择器的名为querySelectorAll()的原生DOM方法。这种方式自然比使用js和DOM来遍历查找元素要快的多。<br>比如，</p><pre data-source-line=\"208\"><code><span>var elements = <span>document.querySelectorAll(<span>'#menu a');</span></span></span></code></pre><p data-source-line=\"211\">这一段代码，返回的是一个NodeList————包含着匹配节点的类数组对象。与之前不同的是，这个方法不会返回HTML元素集合，因此返回的节点不会对应实时的文档结构，也避免了之前由于HTML集合引起的性能（潜在逻辑）问题。<br>如果不使用querySelectorAll()，我们需要这样写：</p><pre data-source-line=\"213\"><code><span>var elements = <span>document.getElementById(<span>'menu').getElementsByTagName(<span>'a');</span></span></span></span></code></pre><p data-source-line=\"216\">不仅写起来更麻烦了，更要注意的是，此时的elements是一个HTML元素集合，所以还需要把它copy到数组中，才能得到一个与前者相似的静态列表。<br>还有一个querySelector()方法，用来获取第一个匹配的节点。</p><h3 data-source-line=\"218\">重绘与重排（Repaints &amp; Reflows）</h3><p data-source-line=\"219\">浏览器用来显示页面的所有“组件”，有：HTML标签、js、css、图片——之后会解析并生成两个内部的数据结构：</p><ul data-source-line=\"220\"><li><p>DOM树（表示页面结构）</p></li><li><p>渲染树（表示DOM节点应该如何表示）</p></li></ul><p data-source-line=\"223\">DOM树中的每一个需要显示的节点在渲染树中至少存在一个对应的节点。<br>渲染树中的节点被称为“帧（frames）”或“盒（boxes）”，符合css盒模型的定义，理解页面元素为一个具有padding、margin、borders和position的盒子。<br>一旦渲染树构建完成，浏览器就开始显示页面元素，这个过程称为绘制（paint）。</p><p data-source-line=\"227\">当DOM的变化影响了元素的几何属性（宽、高）——比如改变改变了边框的宽度或者给一个段落增加一些文字导致其行数的增加——浏览器就需要重新计算元素的几何属性，同样，页面中其他元素的几何属性和位置也会因此受到影响。<br>浏览器会使渲染树中收到影响的部分消失，重新构建渲染树，这个过程称为“重排(reflow)”。重排完成之后，浏览器会重新将受到影响的部分绘制到浏览器中，这个过程称之为“重绘(repaint)”。</p><p data-source-line=\"230\">如果改变的不是元素的几何属性，如：改变元素的背景颜色，不会发生重排，只会发生一次重绘，因为元素的布局并没有改变。<br>不管是重绘还是重排，都是代价昂贵的操作，它们会导致web应用程序的UI反应迟钝，应当尽可能的减少这类过程的发生。</p><h3 data-source-line=\"232\">重排何时发生？</h3><ul data-source-line=\"233\"><li><p>添加或删除可见的DOM元素</p></li><li><p>元素位置的改变</p></li><li><p>元素尺寸的改变（padding、margin、border、height、width）</p></li><li><p>内容改变（文本改变或图片尺寸改变）</p></li><li><p>页面渲染器初始化</p></li><li><p>浏览器窗口尺寸改变</p></li><li><p>滚动条的出现（会触发整个页面的重排）</p></li></ul><h3 data-source-line=\"241\">最小化重绘和重排</h3><h4 data-source-line=\"242\">改变样式</h4><p data-source-line=\"243\">一个栗子：</p><pre data-source-line=\"244\"><code><span>var el = <span>document.getElementById(<span>'mydiv'); &nbsp;\nel.style.borderLeft = <span>'1px'; &nbsp;\nel.style.borderRight = <span>'2px'; &nbsp;\nel.style.padding = <span>'5px';</span></span></span></span></span></span></code></pre><p data-source-line=\"250\">示例中，元素的三个样式被改变，而且每一个都会影响元素的几何结构。在最糟糕的情况下，这段代码会触发三次重排（大部分现代浏览器为此做了优化，只会触发一次重排）。从另一个角度看，这段代码四次访问DOM，可以被优化。</p><pre data-source-line=\"251\"><code><span>var el = <span>document.getElementById(<span>'mydiv'); &nbsp;<span>//思路：合并所有改变然后一次性处理 &nbsp;<span>//method_1:使用cssText属性 &nbsp;el.style.cssText = <span>'border-left: 1px; border-right: 2px; padding: 5px'; &nbsp;\n &nbsp;<span>//method_2:修改类名 &nbsp;el.className = <span>'anotherClass';</span></span></span></span></span></span></span></span></code></pre><h4 data-source-line=\"260\">批量修改DOM</h4><p data-source-line=\"261\">当你需要对DOM元素进行一系列操作的时候，不妨按照如下步骤：</p><ol data-source-line=\"262\"><li><p>使元素脱离文档流</p></li><li><p>对其应用多重改变</p></li><li><p>把元素带回文档中</p></li></ol><p data-source-line=\"266\">上面的这一套组合拳中，第一步和第三部分别会触发一次重排。但是如果你忽略了这两个步骤，那么在第二步所产生的任何修改都会触发一次重排。</p><p data-source-line=\"268\">在此安利三种可以使DOM元素脱离文档流的方法：</p><ul data-source-line=\"269\"><li><p>隐藏元素</p></li><li><p>使用文档片段（document fragment）在当前DOM之外构建一个子树，再把它拷贝回文档</p></li><li><p>将原始元素拷贝到一个脱离文档的节点中，修改副本，完成后再替换原始元素</p></li></ul><h4 data-source-line=\"273\">让动画元素脱离文档流</h4><p data-source-line=\"274\">一般情况下，重排只影响渲染树中的一小部分，但也可能影响很大的一部分，甚至是整个渲染树。<br>浏览器所需的重排次数越少，应用程序的响应速度也就越快。<br>想象这样一种情况，页面的底部有一个动画，会推移页面整个余下的部分，这将是一次代价昂贵的大规模重排！用户也势必会感觉到页面一卡一卡的。<br>因此，使用以下步骤可以避免页面中的大部分重排：</p><ol data-source-line=\"278\"><li><p>使用绝对定位让页面上的动画元素脱离文档流</p></li><li><p>动画展示阶段</p></li><li><p>动画结束时，将元素恢复定位。</p></li></ol><h4 data-source-line=\"282\">IE的:hover</h4><p data-source-line=\"283\">从IE7开始，IE允许在任何元素上使用:hover这个css选择器。<br>然而，如果你有大量元素使用了:hover，你会发现，贼喇慢！</p><h3 data-source-line=\"285\">事件委托（Event Delegation）</h3><p data-source-line=\"286\">这一个优化手段也是在前端求职面试中的高频题目。<br>当页面中有大量的元素，并且这些元素都需要绑定事件处理器。<br>每绑定一个事件处理器都是有代价的，要么加重了页面负担，要么增加了运行期的执行时间。再者，事件绑定会占用处理时间，而且浏览器需要跟踪每个事件处理器，这也会占用更多的内存。还有一种情况就是，当这些工作结束时，这些事件处理器中的绝大多数都是不再需要的（并不是100%的按钮或链接都会被用户点击），因此有很多工作是没有必要的。<br>事件委托的原理很简单——事件逐层冒泡并能被父级元素捕获。<br>使用事件委托，只需要给外层元素绑定一个处理器，就可以处理在其子元素上触发的所有事件。<br>有以下几点需要注意：</p><ul data-source-line=\"292\"><li><p>访问事件对象，判断事件源</p></li><li><p>按需取消文档树中的冒泡</p></li><li><p>按需阻止默认动作</p></li></ul><h3 data-source-line=\"296\">小结</h3><p data-source-line=\"297\">访问和操作DOM需要穿越连接ECMAScript和DOM两个岛屿之间的桥梁，为了尽可能的减少“过桥费”，有以下几点需要注意：</p><ul data-source-line=\"298\"><ul data-source-line=\"298\"><li><p>最小化DOM访问次数</p></li><li><p>对于需要多次访问的DOM节点，使用局部变量存储其引用</p></li><li><p>如果要操作一个HTML元素集合，建议把它拷贝到一个数组中</p></li><li><p>使用速度更快的API：比如querySelectorAll</p></li><li><p>留意重排和重绘的次数</p></li><li><p>事件委托</p></li></ul></ul>"}}