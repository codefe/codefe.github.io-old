{"sta":1,"data":{"subTitle":"js载入优化","content":"<ul><li><p>加快JavaScript装入速度的工具：</p><ul><li>Lab.js<ul><li>借助LAB.js（装入和阻止JavaScript），你就可以并行装入JavaScript文件，加快总的装入过程。此外，你还可以为需要装入的脚本设置某个顺序，那样就能确保依赖关系的完整性。此外，开发者声称其网站上的速度提升了2倍。</li></ul></li></ul></li><li><p>使用适当的CDN：</p><ul><li>现在许多网页使用内容分发网络（CDN）。它可以改进你的缓存机制，因为每个人都可以使用它。它还能为你节省一些带宽。你很容易使用ping检测或使用Firebug调试那些服务器，以便搞清可以从哪些方面加快数据的速度。选择CDN时，要照顾到你网站那些访客的位置。记得尽可能使用公共存储库。</li></ul></li><li><p>网页末尾装入JavaScript：</p><ul><li>也可以在头部分放置需要装入的一些JavaScript，但是前提是它以异步方式装入。</li></ul></li><li><p>异步装入跟踪代码：</p><blockquote><p>脚本加载与解析会阻塞HTML渲染，可以通过异步加载方式来避免渲染阻塞，步加载的方式很多，比较通用的方法如下。</p></blockquote><pre><code><span>var</span> _gaq = _gaq || []; \n    _gaq.push([<span>'_setAccount'</span>, <span>'UA-XXXXXXX-XX'</span>]); \n    _gaq.push([<span>'_trackPageview'</span>]); \n(<span><span>function</span>(<span></span>) </span>{ \n    <span>var</span> ga = <span>document</span>.createElement(<span>'script'</span>); ga.type = <span>'text/JavaScript'</span>; ga.async = <span>true</span>; \n    ga.src = (<span>'https:'</span> == <span>document</span>.location.protocol ? <span>'https://ssl'</span> : <span>'http://www'</span>) + <span>'.google-analytics.com/ga.js'</span>; \n    <span>var</span> s = <span>document</span>.getElementsByTagName(<span>'script'</span>)[<span>0</span>]; s.parentNode.insertBefore(ga, s); \n})();\n</code></pre><p>或者</p><pre><code><span><span>function</span> <span>loadjs</span> (<span>script_filename</span>)</span>{\n     <span>var</span> script = <span>document</span>.createElement( <span>'script'</span> );\n     script.setAttribute( <span>'type'</span> , <span>'text/javascript'</span> );\n     script.setAttribute( <span>'src'</span> , script_filename);\n     script.setAttribute( <span>'id'</span> , <span>'script-id'</span> );\n\n     scriptElement = <span>document</span>.getElementById( <span>'script-id'</span> );\n     <span>if</span> (scriptElement){\n         <span>document</span>.getElementsByTagName( <span>'head'</span> )[<span>0</span>].removeChild(scriptElement);\n     }\n     <span>document</span>.getElementsByTagName( <span>'head'</span> )[<span>0</span>].appendChild(script);\n}\n<span>var</span> script = <span>'scripts/alert.js'</span> ;\nloadjs(script);\n</code></pre></li><li><p>把你的JavaScript打包成PNG文件</p><ul><li>将JavaScript/css数据打包成PNG文件。之后进行拆包，只要使用画布API的getImageData()。可以在不缩小数据的情况下，多压缩35%左右。而且是无损压缩，对比较庞大的脚本来说，在图片指向画布、读取像素的过程中，你会觉得有“一段”装入时间。</li></ul></li><li><p>设置Cache-Control和Expires头</p><p>通过Cache-Control和Expires头可以将脚本文件缓存在客户端或者代理服务器上，可以减少脚本下载的时间。</p><blockquote><p>Expires格式:</p><pre><code>Expires = <span>\"Expires\"</span> <span>\":\"</span> HTTP-<span>date</span>\nExpires: Thu, <span>01</span> Dec <span>1994</span> <span>16</span>:<span>00</span>:<span>00</span> GMT\nNote: <span>if</span> <span>a</span> response includes <span>a</span> Cache-Control field <span>with</span> <span>the</span> <span>max</span>-age directive that directive overrides <span>the</span>\nExpires field.\n</code></pre><p>Cache-Control格式：</p><pre><code><span>Cache</span><span>-Control</span>   = <span>\"Cache-Control\"</span> <span>\":\"</span> <span>1</span>#cache<span>-directive</span>\n<span>Cache</span><span>-Control</span>: <span>public</span>\n</code></pre></blockquote><p>具体的标准定义可以参考http1.1中的定义，简单来说Expires控制过期时间是多久，Cache-Control控制什么地方可以缓存 。</p></li></ul>"}}