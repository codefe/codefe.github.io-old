{"sta":1,"data":{"subTitle":"HTML优化","content":"<ul><li>插入<code>HTML</code>。<ul><li><code>JavaScript</code>中使用<code>document.write</code>生成页面内容会效率较低，可以找一个容器元素，比如指定一个<code>div</code>，并使用<code>innerHTML</code>来将<code>HTML</code>代码插入到页面中。</li></ul></li><li>避免空的<code>src</code>和<code>href</code>。<ul><li>当<code>link</code>标签的<code>href</code>属性为空、<code>script</code>标签的<code>src</code>属性为空的时候，浏览器渲染的时候会把当前页面的<code>URL</code>作为它们的属性值，从而把页面的内容加载进来作为它们的值。</li></ul></li><li>为文件头指定<code>Expires</code>。<ul><li>使内容具有缓存性，避免了接下来的页面访问中不必要的HTTP请求。</li></ul></li><li>重构HTML，把重要内容的优先级提高。</li><li>Post-load（次要加载）不是必须的资源。</li><li>利用预加载优化资源。</li><li>合理架构，使DOM结构尽量简单。</li><li>利用<code>LocalStorage</code>合理缓存资源。</li><li>尽量避免CSS表达式和滤镜。</li><li>尝试使用defer方式加载Js脚本。</li><li>新特性：will-change，把即将发生的改变预先告诉浏览器。</li><li>新特性Beacon，不堵塞队列的异步数据发送。</li><li>不同之处：网络缓慢，缓存更小，不令人满意的浏览器处理机制。</li><li>尽量多地缓存文件。</li><li>使用HTML5 Web Workers来允许多线程工作。</li><li>为不同的Viewports设置不同大小的Content。</li><li>正确设置可Tap的目标的大小。</li><li>使用响应式图片。</li><li>支持新接口协议（如HTTP2）。</li><li>未来的缓存离线机制：Service Workers。</li><li>未来的资源优化Resource Hints(preconnect, preload, 和prerender)。</li><li>使用Server-sent Events。</li><li>设置一个Meta Viewport。</li></ul>"}}