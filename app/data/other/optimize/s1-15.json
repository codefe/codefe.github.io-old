{"sta":1,"data":{"subTitle":"对象专题","content":"<ul><li><p>减少不必要的对象创建：</p><ul><li>创建对象本身对性能影响并不大，但由于<code>JAVASCRIPT</code>的垃圾回收调度算法，导致随着对象个数的增加，性能会开始严重下降（复杂度<code>O(n^2)</code>）。<ul><li>如常见的字符串拼接问题，单纯的多次创建字符串对象其实根本不是降低性能的主要原因，而是是在对象创建期间的无谓的垃圾回收的开销。而<code>Array.join</code>的方式，不会创建中间字符串对象，因此就减少了垃圾回收的开销。</li></ul></li><li>复杂的<code>JAVASCRIPT</code>对象，其创建时时间和空间的开销都很大，应该尽量考虑采用缓存。</li><li>尽量作用<code>JSON</code>格式来创建对象，而不是<code>var obj=new Object()</code>方法。前者是直接复制，而后者需要调用构造器。</li></ul></li><li><p>对象查找</p><ul><li>避免对象的嵌套查询，因为<code>JAVASCRIPT</code>的解释性，<code>a.b.c.d.e</code>嵌套对象，需要进行<code>4</code>次查询，嵌套的对象成员会明显影响性能。</li><li>如果出现嵌套对象，可以利用局部变量，把它放入一个临时的地方进行查询。</li></ul></li><li><p>对象属性</p><ul><li><p>访问对象属性消耗性能过程（<code>JAVASCRIPT</code>对象存储）。</p><ul><li><p>先从本地变量表找到<code>对象</code>。</p></li><li><p>然后遍历<code>属性</code>。</p></li><li><p>如果在<code>当前对象</code>的<code>属性列表</code>里没找到。</p></li><li><p>继续从<code>prototype</code>向上查找。</p></li><li><p>且不能直接索引，只能遍历。</p><pre><code><span>function</span> <span>f</span>(obj) { \n    <span>return</span> <span>obj.a</span> + <span>1</span>; \n}</code></pre></li></ul></li></ul></li></ul>"}}