{"sta":1,"data":{"subTitle":"分支管理(branch/checkout/merge)","content":"<h3>git branch</h3><p>创建分支命令 ：</p><pre><span>git branch </span><span>(</span><span>branchname</span><span>)</span></pre><p>没有参数时，git branch 会列出你在本地的分支</p><pre>git branch</pre><p>删除分支命令： \n<br><pre>git branch -d (branchname)</p></pre><h3>git checkout</h3><p>切换分支命令:</p><pre><span>git checkout </span><span>(</span><span>branchname</span><span>)</span></pre><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><p>$ git checkout -b newtest</p><h3>git merge&nbsp;</h3><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：\n<br><br><blockquote>$ git branch<br>\n* master<br>\n  newtest<br>\n$ ls<br>\nREADME        test.txt    test2.txt<br>\n$ git merge newtest<br>\nUpdating 2e082b7..556f0a0<br>\nFast-forward<br>\n test2.txt | 1 -<br>\n 1 file changed, 1 deletion(-)<br>\n delete mode 100644 test2.txt<br>\n$ ls<br>\nREADME        test.txt\n</blockquote>以上实例中我们将 newtest 分支合并到主分支去，test2.txt 文件被删除。\n<br><h4>合并冲突</h4>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。\n<br><blockquote>$ git branch<br>\n* master<br>\n$ cat test.txt<br>\nrunoob.com<br>\n</blockquote>首先，我们创建一个叫做\"change_site\"的分支，切换过去，我们将内容改为 www.runoob.com 。<br>\n<blockquote>$ git checkout -b change_site<br>\nSwitched to a new branch 'change_site'<br>\n$ vim test.txt<br> \n$ head -1 test.txt<br> \nwww.runoob.com<br>\n$ git commit -am 'changed the site'<br>\n[change_site d7e7346] changed the site<br>\n 1 file changed, 1 insertion(+), 1 deletion(-)\n</blockquote> \n<br>将修改的内容提交到 \"change_site\" 分支中。 现在，假如切换回 \"master\" 分支我们可以看内容恢复到我们修改前的，我们再次修改test.txt文件。\n<br><blockquote>$ git checkout master<br>\nSwitched to branch 'master'<br>\n$ head -1 test.txt<br> \nwww.runoob.com<br>\n$ vim test.txt<br> \n$ cat test.txt<br>\nrunoob.com<br>\n新增加一行<br>\n$ git diff<br>\ndiff --git a/test.txt b/test.txt<br>\nindex 704cce7..f84c2a4 100644<br>\n--- a/test.txt<br>\n+++ b/test.txt<br>\n@@ -1 +1,2 @@<br>\n runoob.com<br>\n+新增加一行<br>\n$ git commit -am '新增加一行'<br>\n[master 14b4dca] 新增加一行<br>\n 1 file changed, 1 insertion(+)\n</blockquote> \n<br>现在这些改变已经记录到我的 \"master\" 分支了。接下来我们将 \"change_site\" 分支合并过来。\n<br><blockquote> $ git merge change_site<br>\nAuto-merging test.txt<br>\nCONFLICT (content): Merge conflict in test.txt<br>\nAutomatic merge failed; fix conflicts and then commit the result.<br>\n$ cat test.txt<br> \n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>\nrunoob.com<br>\n新增加一行<br>\n=======<br>\nwww.runoob.com<br>\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site<br>\n</blockquote>我们将前一个分支合并到 \"master\" 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。<br>\n<blockquote>$ vim test.txt<br> \n$ cat test.txt<br> \nwww.runoob.com<br>\n新增加一行<br>\n$ git diff<br>\ndiff --cc test.txt<br>\nindex f84c2a4,bccb7c2..0000000<br>\n--- a/test.txt<br>\n+++ b/test.txt<br>\n@@@ -1,2 -1,1 +1,2 @@@<br>\n- runoob.com<br>\n+ www.runoob.com<br>\n +新增加一行<br>\n</blockquote>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决<br>\n<blockquote>$ git status -s<br>\nUU test.txt<br>\n$ git add test.txt<br> \n$ git status -s<br>\nM  test.txt<br>\n$ git commit<br>\n[master 88afe0e] Merge branch 'change_site'\n</blockquote>现在我们成功解决了合并中的冲突，并提交了结果。</p>"}}