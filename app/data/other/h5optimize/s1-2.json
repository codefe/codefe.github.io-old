{"sta":1,"data":{"subTitle":"加载优化","content":"<p>加载过程是最为耗时的过程，可能会占到总耗时的80%时间，因此是优化的重点</p><p><strong>· 减少HTTP请求</strong><br>因为手机浏览器同时响应请求为4个请求（Android支持4个，iOS 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个<br>a) 合并CSS、JavaScript<br>b) 合并小图片，使用雪碧图</p><p><strong>· 缓存</strong><br>使用缓存可以减少向服务器的请求数，节省加载时间，所以所有静态资源都要在服务器端设置缓存，并且尽量使用长Cache（长Cache资源的更新可使用时间戳）<br>a) 缓存一切可缓存的资源<br>b) 使用长Cache（使用时间戳更新Cache）<br>c) 使用外联式引用CSS、JavaScript</p><p><strong>· 压缩HTML、CSS、JavaScript</strong><br>减少资源大小可以加快网页显示速度，所以要对HTML、CSS、JavaScript等进行代码压缩，并在服务器端设置GZip<br>a) 压缩（例如，多余的空格、换行符和缩进）<br>b) 启用GZip</p><p><strong>· 无阻塞</strong><br>写在HTML头部的JavaScript（无异步），和写在HTML标签中的Style会阻塞页面的渲染，因此CSS放在页面头部并使用Link方式引入，避免在HTML标签中写Style，JavaScript放在页面尾</p><p>部或使用异步方式加载</p><p><strong>·&nbsp;使用首屏加载</strong><br>首屏的快速显示，可以大大提升用户对页面速度的感知，因此应尽量针对首屏的快速显示做优化</p><p><strong>· 按需加载</strong><br>将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量<br>PS：按需加载会导致大量重绘，影响渲染性能<br>a) LazyLoad<br>b) 滚屏加载<br>c) 通过Media Query加载</p><p><strong>· 预加载</strong><br>大型重资源页面（如游戏）可使用增加Loading的方法，资源加载完成后再显示页面。但Loading时间过长，会造成用户流失<br>对用户行为分析，可以在当前页加载下一页资源，提升速度<br>a) 可感知Loading(如进入空间游戏的Loading)<br>b) 不可感知的Loading（如提前加载下一页）</p><p><strong>· 压缩图片</strong><br>图片是最占流量的资源，因此尽量避免使用他，使用时选择最合适的格式（实现需求的前提下，以大小判断），合适的大小，然后使用智图压缩，同时在代码中用Srcset来按需显示<br>PS：过度压缩图片大小影响图片显示效果<br>a) 使用智图（&nbsp;<a target=\"_blank\" href=\"http://zhitu.tencent.com/\">http://zhitu.tencent.com/</a>&nbsp;）<br>b) 使用其它方式代替图片(1. 使用CSS3&nbsp;2. 使用SVG&nbsp;3. 使用IconFont)<br>c) 使用Srcset<br>d) 选择合适的图片(1. webP优于JPG&nbsp;2. PNG8优于GIF)<br>e) 选择合适的大小（1. 首次加载不大于1014KB&nbsp;2. 不宽于640（基于手机屏幕一般宽度））</p><p><strong>· 减少Cookie</strong><br>Cookie会影响加载速度，所以静态资源域名不使用Cookie</p><p><strong>· 避免重定向</strong><br>重定向会影响加载速度，所以在服务器正确设置避免重定向</p><p><strong>· 异步加载第三方资源</strong><br>第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源</p>"}}