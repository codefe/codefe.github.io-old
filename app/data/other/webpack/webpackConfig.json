{"sta":1,"data":{"subTitle":"webpackConfig","content":"<pre><div>//详细的webpack.config.js结构分析：</div><div>var<span>&nbsp;</span>path = require('path');</div><div>var<span>&nbsp;</span>webpack = require('webpack');</div><div>var<span>&nbsp;</span>HtmlWebpackPlugin = require('html-webpack-plugin');</div><div>var<span>&nbsp;</span>TransferWebpackPlugin = require('transfer-webpack-plugin');</div><div>&nbsp;</div><div>module.exports = {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;devtool:<span>&nbsp;</span>'source-map',//由于打包后的代码是合并以后的代码，不利于排错和定位，只需要在config中添加，这样出错以后就会采用source-map的形式直接显示你出错代码的位置。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;//noParse:[/jquery/],//表示跳过jquery,不对其进行编译,这样可以提高打包的速度</div><div>&nbsp;&nbsp;&nbsp;&nbsp;//页面入口文件配置</div><div>&nbsp;&nbsp;&nbsp;&nbsp;entry: {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page1:<span>&nbsp;</span>\"./src/index.js\",</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//page2: [\"./src/index.js\", \"./src/main.js\"],支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出</div><div>&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;//入口文件输出配置</div><div>&nbsp;&nbsp;&nbsp;&nbsp;output: {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:<span>&nbsp;</span>\"dist/js/page\",</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:<span>&nbsp;</span>\"[name].bundle.js\",// page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;publicPath:<span>&nbsp;</span><code>\"/dist/\"&nbsp;&nbsp;&nbsp;<span>&nbsp;</span>//网站运行时的访问路径。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;resolveLoader: {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//指定默认的loader路径，否则依赖走到上游会找不到loader</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root: path.join(__dirname,<span>&nbsp;</span>'node_modules'),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alias: {//给自己写的loader设置别名</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"seajs-loader\": path.resolve( __dirname,<span>&nbsp;</span>\"./web_modules/seajs-loader.js\"<span>&nbsp;</span>)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;//新建一个开发服务器，并且当代码更新的时候自动刷新浏览器。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;devServer: {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;historyApiFallback:<span>&nbsp;</span></code>true,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;noInfo:<span>&nbsp;</span>true,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>hot:<span>&nbsp;</span>true,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inline:<span>&nbsp;</span>true,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress:<span>&nbsp;</span>true,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port:9090<span>&nbsp;</span>//端口你可以自定义</div><div>&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;module: {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// module.loaders 是最关键的一块配置。它告知 webpack每一种文件都需要使用什么加载器来处理：</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loaders: [</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.css$/, loader:<span>&nbsp;</span>'style-loader!css-loader'<span>&nbsp;</span>},//.css 文件使用 style-loader 和 css-loader 来处理.</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//{ test: /\\.css$/, loader: 'style!css' },其他写法1、\"-loader\"其实是可以省略不写的，多个loader之间用“!”连接起来。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//{ test: /\\.css$/, loaders: [\"style\", \"css\"] }，其他写法2、用loaders数组形式;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//在chrome中我们通过sourcemap可以直接调试less、sass源文件文件</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.scss$/, loader:<span>&nbsp;</span>'style!css!sass?sourceMap'},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.less$/, loader:<span>&nbsp;</span>'style!css!less?sourceMap'},//.less 文件使用 style-loader、css-loader 和 less-loader 来编译处理</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//.js 文件使用babel-loader来编译处理,设置exclude用来排除node_modules这个文件夹中的代码</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.js$/, loader:<span>&nbsp;</span>'babel!jsx',exclude: /node_modules/ },&nbsp;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.jsx$/, loader:<span>&nbsp;</span>\"jsx-loader?harmony\"<span>&nbsp;</span>},//.jsx 文件使用 jsx-loader 来编译处理</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.json$/,loader:<span>&nbsp;</span>'json'},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//{ test: /\\.(png|jpg|jpeg|gif)$/, loader: 'url-loader?limit=8192'},&nbsp;//图片文件使用 url-loader 来处理，小于8kb的直接转为base64</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{test: /\\.(png|jpg|gif|svg)$/,loader:<span>&nbsp;</span>'url',</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query: {limit: 10000,name:<span>&nbsp;</span>'[name].[ext]?[hash]'}//设置图片名称扩展名</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.jade$/, loader:<span>&nbsp;</span>\"jade-loader\"<span>&nbsp;</span>},//.jade 文件使用 jade-loader 来编译处理</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.ejs$/, loader:<span>&nbsp;</span>\"ejs-loader\"<span>&nbsp;</span>},//.ejs 文件使用 ejs-loader 来编译处理</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.handlebars$/, loader:<span>&nbsp;</span>\"handlebars-loader\"<span>&nbsp;</span>},//.handlebars 文件使用handlebars-loader来编译处理handlebars模板文件</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.dot$/, loader:<span>&nbsp;</span>\"dot-loader\"<span>&nbsp;</span>},//.dot 文件使用 dot-loader 来编译处理dot模板文件</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.vue$/, loader:<span>&nbsp;</span>\"vue-loader\"<span>&nbsp;</span>},//.vue 文件使用 vue-loader 来编译处理</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.coffee$/, loader:<span>&nbsp;</span>'coffee-loader'<span>&nbsp;</span>},//.coffee 文件使用 coffee-loader 来编译处理</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.html$/,loader:<span>&nbsp;</span>'vue-html'},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.woff$/,loader:<span>&nbsp;</span>\"url?limit=10000&amp;minetype=application/font-woff\"},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.ttf$/,loader:<span>&nbsp;</span>\"file\"},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.eot$/,loader:<span>&nbsp;</span>\"file\"},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ test: /\\.svg$/,loader:<span>&nbsp;</span>\"file\"}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]</div><div>&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;//分内置插件和外置插件</div><div>&nbsp;&nbsp;&nbsp;&nbsp;plugins: [</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个common.js来方便多页面之间进行复用。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>webpack.optimize.CommonsChunkPlugin('common.js'),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>webpack.optimize.UglifyJsPlugin({//压缩文件</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compressor: {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;warnings:<span>&nbsp;</span>false,//supresses warnings, usually from module minification</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except: ['$super',<span>&nbsp;</span>'$',<span>&nbsp;</span>'exports',<span>&nbsp;</span>'require']&nbsp;&nbsp;&nbsp;<span>&nbsp;</span>//排除关键字(可选)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>webpack.DefinePlugin({// definePlugin 接收字符串插入到代码当中, 所以你需要的话可以写上 JS 的字符串</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__DEV__: JSON.stringify(JSON.parse(process.env.BUILD_DEV ||<span>&nbsp;</span>'true')),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__PRERELEASE__: JSON.stringify(JSON.parse(process.env.BUILD_PRERELEASE ||<span>&nbsp;</span>'false'))</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>webpack.ProvidePlugin({//把一个全局变量插入到所有的代码中,支持jQuery plugin的使用;使用ProvidePlugin加载使用频率高的模块</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//provide $, jQuery and window.jQuery to every script</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$:<span>&nbsp;</span>\"jquery\",</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jQuery:<span>&nbsp;</span>\"jquery\",</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"window.jQuery\":<span>&nbsp;</span>\"jquery\"</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>webpack.NoErrorsPlugin(),<span>&nbsp;</span>//允许错误不打断程序</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>TransferWebpackPlugin([<span>&nbsp;</span>//把指定文件夹下的文件复制到指定的目录</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{from:<span>&nbsp;</span>'www'}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;], path.resolve(__dirname,\"src\")),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>HtmlwebpackPlugin({//用于生产符合要求的html文件;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:<span>&nbsp;</span>'Hello World app',</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filename:<span>&nbsp;</span>'assets/admin.html'</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</div><div>&nbsp;&nbsp;&nbsp;&nbsp;],</div><div>&nbsp;&nbsp;&nbsp;&nbsp;//其它解决方案配置</div><div>&nbsp;&nbsp;&nbsp;&nbsp;resolve: {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root:<span>&nbsp;</span>'E:/github/flux-example/src',<span>&nbsp;</span>//绝对路径, 查找module的话从这里开始查找(可选)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;extensions: ['',<span>&nbsp;</span>'.js',<span>&nbsp;</span>'.html'</code>,<span>&nbsp;</span>'.css',<span>&nbsp;</span>'.scss'],<span>&nbsp;</span>//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alias: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>&nbsp;</span>//模块别名定义，方便后续直接引用别名，无须多写长长的地址//后续直接 require('AppStore') 即可</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AppStore :<span>&nbsp;</span>'js/stores/AppStores.js',</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActionType :<span>&nbsp;</span>'js/actions/ActionType.js',</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AppAction :<span>&nbsp;</span>'js/actions/AppAction.js'</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modulesDirectories: [//取相对路径，所以比起 root ，所以会多很多路径。查找module(可选)</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'node_modules',</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>'bower_components',</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'lib',</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'src'</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>]</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div><div>};</div><div>&nbsp;</div><div>if</code><span>&nbsp;</span>(process.env.NODE_ENV ===<span>&nbsp;</span>'production') {</div><div>&nbsp;&nbsp;module.exports.devtool =<span>&nbsp;</span>'#source-map'</div><div>&nbsp;&nbsp;// http://vue-loader.vuejs.org/en/workflow/production.html</div><div>&nbsp;&nbsp;module.exports.plugins = (module.exports.plugins || []).concat([</div><div>&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>webpack.DefinePlugin({</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'process.env': {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NODE_ENV:<span>&nbsp;</span><code>'\"production\"'</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>webpack.optimize.UglifyJsPlugin({</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compress: {</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;warnings:<span>&nbsp;</span><code>false</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}),</div><div>&nbsp;&nbsp;&nbsp;&nbsp;//为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</div><div>&nbsp;&nbsp;&nbsp;&nbsp;new<span>&nbsp;</span>webpack.optimize.OccurenceOrderPlugin()</div><div>&nbsp;&nbsp;])</div><div>}</div></pre>"}}