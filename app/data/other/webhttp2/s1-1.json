{"sta":1,"data":{"subTitle":"前言","content":"<p>如今，互联网上的内容越来越丰富，过去几年时间，一个页面产生请求和整个大小都一直增长，这个趋势还会一直保持，对页面性能优化也要马不停蹄。</p><p><img src=\"/app/data/other/webhttp2/img/2015-10-27_562ee2c887ded.jpg\" alt=\"\"></p><p>一个页面，会经历过加载资源，执行脚本，渲染界面的过程。我们知道，100ms对于计算机来说，可以干很多事情了，但是对于网络请求，可能一次RTT就没了。因此，页面加载对于Web性能是重中之重。</p><p>加载的快慢可以总结成受两个因素影响：<strong>阻塞</strong>与<strong>延迟</strong>。</p><p>**1、阻塞。**浏览器在解析到脚本时，会阻塞页面，等到脚本下载执行完才继续解析文档。此外，浏览器还会限制同域下的并行请求数，超过这个限制后的请求就会被阻塞住。</p><p>**2、延迟。**网络请求都不可避免会有延迟，网页上的延迟有两种，一是DNS查询，二是TCP连接。</p><p>克服这些缺点，我们有一些约定俗成的方案：</p><ul><li><p>静态资源要支持304，开启HTTP缓存控制</p></li><li><p>开启gzip，压缩HTTP body</p></li><li><p>css放在html的head里，js在body底部</p></li><li><p>合并请求</p></li><li><p>使用雪碧图</p></li><li><p>域名分区（突破并行限制，也避免传输过多cookie）</p></li><li><p>使用cdn</p></li></ul><p>这些方案基本都能立竿见影。但是，对于追求极致（KPI）的我们，这些还是远远不够的。我们从页面开始加载时说起。</p><p><img src=\"/app/data/other/webhttp2/img/2015-10-27_562ee2c89313d.jpg\" alt=\"\"></p>"}}