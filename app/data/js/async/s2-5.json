{"sta":1,"data":{"subTitle":"整体总结","content":"<h3>本节内容概述<br></h3><ul><li>基础知识不可忽略</li><li>异步操作代码的变化</li><li>写在最后</li></ul><h4>基础知识不可忽略</h4><p>这里的基础知识分为两部分，都不能忽略，都需要深入研究和思考</p><ul><li>什么是异步，异步的实现原理，event-loop，以及和事件绑定的关系。这些在最初介绍时，都讲过，不要看完了就忘记了；</li><li>无论异步操作的写法如何变化，JS 还是单线程、异步执行的语言，<code>callback</code>一直都存在而且发挥作用，这个在此前的章节一直强调；</li></ul><h4>异步操作代码的变化</h4><p>最后我们来感受一下，从一开始<code>callback</code>方式到后来的<code>async-await</code>方式，前前后后编写异步代码的变化。从变化中就可以体会到，确实越来越简洁，越来越易读。</p><p><code>callback</code>方式</p><div><pre>fs.readFile('some1.json', (err, data) =&gt;<span> {\n    fs.readFile(</span>'some2.json', (err, data) =&gt;<span> {\n        fs.readFile(</span>'some3.json', (err, data) =&gt;<span> {\n            fs.readFile(</span>'some4.json', (err, data) =&gt;<span> {\n\n            })\n        })\n    })\n})</span></pre></div><p><code>Promise</code>方式</p><div><pre>readFilePromise('some1.json').then(data =&gt;<span> {\n    </span><span>return</span> readFilePromise('some2.json'<span>)\n}).then(data </span>=&gt;<span> {\n    </span><span>return</span> readFilePromise('some3.json'<span>)\n}).then(data </span>=&gt;<span> {\n    </span><span>return</span> readFilePromise('some4.json'<span>)\n})</span></pre></div><p><code>Generator</code>方式</p><div><div><pre>co(<span>function</span>*<span> () {\n    const r1 </span>= yield readFilePromise('some1.json'<span>)\n    const r2 </span>= yield readFilePromise('some2.json'<span>)\n    const r3 </span>= yield readFilePromise('some3.json'<span>)\n    const r4 </span>= yield readFilePromise('some4.json'<span>)\n})</span></pre></div></div><p><code>async-await</code>方式</p><div><div><pre>const readFileAsync = async <span>function</span><span> () {\n    const f1 </span>= await readFilePromise('data1.json'<span>)\n    const f2 </span>= await readFilePromise('data2.json'<span>)\n    const f3 </span>= await readFilePromise('data3.json'<span>)\n    const f4 </span>= await readFilePromise('data4.json'<span>)\n}</span></pre></div></div><p><br></p>"}}