{"sta":1,"data":{"subTitle":"异步的实现原理","content":"<p>先看一段比较常见的代码</p><div><div><pre><span>var</span> ajax =<span> $.ajax({\n    url: </span>'/data/data1.json'<span>,\n    success: </span><span>function</span><span> () {\n        console.log(</span>'success'<span>)\n    }\n})</span></pre></div></div><p>上面代码中<code>$.ajax()</code>需要传入两个参数进去，<code>url</code>和<code>success</code>，其中<code>url</code>是请求的路由，<code>success</code>是一个函数。<strong>这个函数传递过去不会立即执行，而是等着请求成功之后才能执行。对于这种传递过去不执行，等出来结果之后再执行的函数，叫做<code>callback</code>，即回调函数</strong></p><p>再看一段更加能说明回调函数的 nodejs 代码。和上面代码基本一样，唯一区别就是：上面代码时网络请求，而下面代码时 IO 操作。</p><div><div><pre><span>var</span> fs = require('fs'<span>)\nfs.readFile(</span>'data1.json', (err, data) =&gt;<span> {\n    console.log(data.toString())\n})</span></pre></div></div><p>从上面两个 demo 看来，<strong>实现异步的最核心原理，就是将<code>callback</code>作为参数传递给异步执行函数，当有结果返回之后再触发&nbsp;<code>callback</code>执行</strong>，就是如此简单！</p>"}}