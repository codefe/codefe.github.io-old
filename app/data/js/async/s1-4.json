{"sta":1,"data":{"subTitle":"异步和事件轮询(event-loop)","content":"<p>提到异步，就必须提 event-loop 。event-loop 中文翻译叫做“事件轮询”，它是能体现出单线程中异步操作是如何被执行的。</p><p>首先，<strong>强烈大家观看一个歪果仁的视频《<a target=\"_blank\" href=\"http://www.tudou.com/programs/view/ACDNKZJm6pQ/\">what the hack is event loop</a>》</strong>，只有不到半个小时的时间，但是将的非常详细。<em>如果那个链接失效，访问<a target=\"_blank\" href=\"http://pan.baidu.com/s/1c1E0rjM\">这里</a>（密码: xx9f）</em></p><p>其次，再结合阮一峰老师的《<a target=\"_blank\" href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\">什么是event loop</a>》一起看一下。将这两个 target=\"_blank\"看完就基本了解 event loop 了</p><p>最后，event-loop 是一块内容比较独立的技术性知识，它是什么样子就是什么样子，讲解起来可变通性非常小。因此，本节说一下我对 event-loop 的理解和体会</p><p>给出一段简单的 js 代码，并用比较通俗、简单的说法介绍一下执行过程。详细过程还需各位去看视频，因为我没必要把半小时的视频都写到这里。</p><div><div><pre>console.log('line 1'<span>)\nsetTimeout(console.log, </span>1000, 'line 2'<span>)\nconsole.log(</span>'line 3')</pre></div></div><p>以上一共三行代码，该程序被执行的时候，会依次挨行执行</p><ul><li>第一步，执行第一行，将结果<code>line 1</code>打印出来</li><li>第二步，执行第二行，注意此时会将这个操作暂时存储到其他地方，因为<code>setTimeout</code>是一个异步执行操作。</li><li>第三步，执行第三行，将结果<code>line 3</code>打印出出来</li><li>第四步，等待最后一行程序（一共三行）都全部执行完了，然后立马实时查看刚才暂存的异步操作有没有。如果有可执行的，就立即拿到出来继续执行。</li><li>第五步，执行完毕之后，再实时查看暂存位置中是否还有未执行的异步回调。</li></ul><p>以上只拿了<code>setTimeout</code>举例子，但是对于网络请求、IO操作、事件绑定道理都是一样的。<strong>如果我讲的简单例子你还是看不懂，一定要去看文章最初提到的《what the hack is event loop》视频，重要重要！！！</strong></p><h3>思考问题</h3><p><strong>第一题，以下代码的输出顺序是什么</strong></p><div><blockquote>setTimeout(console.log, 0, 'a'<span>)\nconsole.log(<br></span><span>console.log(</span>'b'<span>)\nconsole.log(</span><br><span>console.log(</span>'c')</blockquote></div><p>答案是<code>b c a</code>，有疑问的需要再去看上面的介绍或者那个视频。</p><p><strong>第二题，以下代码中，最后输出的结果是否是 500</strong></p><div><blockquote><span>var</span> i, t =<span> Date.now()<br>\n</span><span>for</span> (i = 0; i &lt; 100000000; i++<span>) {\n}<br></span><span><br></span><span>function</span><span> fn() {\n    console.log(Date.now()<br> </span>&nbsp; &nbsp;&nbsp;<span>console.log(Date.now() </span>- t)  <span>//</span><span> 输出多少？？？<br></span><span>}<br></span><span>setTimeout(fn, </span>500)</blockquote></div><p>答案是大于 500ms ，因为 for 函数需要花费一些时间，等 for 执行完之后再开始计算 500ms 之后执行 fn</p>"}}