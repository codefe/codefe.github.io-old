{"sta":1,"data":{"subTitle":"JS为何会有异步","content":"<p>首先记住一句话 ——&nbsp;<strong>JS 是单线程的语言</strong>，所谓“单线程”就是一根筋，对于拿到的程序，一行一行的执行，上面的执行为完成，就傻傻的等着。例如</p><div><pre><span>var</span> i, t =<span> Date.now()\n</span><span>for</span> (i = 0; i &lt; 100000000; i++<span>) {\n}\nconsole.log(Date.now() </span>- t)  <span>//</span><span> 250 （chrome浏览器）</span></pre></div><p>上面的程序花费 250ms 的时间执行完成，执行过程中就会有卡顿，其他的事儿就先撂一边不管了。</p><p>执行程序这样没有问题，但是对于 JS 最初使用的环境 ———— 浏览器客户端 ———— 就不一样了。因此在浏览器端运行的 js ，可能会有大量的网络请求，<strong>而一个网络资源啥时候返回，这个时间是不可预估的。这种情况也要傻傻的等着、卡顿着、啥都不做吗？</strong>———— 那肯定不行。</p><p>因此，JS 对于这种场景就设计了异步 ———— 即，发起一个网络请求，就先不管这边了，先干其他事儿，网络请求啥时候返回结果，到时候再说。这样就能保证一个网页的流程运行。</p>"}}