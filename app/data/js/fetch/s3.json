{"sta":1,"data":{"subTitle":"响应的对象Response类型","content":"<p>当我们执行一个fetch请求时，响应的数据的类型<strong>response.type</strong>可以是“basic”, “cors” 或 “opaque”。这些类型用来说明应该如何对待这些数据和数据的来源。</p><p>当请求发起自同一个域时，响应的类型将会是“basic”，这时，对响应内容的使用将没有任何限制。</p><p>如果请求来自另外某个域，而且响应的具有CORs头信息，那么，响应的类型将是“cors”。 “cors” 和 “basic” 类型的响应基本是一样的，区别在于，“cors”类型的响应限制你只能看到的头信息包括`Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified`, 和 `Pragma`。</p><p>“opaque”类型的响应说明请求来自另外一个域，并且不具有 CORS 头信息。一个opaque类型的响应将无法被读取，而且不能读取到请求的状态，无法看到请求的成功与否。当前的<span>&nbsp;</span><strong>fetch()</strong><span>&nbsp;</span>实现无法执行这样的请求。</p><p>你可以给fetch请求指定一个模式，要求它只执行规定模式的请求。这个模式可以分为：</p><ul><li>“same-origin” 只有来自同域的请求才能成功，其它的均将被拒绝。</li><li>“cors” 允许不同域的请求，但要求有正确的 CORs 头信息。</li><li>“cors-with-forced-preflight” 在执行真正的调用前先执行preflight check。</li><li>“no-cors” 目前这种模式是无法执行的。</li></ul><p></p><p>定义模式的方法是，使用一个参数对象当做<strong>fetch</strong>方法的第二个参数：</p><pre><code>fetch('http://some-site.com/cors-enabled/some.json', {mode: 'cors'})  \n  .then(function(response) {  \n    return response.text();  \n  })  \n  .then(function(text) {  \n    console.log('Request successful', text);  \n  })  \n  .catch(function(error) {  \n    log('Request failed', error)  \n  });</code></pre><p><br></p>"}}