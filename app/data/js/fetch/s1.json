{"sta":1,"data":{"subTitle":"基本Fetch用法","content":"<p>让我们先用一个例子来比较一下使用&nbsp;<strong>XMLHttpRequest</strong>&nbsp;和使用&nbsp;<strong>fetch</strong>&nbsp;之间的不同。我们要请求一个URL，获取JSON格式的返回结果。&nbsp;</p><h3>&nbsp;XMLHttpRequest</h3><p>一个 XMLHttpRequest 请求需要两个监听器来捕捉 success 和 error 两种情形，而且需要调用 open() 和 send() 方法。</p><pre><code>function reqListener() {  \n  var data = JSON.parse(this.responseText);  \n  console.log(data);  \n}\n\nfunction reqError(err) {  \n  console.log('Fetch Error :-S', err);  \n}\n\nvar oReq = new XMLHttpRequest();  \noReq.onload = reqListener;  \noReq.onerror = reqError;  \noReq.open('get', './api/some.json', true);  \noReq.send();</code></pre><h3>Fetch</h3><p>我们的 fetch 请求的代码基本上是这样的：</p><pre><code>fetch('./api/some.json')  \n  .then(  \n    function(response) {  \n      if (response.status !== 200) {  \n        console.log('Looks like there was a problem. Status Code: ' +  \n          response.status);  \n        return;  \n      }\n\n      // Examine the text in the response  \n      response.json().then(function(data) {  \n        console.log(data);  \n      });  \n    }  \n  )  \n  .catch(function(err) {  \n    console.log('Fetch Error :-S', err);  \n  });</code></pre><p>我们首先检查请求响应的状态是否是 200，然后才按照 JSON 对象分析响应数据。\n<br>\n<br>fetch()请求获取的内容是一个 Stream 对象。也就是说，当我们调用 json() 方法时，返回的仍是一个 Promise 对象，这是因为对 stream 的读取也是异步的。</p>"}}