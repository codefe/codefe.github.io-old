{"sta":1,"data":{"subTitle":"prototype原型","content":"<p>既typeof之后的另一位老朋友！</p><p>prototype也是我们的老朋友，即使不了解的人，也应该都听过它的大名。如果它还是您的新朋友，我估计您也是javascript的新朋友。</p><p>&nbsp;</p><p>在咱们的第一节（<a href=\"article.html?id=js/closures/s2-1\">深入理解javascript原型和闭包（1）——一切都是对象</a>）中说道，函数也是一种对象。他也是属性的集合，你也可以对函数进行自定义属性。</p><p>不用等咱们去试验，javascript自己就先做了表率，人家就默认的给函数一个属性——prototype。对，每个函数都有一个属性叫做prototype。</p><p>这个prototype的属性值是一个对象（属性的集合，再次强调！），默认的只有一个叫做constructor的属性，指向这个函数本身。</p><p><img src=\"/app/data/js/closures/img/172121182841896.png\" alt=\"\"></p><p>如上图，SuperType是是一个函数，右侧的方框就是它的原型。</p><p>原型既然作为对象，属性的集合，不可能就只弄个constructor来玩玩，肯定可以自定义的增加许多属性。例如这位Object大哥，人家的prototype里面，就有好几个其他属性。</p><p><img src=\"/app/data/js/closures/img/172130097842386.png\" alt=\"\"></p><p>咦，有些方法怎么似曾相似？</p><p>对！别着急，之后会让你知道他们为何似曾相识。</p><p>接着往下说，你也可以在自己自定义的方法的prototype中新增自己的属性</p><div><blockquote>        <span>function</span><span> Fn() { }\n<br> </span><span>        Fn.prototype.name </span>= '王福朋'<span>;<br> </span><span>        Fn.prototype.getYear </span>= <span>function</span><span> () {<br>\n            </span><span></span>&nbsp; &nbsp;&nbsp;<span>return</span> 1988<span>;<br></span><span>        };</span></blockquote></div><p>看到没有，这样就变成了</p><p><img src=\"/app/data/js/closures/img/172138591437263.png\" alt=\"\"></p><p>没问题！</p><p>但是，这样做有何用呢？ ——&nbsp;解决这个问题，咱们还是先说说jQuery吧。</p><div><blockquote><span>var</span> $div = $('div'<span>);\n$div.attr(<br></span><span>$div.attr(</span>'myName', '王福朋');</blockquote></div><p>以上代码中，$('div')返回的是一个对象，对象——被函数创建的。假设创建这一对象的函数是 myjQuery。它其实是这样实现的。</p><div><blockquote>        myjQuery.prototype.attr = <span>function</span><span> () {<br>\n            </span><span></span>&nbsp; &nbsp;&nbsp;<span>//</span><span>……<br></span><span>        };<br></span><span>        $(</span>'div') = <span>new</span> myjQuery();</blockquote></div><p>不知道大家有没有看明白。</p><p>如果用咱们自己的代码来演示，就是这样</p><div><!--StartFragment--><blockquote> function Fn() { }<br>        &nbsp;&nbsp;&nbsp;&nbsp;Fn.prototype.name = '王福朋';<br>        &nbsp;&nbsp;&nbsp;&nbsp;Fn.prototype.getYear = function () {<br>            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1988;<br>        &nbsp;&nbsp;&nbsp;&nbsp;};<br>\n        var fn = new Fn();<br>        console.log(fn.name);<br>        console.log(fn.getYear());</blockquote><!--EndFragment--></div><p>即，Fn是一个函数，fn对象是从Fn函数new出来的，这样fn对象就可以调用Fn.prototype中的属性。</p><p>因为每个对象都有一个隐藏的属性——“__proto__”，这个属性引用了创建这个对象的函数的prototype。即：fn.__proto__ === Fn.prototype</p><p>这里的\"__proto__\"成为“隐式原型”，下回继续分解。</p><p><!--StartFragment--><!--EndFragment--></p><p>&nbsp;</p>"}}