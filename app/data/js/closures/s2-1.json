{"sta":1,"data":{"subTitle":"一切都是对象","content":"<p><strong>“一切都是对象”这句话的重点在于如何去理解“对象”这个概念。</strong></p><p>——当然，也不是所有的都是对象，值类型就不是对象。</p><p>&nbsp;</p><p>首先咱们还是先看看javascript中一个常用的运算符——typeof。typeof应该算是咱们的老朋友，还有谁没用过它？</p><p>typeof函数输出的一共有几种类型，在此列出：</p><div><pre><code>function show(x) {\n\n            console.log(typeof x);    // undefined\n            console.log(typeof 10);   // number\n            console.log(typeof 'abc'); // string\n            console.log(typeof true);  // boolean\n\n            console.log(typeof function () {});  //function\n\n            console.log(typeof [1, 'a', true]);  //object\n            console.log(typeof { a: 10, b: 20 });  //object\n            console.log(typeof null);  //object\n            console.log(typeof new Number(10));  //object\n        }\n        show();</code></pre></div><p>以上代码列出了typeof输出的集中类型标识，其中上面的四种（undefined, number, string, boolean）属于简单的<span>值类型</span>，不是对象。剩下的几种情况——函数、数组、对象、null、new Number(10)都是对象。他们都是<span>引用类型</span>。</p><p>判断一个变量是不是对象非常简单。值类型的类型判断用typeof，引用类型的类型判断用instanceof。</p><div><blockquote><span>var</span> fn = <span>function</span><span> () { };\nconsole.log(fn<br> </span><span>console.log(fn </span><span>instanceof</span> Object);  <span>//</span><span> true</span></blockquote></div><p>&nbsp;</p><p>好了，上面说了半天对象，各位可能也经常在工作中应对对象，在生活中还得应对活生生的对象。有些个心理不正常或者爱开玩笑的单身人士，还对于系统提示的“找不到对象”耿耿于怀。那么在javascript中的对象，到底该如何定义呢？</p><p><strong>对象——若干属性的集合。</strong></p><p>java或者C#中的对象都是new一个class出来的，而且里面有字段、属性、方法，规定的非常严格。但是javascript就比较随意了——数组是对象，函数是对象，对象还是对象。对象里面的一切都是属性，只有属性，没有方法。那么这样方法如何表示呢？——方法也是一种属性。因为它的属性表示为<span>键值对</span>的形式。</p><p>而且，更加好玩的事，javascript中的对象可以任意的扩展属性，没有class的约束。这个大家应该都知道，就不再强调了。</p><p>先说个最常见的例子：</p><p><img src=\"/app/data/js/closures/img/172012532064920.png\" alt=\"\"></p><p>以上代码中，obj是一个自定义的对象，其中a、b、c就是它的属性，而且在c的属性值还是一个对象，它又有name、year两个属性。</p><p>&nbsp;</p><p>这个可能比较好理解，那么函数和数组也可以这样定义属性吗？——当然不行，但是它可以用另一种形式，总之函数/数组之流，只要是对象，它就是属性的集合。</p><p>以函数为例子：</p><div><!--StartFragment--><pre><code>var fn = function () {\n            alert(100);\n        };\n        fn.a = 10;\n        fn.b = function () {\n            alert(123);\n        };\n        fn.c = {\n            name: \"王福朋\",\n            year: 1988\n        };</code></pre><!--EndFragment--></div><p>上段代码中，函数就作为对象被赋值了a、b、c三个属性——很明显，这就是属性的集合吗。</p><p>你问：这个有用吗？</p><p>回答：可以看看jQuery源码！</p><p>在jQuery源码中，“jQuery”或者“$”，这个变量其实是一个函数，不信你可以叫咱们的老朋友typeof验证一下。</p><div><blockquote>console.log(<span>typeof</span> $);  <span>//</span><span> function<br></span>console.log($.trim(\" ABC \"));</blockquote></div><p>验明正身！的确是个函数。那么咱们常用的 $.trim() 也是个函数，经常用，就不用验了吧！</p><p>很明显，这就是在$或者jQuery函数上加了一个trim属性，属性值是函数，作用是截取前后空格。</p><p>&nbsp;</p><p>javascript与java/C#相比，首先最需要解释的就是弱类型，因为弱类型是最基本的用法，而且最常用，就不打算做一节来讲。</p><p>其次要解释的就是本文的内容——<span>一切（引用类型）都是对象，对象是<strong>属性的集合</strong></span>。最需要了解的就是对象的概念，和java/C#完全不一样。所以，切记切记！</p><p>&nbsp;</p><p>最后，有个疑问。在typeof的输出类型中，function和object都是对象，为何却要输出两种答案呢？都叫做object不行吗？——当然不行。</p><p><!--StartFragment--><!--EndFragment--></p><p>具体原因，且听下回分解！</p>"}}