{"sta":1,"data":{"subTitle":"简述什么是闭包","content":"<h3>首先来简述什么是闭包</h3><p><img src=\"https://pic4.zhimg.com/v2-2d16967becf2df18358d62a84d0595e7_b.png\" data-rawwidth=\"689\" data-rawheight=\"394\" width=\"689\" data-original=\"https://pic4.zhimg.com/v2-2d16967becf2df18358d62a84d0595e7_r.png\" data-actualsrc=\"https://pic4.zhimg.com/v2-2d16967becf2df18358d62a84d0595e7_b.png\">假设上面三行代码在一个立即执行函数中（为简明起见，我就不写立即执行函数了，影响读者理解）。</p><p>评论里没看完就说我写得有问题的，请看清楚哦：</p><p>上面三行代码在一个立即执行函数中。<br></p><p>三行代码中，有一个局部变量 local，有一个函数 foo，foo 里面可以访问到 local 变量。<br></p><p>好了这就是一个闭包：</p><p><b>「函数」和「函数内部能访问到的变量」（也叫环境）的总和，就是一个闭包。</b></p><p>就这么简单。</p><p>有的同学就疑惑了，闭包这么简单么？</p><p>「我听说闭包是需要函数套函数，然后 return 一个函数的呀！」</p><p>比如这样：</p><div><pre><code><span></span>function foo(){\n  var local = 1\n  function bar(){\n    local++\n    return local\n  }\n  return bar\n}\n\nvar func = foo()\nfunc()\n</code></pre></div><p>这里面确实有闭包，local 变量和 bar 函数就组成了一个闭包（Closure）。</p><p><b>为什么要函数套函数呢？</b></p><p>是因为需要局部变量，所以才把 local 放在一个函数里，如果不把 local 放在一个函数里，local 就是一个全局变量了，达不到使用闭包的目的——隐藏变量（等会会讲）。</p><p>这也是为什么我上面要说「运行在一个立即执行函数中」。</p><p>有些人看到「闭包」这个名字，就一定觉得要用什么包起来才行。其实这是翻译问题，闭包的原文是 Closure，跟「包」没有任何关系。</p><p>所以函数套函数只是为了造出一个局部变量，跟闭包无关。</p><p><b>为什么要 return bar 呢？</b></p><p>因为如果不 return，你就无法使用这个闭包。把 return bar 改成 window.bar = bar 也是一样的，只要让外面可以访问到这个 bar 函数就行了。</p><p><!--StartFragment--><!--EndFragment--></p><p>所以 return bar 只是为了 bar 能被使用，也跟闭包无关。</p>"}}