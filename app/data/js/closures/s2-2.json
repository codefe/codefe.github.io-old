{"sta":1,"data":{"subTitle":"函数和对象的关系","content":"<p>上文（<a  href=\"article.html?id=js/closures/s2-1\">理解javascript原型和作用域系列（1）——一切都是对象</a>）已经提到，函数就是对象的一种，因为通过instanceof函数可以判断。</p><div><blockquote><span>var</span> fn = <span>function</span><span> () { };\nconsole.log(fn<br> </span><span>console.log(fn </span><span>instanceof</span> Object);  <span>//</span><span> true</span></blockquote></div><p>对！函数是一种对象，但是函数却不像数组一样——你可以说数组是对象的一种，因为数组就像是对象的一个子集一样。但是函数与对象之间，却不仅仅是一种包含和被包含的关系，函数和对象之间的关系比较复杂，甚至有一点鸡生蛋蛋生鸡的逻辑，咱们这一节就缕一缕。</p><p>&nbsp;</p><p>还是先看一个小例子吧。</p><div><blockquote>        <span>function</span><span> Fn() {<br>\n            </span><span></span>&nbsp; &nbsp;&nbsp;<span>this</span>.name = '王福朋'<span>;<br>\n            </span><span></span>&nbsp; &nbsp;&nbsp;<span>this</span>.year = 1988<span>;\n        }<br>\n        </span><span>        }<br></span><span>        </span><span>var</span> fn1 = <span>new</span> Fn();</blockquote></div><p>上面的这个例子很简单，它能说明：对象可以通过函数来创建。对！也只能说明这一点。</p><p>但是我要说——<span><strong>对象都是通过函数创建的</strong></span>——有些人可能反驳：不对！因为：</p><div><blockquote><span>var</span> obj = { a: 10, b: 20<span> };<br>\n</span><span>var</span> arr = [5, 'x', <span>true</span>];</blockquote></div><p>但是不好意思，这个——真的——是一种——“快捷方式”，在编程语言中，一般叫做“语法糖”。</p><p>做“语法糖”做的最好的可谓是微软大哥，它把他们家C#那小子弄的不男不女从的，本想图个人见人爱，谁承想还得到处跟人解释——其实它是个男孩！</p><p>话归正传——其实以上代码的本质是：</p><div><!--StartFragment--><blockquote>//var obj = { a: 10, b: 20 };<br>        //var arr = [5, 'x', true];<br><br>\n        var obj = new Object();<br>        obj.a = 10;<br>        obj.b = 20;<br><br>\n        var arr = new Array();<br>        arr[0] = 5;<br>        arr[1] = 'x';<br>        arr[2] = true;</blockquote><!--EndFragment--></div><p>而其中的 Object 和 Array 都是函数：</p><div><blockquote>console.log(<span>typeof</span> (Object));  <span>//</span><span> function<br></span>console.log(<span>typeof</span> (Array));  <span>//</span><span> function</span></blockquote></div><p>所以，可以很负责任的说——<span>对象都是通过函数来创建的</span>。</p><p>&nbsp;</p><p>现在是不是糊涂了—— 对象是函数创建的，而函数却又是一种对象——天哪！函数和对象到底是什么关系啊？</p><p>别着急！揭开这个谜底，还得先去了解一下另一位老朋友——prototype原型。</p><p>&nbsp;</p><p><!--StartFragment--><!--EndFragment--></p><p>本系列文章不打算动辄几千字的长篇大论，咱们小步快跑，不至于看的太乏味。</p>"}}