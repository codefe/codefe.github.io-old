{"sta":1,"data":{"subTitle":"数组对象的3个属性","content":"<p>1、length 属性</p><p></p><p>Length属性表示数组的长度，即其中元素的个数。因为数组的索引总是由0开始，所以一个数组的上下限分别是：0和length-1。和其他大多数语言不同的是，JavaScript数组的length属性是可变的，这一点需要特别注意。当length属性被设置得更大时，整个数组的状态事实上不会发生变化，仅仅是length属性变大；当length属性被设置得比原来小时，则原先数组中索引大于或等于length的元素的值全部被丢失。下面是演示改变length属性的例子：</p><pre><code>var arr=[12,23,5,3,25,98,76,54,56,76];\n//定义了一个包含10个数字的数组\nalert(arr.length); //显示数组的长度10\narr.length=12; //增大数组的长度\nalert(arr.length); //显示数组的长度已经变为12\nalert(arr[8]); //显示第9个元素的值，为56\narr.length=5; //将数组的长度减少到5，索引等于或超过5的元素被丢弃\nalert(arr[8]); //显示第9个元素已经变为\"undefined\"\narr.length=10; //将数组长度恢复为10\nalert(arr[8]); //虽然长度被恢复为10，但第9个元素却无法收回，显示\"undefined\"</code></pre><p>由上面的代码我们可以清楚的看到length属性的性质。但length对象不仅可以显式的设置，它也有可能被隐式修改。JavaScript中可以使用一个未声明过的变量，同样，也可以使用一个未定义的数组元素（指索引超过或等于length的元素），这时，length属性的值将被设置为所使用元素索引的值加1。例如下面的代码：</p><pre><code>var arr=[12,23,5,3,25,98,76,54,56,76];\nalert(arr.length);\narr[15]=34;\nalert(arr.length);</code></pre><p>代码中同样是先定义了一个包含10个数字的数组，通过alert语句可以看出其长度为10。随后使用了索引为15的元素，将其赋值为15，即arr[15]=34，这时再用alert语句输出数组的长度，得到的是16。无论如何，对于习惯于强类型编程的开发人员来说，这是一个很令人惊讶的特性。事实上，使用new Array()形式创建的数组，其初始长度就是为0，正是对其中未定义元素的操作，才使数组的长度发生变化。\n<br> 由上面的介绍可以看到，length属性是如此的神奇，利用它可以方便的增加或者减少数组的容量。因此对length属性的深入了解，有助于在开发过程中灵活运用。\n<br>2、prototype 属性\n<br>返回对象类型原型的引用。prototype 属性是 object 共有的。\n<br>objectName.prototype\n<br>objectName 参数是object对象的名称。\n<br>说明：用 prototype 属性提供对象的类的一组基本功能。 对象的新实例“继承”赋予该对象原型的操作。\n<br>对于数组对象，以以下例子说明prototype 属性的用途。\n<br>给数组对象添加返回数组中最大元素值的方法。要完成这一点，声明一个函数，将它加入 Array.prototype， 并使用它。</p><pre><code>function array_max( )\n{\n   var i, max = this[0];\n   for (i = 1; i &lt; this.length; i++)\n   {\n   if (max &lt; this[i])\n   max = this[i];\n   }\n   return max;\n}\nArray.prototype.max = array_max;\nvar x = new Array(1, 2, 3, 4, 5, 6);\nvar y = x.max( );</code></pre><p>该代码执行后，y 保存数组 x 中的最大值，或说 6。&nbsp;</p><p><br>3、constructor 属性\n<br>表示创建对象的函数。</p><pre><code>object.constructor //object是对象或函数的名称。</code></pre><p>说明：constructor 属性是所有具有 prototype 的对象的成员。它们包括除 Global 和 Math 对象以外的所有 JScript 固有对象。constructor 属性保存了对构造特定对象实例的函数的引用。\n<br>例如：</p><pre><code>x = new String(\"Hi\");\nif (x.constructor == String) // 进行处理（条件为真）。</code></pre><p>或</p><pre><code>function MyFunc {\n// 函数体。\n}\ny = new MyFunc;\nif (y.constructor == MyFunc) // 进行处理（条件为真）。</code></pre><p><br></p>"}}