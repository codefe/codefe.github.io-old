{"sta":1,"data":{"subTitle":"在数组中查找不同顺序排列的字符串","content":"<p>这篇文章主要介绍了JavaScript实现在数组中查找不同顺序排列的字符串,本文用两个方法解决了这道算法题,需要的朋友可以参考下&nbsp;</p><p>需求描述：从一组数组中找出一组按不同顺序排列的字符串的数组元素。假如有这样一个数组：</p><pre><code>[ 'abcd', 'hello', 'bdca', 'olleh', 'cadb', 'nba', 'abn', 'abc' ]</code></pre><p>需要找出的结果是：</p><pre><code>[ 'abcd', 'bdca', 'cadb' ]</code></pre><p>那么这里的关键点是判断一组字符串是否是否只是字符的顺序不同，只要解决整个关键点其他都好办了。\n<br>方法1：</p><pre><code>var stringClassify = function( arr ){\n    var arrLength = arr.length,\n        obj = {},\n        i = 0,\n        num, item, name, firstItem, strLength;\n \n    for( ; i &lt; arrLength; i++ ){\n        item = arr[i];\n        strLength = item.length;\n        num = 0;\n \n        // 将单个的字符转换成 Unicode 编码\n        // 对编码进行取和计算\n        for( j = 0; j &lt; strLength; j++ ){\n            num += item.charCodeAt( j );\n        }      \n \n        if( !firstItem ){\n            firstItem = item;\n            obj[ num ].push( item );\n        }\n                // 通过检测待添加的字符串的第一个字符是否\n                // 在另一个字符串中出现以避免将下面的情况\n                // [ 'ad', 'da', 'bc' ]\n        else if( ~firstItem.indexOf(item.charAt(0)) ){\n            obj[ num ].push( item );\n        }\n    }\n \n    for( name in obj ){\n        console.log( obj[name] );\n    }\n};</code></pre><p>方法1采用了遍历字符串中的每一个字符，然后将单个的字符转换成 Unicode 编码，对编码进行取和的计算，abcd 和 bdca 的编码和会是一致的。最后用编码和作为对象的 key 来保存编码和一致的字符串。\n<br>方法 1 需要注意的是，字符串“ad”和“bc”的 Unicode 编码和是一样的，此时需要多加一个判断，检测任意一个字符串中的第一个字符是否有出现在另一个字符串中出现过即可。</p><p>&nbsp;\n<br>方法2：</p><pre><code>var stringClassify = function(){\n    var arrLength = arr.length,\n        obj = {},\n        i = 0,\n        num, item, name, strArr, newStr;\n \n    for( ; i &lt; arrLength; i++ ){\n        item = arr[i];\n \n        strArr = arr[i].split( '' );\n        strArr.sort();\n        newStr = strArr.join( '' );\n \n        if( !obj[newStr] ){\n            obj[ newStr ] = [];\n        }\n \n        obj[ newStr ].push( item );\n    }\n \n    for( name in obj ){\n        console.log( obj[name] );\n    }\n};</code></pre><p>方法2是将字符串转换成数组后再对数组进行 sort 排序，abcd 和 bdca 使用 sort 排序后会变成 abcd，将拍好序的字符串作为对象的 key 来保存排序一致的字符串。\n<br>其实两种方法的原理都是通过将字符转换成 Unicode 编码，只是方法1是显式的转换，而方法2中用到的 sort 排序，会隐式的转换。</p>"}}