{"sta":1,"data":{"subTitle":"数组排序函数","content":"<p>javascript的数组排序函数 sort方法，默认是按照ASCII 字符顺序进行升序排列。&nbsp;</p><p>arrayobj.sort(sortfunction); \n<br>参数：sortFunction \n<br>可选项。是用来确定元素顺序的函数的名称。如果这个参数被省略，那么元素将按照 ASCII 字符顺序进行升序排列。 \n<br>sort 方法将 Array 对象进行适当的排序；在执行过程中并不会创建新的 Array 对象。 \n<br>如果为 sortfunction 参数提供了一个函数，那么该函数必须返回下列值之一： \n<br>负值，如果所传递的第一个参数比第二个参数小。 \n<br>零，如果两个参数相等。 \n<br>正值，如果第一个参数比第二个参数大。 \n<br>以上的方法在一维的排序还是很方便的，但像SQL语句中的ORDER BY 一样的多键值排序由怎么做呢？ \n<br>多维数组的多键值排序，则需要复杂一些，但不需要用循环解决。实际解决的道理是一样的 。 \n<br>数字： \n<br></p><p>以下的例子是将数字的多维数组按照第5列，第9列，第3列的顺序排序，像SQL语句中的ORDER BY col5，col9，col7。数字的时候可以直接两个项目相减，以结果作为返回值即可。</p><pre><code>var myArray = new Array(); \nfor(var i=0;i&lt;10;i++ )...{ \nmyArray[i]=new Array(); \nmyArray[i][0]=Math.floor(Math.random()*10); \nmyArray[i]=Math.floor(Math.random()*10); \nmyArray[i]=Math.floor(Math.random()*10); \nmyArray[i]=Math.floor(Math.random()*10); \nmyArray[i]=Math.floor(Math.random()*10); \nmyArray[i]=Math.floor(Math.random()*10); \nmyArray[i]=Math.floor(Math.random()*10); \nmyArray[i]=Math.floor(Math.random()*10); \nmyArray[i]=Math.floor(Math.random()*10); \n} \nmyArray.sort( function(x, y) ...{ \nreturn (x[0]==y[0])?((x==y)?(x-y):(x-y)):(x-y) \n}); \nfor(var i=0;i&lt;myArray.length;i++ )...{ \ndocument.write(myArray[i].join(\",\") + \"&lt;br/&gt;\"); \n}</code></pre><p>字符： \n<br>字符的时候sortFunction中的项目不能像数字一样直接相减，需要调用 \n<br>str1.localeCompare( str2 )方法来作比较，从而满足返回值。以下是多维数组的第1，2列作排序的情况。</p><pre><code>function sortFunction(array) ...{ \nreturn array.sort( function(x, y) ...{ \nreturn (x[0]==y[0])?(x.localeCompare(y)):(x[0].localeCompare(y[0])) \n}); \n}</code></pre><p>因此arrayObject.sort( sortFunction )的排序功能还是很强大的，终于能够实现了SQL语句中的ORDER BY 一样的功能。</p><p>&nbsp;<br></p>"}}