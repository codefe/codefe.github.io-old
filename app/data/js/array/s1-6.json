{"sta":1,"data":{"subTitle":"数组排序函数sort和reverse使用介绍","content":"<p>reverse方法将一个Array对象中的元素位置进行反转，sort方法返回一个元素已经进行了排序的 Array 对象，下面为大家介绍下&nbsp;</p><p>首先我们先说一下reverse方法。 \n<br>\n<br>reverse 方法将一个 Array 对象中的元素位置进行反转。在执行过程中，这个方法并不会创建一个新的 Array 对象。 \n<br>\n<br></p><p>例如：</p><pre><code>var array1 = ['a','cc','bb','hello',false,0,3]; \nvar array2 = [3,5,2,1,7,9,10,13]; \narray1.reverse(); \narray2.reverse(); \nalert(array1); \nalert(array2);</code></pre><p>如果数组中只包含数字，那么数字将降序排列，如果数组中还包含其他类型，就将数组反转并返回数组。 \n<br>\n<br>sort 方法 \n<br>\n<br>返回一个元素已经进行了排序的 Array 对象。</p><pre><code>arrayobj.sort(sortfunction)</code></pre><p>参数 \n<br>\n<br>arrayObj \n<br>\n<br>必选项。任意 Array 对象。 \n<br>\n<br>sortFunction \n<br>\n<br>可选项。是用来确定元素顺序的函数的名称。如果这个参数被省略，那么元素将按照 ASCII 字符顺序进行升序排列。 \n<br>\n<br>sort 方法将 Array 对象进行适当的排序；在执行过程中并不会创建新的 Array 对象。 \n<br>\n<br>如果为 sortfunction 参数提供了一个函数，那么该函数必须返回下列值之一： \n<br>\n<br>负值，如果所传递的第一个参数比第二个参数小。 \n<br>零，如果两个参数相等。 \n<br>正值，如果第一个参数比第二个参数大。 \n<br>\n<br>例1：</p><pre><code>var a, l; // 声明变量。 \na = [\"X\" ,\"y\" ,\"d\", \"Z\", \"v\",\"m\",\"r\",false,0]; \nl = a.sort(); // 排序数组。 \nalert(l); // 返回排序的数组。</code></pre><p>这个例子里没有传入比较函数那么元素将按照 ASCII 字符顺序进行升序排列，另外这个数组中包含了多种类型的数据，所以即使传入了比较函数，它依然按照ASCII 字符顺序进行升序排列。 \n<br>\n<br>例如</p><pre><code>var a, l; // 声明变量。 \na = [\"X\" ,\"y\" ,\"d\", \"Z\", \"v\",\"m\",\"r\",false,0]; \nl = a.sort(); // 排序数组。 \nalert(l); // 返回排序的数组。 \nll = a.sort(compack); \nalert(ll);//返回与上面一样 \nfunction compack(a,b){ \nreturn a-b; \n}</code></pre><p>当我们需要对数字排序的时候可以使用sort方法，只要给它传入一个比较函数就可以轻松的升序和降序。 \n<br>\n<br>升序：</p><pre><code>var a, l; // 声明变量。 \na = [6,8,9,5.6,12,17,90]; \nl = a.sort(compack); // 排序数组。 \nalert(l); // 返回排序的数组。 \n\nfunction compack(a,b){ \nreturn a-b; \n}</code></pre><p>降序：</p><pre><code>var a, l; // 声明变量。 \na = [6,8,9,5.6,12,17,90]; \nl = a.sort(compack); // 排序数组。 \nalert(l); // 返回排序的数组。 \n\nfunction compack(a,b){ \nreturn b-a; \n}</code></pre><p>在比较函数里升序返回a-b,降序返回b-a。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;<br></p>"}}