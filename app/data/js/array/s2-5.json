{"sta":1,"data":{"subTitle":"数组去重方法汇总","content":"<p>数组去重复是一个常见的需求，我们暂时考虑同类型的数组去重复。主要是理清思路和考虑下性能。以下方法，网上基本都有，这里只是简单地总结一下。&nbsp;</p><pre><code>Array.prototype.unique1 = function () {\n var n = []; //一个新的临时数组\n for (var i = 0; i &lt; this.length; i++) //遍历当前数组\n {\n  //如果当前数组的第i已经保存进了临时数组，那么跳过，\n  //否则把当前项push到临时数组里面\n  if (n.indexOf(this[i]) == -1) n.push(this[i]);\n }\n return n;\n};\nArray.prototype.unique2 = function()\n{\n  var n = {},r=[]; //n为hash表，r为临时数组\n  for(var i = 0; i &lt; this.length; i++) //遍历当前数组\n  {\n    if (!n[this[i]]) //如果hash表中没有当前项\n    {\n      n[this[i]] = true; //存入hash表\n      r.push(this[i]); //把当前数组的当前项push到临时数组里面\n    }\n  }\n  return r;\n};\nArray.prototype.unique3 = function()\n{\n  var n = [this[0]]; //结果数组\n  for(var i = 1; i &lt; this.length; i++) //从第二项开始遍历\n  {\n    //如果当前数组的第i项在当前数组中第一次出现的位置不是i，\n    //那么表示第i项是重复的，忽略掉。否则存入结果数组\n    if (this.indexOf(this[i]) == i) n.push(this[i]);\n  }\n  return n;\n};\nArray.prototype.unique4 = function()\n{\n  this.sort();\n  var re=[this[0]];\n  for(var i = 1; i &lt; this.length; i++)\n  {\n    if( this[i] !== re[re.length-1])\n    {\n      re.push(this[i]);\n    }\n  }\n  return re;\n};\nvar arr = [1,2,2,2,3,3,4,5];\nconsole.log(arr.unique1()); // [1, 2, 3, 4, 5]\nconsole.log(arr.unique2()); // [1, 2, 3, 4, 5]\nconsole.log(arr.unique3()); // [1, 2, 3, 4, 5]\nconsole.log(arr.unique4()); // [1, 2, 3, 4, 5]</code></pre><p>其中第1种和第3种方法都用到了数组的indexOf方法。此方法的目的是寻找存入参数在数组中第一次出现的位置。很显然，js引擎在实现这个方法的时候会遍历数组直到找到目标为止。所以此函数会浪费掉很多时间。 而第2中方法用的是hash表。把已经出现过的通过下标的形式存入一个object内。下标的引用要比用indexOf搜索数组快的多。\n<br>第四种方法的思路是先把数组排序，然后比较相邻的两个值。 排序的时候用的JS原生的sort方法，JS引擎内部应该是用的快速排序吧。 最终测试的结果是此方法运行时间平均是第二种方法的三倍左右，不过比第一种和第三种方法快了不少。</p><p>&nbsp;<br></p>"}}