{
	"sta": 1,
	"data": {
		"type": "JavaScript",
		"name": "面向对象OOP",
		"subType": "js-oop",
		"title": "面向对象OOP",
		"author": "网络",
		"star": "★★★★☆",
		"desc": "如果你想让你的javascript代码变得更加优美，性能更加卓越。或者，你想像jQuery的作者一样，写出属于自己优秀的类库（哪怕是基于jquery的插件）。那么，你请务必要学习javascript面向对象，否则你无法更灵活的使用javascript这门语言。面向对象程序设计（Object-oriented programming，OOP）是一种程序设计范型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。一般面向对象包含：继承，封装，多态，抽象",
		"items": [
			{"step": "基础一：对象形式的继承","item":[
				{"title":"浅拷贝","url":"s1-1"},
				{"title":"深拷贝","url":"s1-2"},
				{"title":"ES6最简单的深复制方法","url":"s1-5"},
				{"title":"类的继承","url":"s1-3"},
				{"title":"调用父类方法","url":"s1-4"}
			]},
			{"step": "基础二：封装","item":[
				{"title":"命名空间","url":"s2-1"},
				{"title":"静态成员","url":"s2-2"},
				{"title":"私有与公有","url":"s2-3"},
				{"title":"模块化","url":"s2-4"}
			]},
			{"step": "基础三：封装","item":[
				{"title":"模拟方法重载","url":"s3-1"},
				{"title":"方法重写","url":"s3-2"}
			]},
			{"step": "基础四：抽象类","item":[
				{"title":"抽象","url":"s4-1"}
			]},
			{"step": "进阶：OOP的选择","item":[
				{"title":"工厂模式(不推荐)","url":"s5-1"},
				{"title":"构造函数(不推荐)","url":"s5-2"},
				{"title":"构造函数 + 原型方法（混合方式）(推荐)","url":"s5-3"}
			]}
		]
	}
}