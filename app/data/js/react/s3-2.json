{"sta":1,"data":{"subTitle":"定制shouldComponentUpdate函数","content":"<div><p><code>shouldComponentUpdate</code>是决定<code>react</code>组件什么时候能够不重新渲染的函数，但是这个函数默认的实现方式就是简单的返回一个<code>true</code>。也就是说，默认每次更新的时候都要调用所用的生命周期函数，包括<code>render</code>函数，重新渲染。</p>\n<p>我们来看一下下面的一个例子</p><p><img src=\"/app/data/js/react/img/1.webp\" style=\"max-width:100%;\"><br></p>\n<div>\n<div>\n<div></div>\n<div data-width=\"1406\" data-height=\"1572\"></div>\n</div>\n<div>shouldComponentUpdate</div>\n</div>\n<p>我们写两个组件，<code>App</code>和<code>Demo</code>组件，并写两个方法，一个改变<code>App</code>中的<code>num</code>的值，一个是改变<code>title</code>，我们在Demo的render中打印render函数。我们可以看到以下的效果：</p>\n<div>\n<div>\n<div></div>\n<div data-width=\"1425\" data-height=\"773\"><img src=\"/app/data/js/react/img/2.webp\" style=\"max-width:100%;\"><br></div>\n</div>\n<div>shouldComponentUpdate_demo</div>\n</div>\n<p>我们可以清晰的看到虽然<code>demo</code>组件里的<code>title</code>值没有改变，但是还是<code>render</code>了。</p>\n<p>为了解决这个问题，我们可以对demo组件进行如下的修改：</p>\n<div>\n<div>\n<div></div>\n<div data-width=\"1008\" data-height=\"646\"><img src=\"/app/data/js/react/img/3.webp\" style=\"max-width:100%;\"><br></div>\n</div>\n<div>shouldComponentUpdate</div>\n</div>\n<p>只有当demo的title值发生改变的时候，我们才去render，我们可以看一下效果：</p>\n<div>\n<div>\n<div></div>\n<div data-width=\"1425\" data-height=\"516\"><img src=\"/app/data/js/react/img/4.webp\" style=\"max-width:100%;\"><br></div>\n</div>\n<div>shouldComponentUpdate_demo</div>\n</div>\n<p>以上只是一个特别简单的一个对于<code>shouldComponentUpdate</code>的定制。</p>\n<p>在最新的<code>react</code>中，react给我们提供了<code>React.PureComponent</code>，官方也在早期提供了名为<code>react-addons-pure-render-mixin</code>插件来重新实现<code>shouldComponentUpdate</code>生命周期方法。</p>\n<div>\n<div>\n<div></div>\n<div data-width=\"1028\" data-height=\"660\"><img src=\"/app/data/js/react/img/5.webp\" style=\"max-width:100%;\"><br></div>\n</div>\n<div>PureComponent</div>\n</div>\n<p>通过上述的方法的效果也是和我们定制<code>shouldComponentUpdate</code>的效果是一致的。</p>\n<p>但是我们要注意的是，这里的<code>PureRender</code>是浅比较的，因为深比较的场景是相当昂贵的。所以我们要注意我们在<code>1.1</code>中说到的一些注意点：<strong>不要直接为props设置对象或者数组</strong>、<strong>不要将方法直接绑定在元素上，因为其实函数也是对象</strong></p></div><br>"}}