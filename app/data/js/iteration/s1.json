{"sta":1,"data":{"subTitle":"5种迭代方法","content":"<p>JS 5个迭代方法是：</p><ul><li><code>every()</code>：对数组中的每一项运行给定的函数。如果该函数对每一项都返回<code>true</code>，则返回<code>true</code>。</li><li><code>filter()</code>：对数组中的每一项运行给定的函数，返回该函数会返回<code>true</code>的项组成的数组。</li><li><code>forEach()</code>：对数组中的每一项运行给定的函数。该方法没有返回值。</li><li><code>map()</code>：对数组中的每一项运行给定的函数，返回每次函数调用的结果组成的数组。</li><li><code>some()</code>：对数组中的每一项运行给定的函数，如果该函数对任一项返回<code>true</code>，则返回<code>true</code>。</li></ul><p>以上所有的方法都不会修改数组中包含的值。</p><p>在上面的方法中，<code>every()</code>和<code>some()</code>非常相似，它们都用于查询数组中的项是否满足某个条件。对于<code>every()</code>方法来说，传入的函数必须对每一项都返回<code>true</code>，这个方法才返回<code>true</code>。否则，它就返回<code>false</code>。而<code>some()</code>方法则是只要传入的函数对数组的某一项返回<code>true</code>，就会返回<code>true</code>。例如：</p><div><div id=\"highlighter_790144\"><pre><code>var nums = [1,2,3,4,5,4,3,2,1];\nvar result = nums.every(function(item, index, array){\n  return (item &gt; 2);\n})\nconsole.info(result);</code></pre></div></div><p>上面的代码会在控制台中打印<code>false</code>。</p><div><div id=\"highlighter_734131\"><pre><code>var nums = [1,2,3,4,5,4,3,2,1];\nvar result = nums.some(function(item, index, array){\n  return (item &gt; 2);\n})\nconsole.info(result);</code></pre></div></div><p>上面的代码会在控制台中打印<code>true</code>。</p><p>下面是一个<code>filter()</code>函数的例子，它利用指定的函数确定是否存在返回的数组中包含某一项。例如，要返回一个所有数值都大于2的数组，可以使用下面的代码：</p><div><div id=\"highlighter_51333\"><pre><code>var nums = [1,2,3,4,5,4,3,2,1];\nvar result = nums.filter(function(item, index, array){\n  return (item &gt; 2);\n})\nconsole.info(result);    // [3,4,5,4,3]</code></pre></div></div><p>上面的代码通过调用<code>filter()</code>方法返回包含3,4,5,4,3的数组。这个方法对于查询符合某些条件的所有数组非常有用。</p><p><code>map()</code>方法也返回一个数组，而这个数组的每一项都是在原始数组中的对应项上运行传入函数的结果。例如，可以给数组中的每一项都乘以2，然后返回这些乘积组成的数组：</p><div><div id=\"highlighter_543343\"><pre><code>var nums = [1,2,3,4,5,4,3,2,1];\nvar result = nums.map(function(item, index, array){\n  return item * 2;\n})\nconsole.info(result);    // [2,4,6,8,10,8,6,4,2]</code></pre></div></div><p><code>map()</code>方法适合用于创建包含的项于另一个数组一一对应的数组。</p><p>最后一个是<code>forEach()</code>方法，它只是对数组中的每一项运行传入的函数。这个方法没有返回值，本质上于使用<code>for</code>循环迭代数组是一样的。看下面的例子：</p><div><div id=\"highlighter_772404\"><pre><code>var nums = [1,2,3,4,5,4,3,2,1];\nnums.forEach(function(item, index, array){\n  //执行需要的操作\n})</code></pre></div></div><p>js中的这些数组方法通过执行不同的操作，可以大大的方便处理数组的任务。</p><p></p><p>支持这些迭代方法的浏览器有：IE9+，Firefox2+，Safari3+，Opera9.5+和Chrome。</p>"}}