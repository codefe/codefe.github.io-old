{"sta":1,"data":{"subTitle":"this全面解析三","content":"<p><h3><strong>绑定规则 - new 绑定</strong></h3>在传统的面向类的语言中，“构造函数”是类中的一些特殊方法，使用 new 初始化类时会 调用类中的构造函数。通常的形式是这样的：</p><pre><span>something </span><span>=</span><span> </span><span>new</span><span> </span><span>MyClass</span><span>(..);</span></pre><p>JavaScript 也有一个 new 操作符，使用方法看起来也和那些面向类的语言一样，绝大多数开 发者都认为 JavaScript 中 new 的机制也和那些语言一样。然而，JavaScript 中 new 的机制实 际上和面向类的语言完全不同。<br>首先我们重新定义一下 JavaScript 中的“构造函数” 。<br>在 JavaScript 中，构造函数只是一些使用 new 操作符时被调用的函数。它们并不会属于某个类，也不会实例化一个类。实际上它们甚至都不能说是一种特殊的函数类型，它们只是被 new 操作符调用的普通函数而已。</p><pre><span>&lt;script</span><span> </span><span>type</span><span>=</span><span>\"text/javascript\"</span><span>&gt;</span><span>\n</span><span>function</span><span> foo</span><span>(</span><span>name</span><span>){</span><span>\n </span><span>this</span><span>.</span><span>a </span><span>=</span><span> </span><span>1</span><span>;</span><span>\n console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span><span>a</span><span>);</span><span>\n</span><span>}</span><span>\n</span><span>var</span><span> obj </span><span>=</span><span> </span><span>new</span><span> foo</span><span>();</span><span>\n</span><span>&lt;/script&gt;</span></pre><p></p><p><br>使用 new 来调用 foo(..) 时，我们会构造一个新对象并把它绑定到 foo(..) 调用中的 this 上。new 是最后一种可以影响函数调用时 this 绑定行为的方法，我们称之为 new 绑定。</p>"}}