{"sta":1,"data":{"subTitle":"纯JS 绘制数学函数","content":"<p>今天闲来无事用js写了个数学绘图包，还不算完整，不过总出现了雏形。&nbsp;</p><p>绘图对象Plot，包含了JS画点，JS画线，JS画正弦sin，JS画余弦cos，tan，圆，多边形。 \n<br>可设置原点位置，画笔颜色，画笔粗细，坐标线颜色。 \n<br>其实原理很简单，用长1px宽1px的div模拟点，由点及线，由线及面。 \n<br></p><p>贴上来权当相互学习，以免JS新手觉得js画图是多神秘的事情。</p><pre><code>&lt;html&gt; \n&lt;head&gt; \n&lt;title&gt;JS绘制数学函数图&lt;/title&gt; \n&lt;style type=\"text/css\"&gt; \nbody{ \nmargin: 0px; \npadding: 0px; \n} \n&lt;/style&gt; \n    &lt;script&gt; \n    //辅助函数 \nfunction $(id){return document.getElementById(id)}; \n/** \n    * 绘图对象 \n    * 包含各个绘图函数，比如画点，线段，多边形，圆等 \n    * 和一些绘图参数，比如背景颜色，画笔颜色 \n**/ \nvar Plot = { \n    //画布，所有被画出来的元素都append到这个container \ncontainer: null, \n//原点x \nox: 500, \n//原点y \noy: 300, \n//坐标颜色 \nbaseLineColor: 'black', \n//画笔颜色 \nbrushColor: 'red', \n//画笔粗细 \nbrushWeight: 1, \n//baseLineX，baseLineY保存坐标线，用于坐标移位 \nbaseLineX: null, \nbaseLineY: null, \n\n//初始化方法，设置画布，原点位置，坐标线颜色，画笔颜色，画笔粗细 \ninit: function(containerId, ox, oy, baseLineColor,brushColor,brushWeight){ \nif($(containerId)){ \nPlot.container = $(containerId); \n} \nelse{ \nalert('You should specify an element in which you can draw plot!'); \nreturn; \n} \nif((typeof ox)=='number'){ \nPlot.ox = ox; \n} \nif((typeof oy)=='number'){ \nPlot.oy = oy; \n} \nPlot.baseLineColor = baseLineColor; \nPlot.brushColor = brushColor; \nPlot.brushWeight = brushWeight; \nPlot.drawCoordinate(); \n}, \n//设置原点函数 \nsetOPoint: function(ox,oy){ \nPlot.ox = ox; \nPlot.oy = oy; \nPlot.container.removeChild(Plot.baseLineX); \nPlot.container.removeChild(Plot.baseLineY); \nPlot.drawCoordinate(); \n}, \n//设置画笔粗细函数 \nsetBrushWeight: function(weight){ \nPlot.brushWeight = weight; \n}, \nsetBrushColor: function(color){ \n    Plot.brushColor = color; \n}, \n//画坐标线 \ndrawCoordinate: function(){ \nvar baseLineX = document.createElement('div'); \nbaseLineX.style.position = \"absolute\"; \nbaseLineX.style.left = 0; \nbaseLineX.style.top = Plot.oy; \nbaseLineX.style.fontSize = '1px'; \nbaseLineX.style.height = '1px'; \nbaseLineX.style.width = '100%'; \nbaseLineX.style.overflow = 'hidden' \nbaseLineX.style.backgroundColor = Plot.baseLineColor; \nPlot.container.appendChild(baseLineX); \nPlot.baseLineX = baseLineX; \nvar baseLineY = document.createElement('div'); \nbaseLineY.style.position = \"absolute\"; \nbaseLineY.style.left = Plot.ox; \nbaseLineY.style.top = 0; \nbaseLineY.style.fontSize = '1px'; \nbaseLineY.style.height = '100%'; \nbaseLineY.style.width = '1px'; \nbaseLineY.style.overflow = 'hidden' \nbaseLineY.style.backgroundColor = Plot.baseLineColor; \nPlot.baseLineY = baseLineY; \nPlot.container.appendChild(baseLineY); \n}, \n//清理画布，移走所有对象 \nclean: function(){ \nPlot.container.innerHTML =\"\"; \nPlot.drawCoordinate(); \n}, \n//画点，相对原点 \ndrawDot: function(x,y){ \nvar dot = document.createElement('div'); \ndot.style.left = Plot.ox + x + 'px'; \ndot.style.top = Plot.oy - y + 'px'; \ndot.style.height = Plot.brushWeight; \ndot.style.width = Plot.brushWeight; \ndot.style.position = 'absolute'; \ndot.style.fontSize = '1px'; \ndot.style.backgroundColor = Plot.brushColor; \ndot.style.overflow = \"hidden\"; \nPlot.container.appendChild(dot); \ndot = null; \n}, \n//sin函数曲线，传入角度，比如90，180，360 \nsin: function(angle){ \nfor(var i=0; i&lt;angle; i++){ \nPlot.drawDot(i,Math.sin(i/180*Math.PI)*100); \n} \n}, \n//tan函数曲线 \ntan: function(){ \nfor(var i=0; i&lt;720; i++){ \nif(Math.tan(i/180*Math.PI)*100&gt;Plot.oy){ \ncontinue; \n} \nPlot.drawDot( i, Math.tan(i/180*Math.PI)*50 ); \n} \n}, \n//cos函数曲线，传入角度，比如90，180，360 \ncos: function(angle){ \nfor(var i=0; i&lt;angle; i++){ \nPlot.drawDot(i,Math.cos(i/180*Math.PI)*100); \n} \n}, \n//画线从(x0,y0)到(x1,y1) \nline: function(x0,y0,x1,y1){ \n    //竖线 \nif((x1-x0)==0){ \nfor( var i=((y1&gt;y0)?y0:y1); i&lt;((y1&gt;y0)?y1:y0); i++ ){ \nPlot.drawDot(x1, i); \n} \nreturn; \n} \n//横线 \nif((y1-y0)==0){ \nfor( var i=((x1&gt;x0)?x0:x1); i&lt;((x1&gt;x0)?x1:x0); i++ ){ \nPlot.drawDot(i, y1); \n} \nreturn; \n} \n//斜线 \n//k=斜率，直线方程为y=kx + b \nvar k = (y1-y0)/(x1-x0); \nif(k&lt;=1){ \nfor(var i=((x1&gt;x0)?x0:x1); i&lt;((x1&gt;x0)?x1:x0); i++){ \nPlot.drawDot(i, k*i+y1-k*x1 ); \n} \n} \nelse{ \nfor(var i=((y1&gt;y0)?y0:y1); i&lt;((y1&gt;y0)?y1:y0); i++){ \nPlot.drawDot((i-y1+k*x1)/k,i); \n} \n} \nreturn; \n}, \n//画圆，radius是半径，(xi,yi)为圆心 \ncircle: function(radius,xi, yi){ \nif((typeof xi)=='undefined'){ \nxi = 0; \n} \nif((typeof yi)=='undefined'){ \nyi = 0; \n} \n//i为角度，从0到360 \nvar i=0; \nwhile(i&lt;360){ \nvar _x0 = Math.sin(i/180*Math.PI)*radius; \nvar _y0 = Math.cos(i/180*Math.PI)*radius; \nvar step = radius/100; \n//随着半径的增大，划出来的圆周断断续续,下面的做法 \n//使画圆周的点数随着半径的增大而增大，使画出来的圆周更圆润. \nif(1/step&gt;1){ \nstep = 1; \n} \nelse if(1/step&lt;0.2){ \nstep = 0.2; \n} \nelse{ \nstep = 1/step; \n} \nPlot.drawDot(_x0+xi, _y0+yi); \ni = i+ step; \n} \n\n}, \n//画多边形，传入一个点列 \npolygon: function(dots){ \nif(typeof dots=='undefined'){ \nalert('you should specify some dots to draw!'); \nreturn; \n} \nif(dots.constructor!=Array){ \nalert('you should specify some dots to draw!'); \nreturn; \n} \nfor(var i=0; i&lt;dots.length-1; i++){ \nPlot.line(dots[i].x,dots[i].y, dots[i+1].x,dots[i+1].y); \nif(i==1&amp;&amp;dots.length==2){ \nbreak; \n} \n} \nPlot.line(dots[0].x, dots[0].y, dots[dots.length-1].x, dots[dots.length-1].y); \n} \n}; \n    &lt;/script&gt; \n&lt;/head&gt; \n&lt;body&gt; \n&lt;div id=\"main\" style=\"border-bottom: solid red 0px; height:100%; width:100%\"&gt; \n&lt;/div&gt; \n&lt;/body&gt; \n&lt;script&gt; \n    //测试代码 \nPlot.init('main', 500, 500, 'green','red',1); \nPlot.sin(720); \nPlot.setBrushWeight(3); \nPlot.cos(720); \nPlot.setBrushWeight(2); \nPlot.circle(200,100,100); \nPlot.setBrushColor('purple'); \nPlot.circle(100,100,100); \nPlot.setBrushColor('blue'); \nPlot.circle(50,100,100); \nvar t = new Array(); \nvar dots = new Array(); \ndots[0] = {x:-10,y:-10}; \ndots[1] = {x:400,y:10}; \ndots[2] = {x:400,y:300}; \ndots[3] = {x:10,y:300}; \nPlot.polygon(dots); \n&lt;/script&gt; \n&lt;/html&gt;</code></pre><p><br></p><p>&nbsp;<br></p>"}}