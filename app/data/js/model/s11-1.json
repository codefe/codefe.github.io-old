{"sta":1,"data":{"subTitle":"外观模式","content":"<h3>外观模式</h3><p>为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。降低访问复杂系统的内部子系统时的复杂度。在客户端和复杂系统之间再加一层，将调用顺序、依赖关系等处理好。</p><p><h3>外观模式优点\n</h3>1.减少系统相互依赖。\n<br>2.提高灵活性。\n<br>2.提高了安全性。\n<br>\n<br><h3>适用场景</h3>1.为复杂的模块或子系统提供外界访问的模块。\n<br>2.客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade 将这个子系统与客户以及其他的子系统分离，可以提高子系统的独立性和可移植性。</p><h3>实例</h3><p>模拟电脑启动，假设电脑启动顺序：启动CPU，启动内存，启动硬盘，加载数据等。</p><p></p><h3>代码</h3><pre><code>// 外观模式     \nfunction CPU() {\n  this.startup = function () {\n    console.log(\"启动CPU\");\n  };\n}\nfunction Memory() {\n  this.startup = function () {\n    console.log(\"启动Memory\");\n  };\n}\nfunction Disk() {\n  this.startup = function () {\n    console.log(\"启动Disk\");\n  };\n}\nfunction Computer() {\n  var _cpu, _memory, _disk;\n  _cpu = new CPU();\n  _memory = new Memory();\n  _disk = new Disk();\n  this.start = function () {\n    _cpu.startup();\n    _memory.startup();\n    _disk.startup();\n  }\n}\n\ncomputer = new Computer();\ncomputer.start();</code></pre><p><br></p>"}}