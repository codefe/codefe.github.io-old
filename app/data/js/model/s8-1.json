{"sta":1,"data":{"subTitle":"建造者模式","content":"<h3>建造者模式</h3><p>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。主要解决在软件系统中，有时候面临着\"一个复杂对象\"的创建工作，由于需求的变化，这个复杂对象的某些部分经常面临着剧烈的变化，一些基本部件不会变。所以需要将变与不变分离。与抽象工厂的区别：在建造者模式里，有个指导者(Director)，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造者模式可以强制实行一种分步骤进行的建造过程。</p><h3>建造者模式四要素</h3><p>1.产品类Product：一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有比较多的代码量。<br>2.抽象建造者类Builder: 将建造的具体过程交与它的子类来实现，这样更容易扩展。<br>3.建造者类ConcreteBuilder: 组建产品；返回组建好的产品。<br>4.指导类Director: 负责调用适当的建造者来组建产品，指导类一般不与产品类发生依赖关系，与指导类直接交互的是建造者类</p><h3>建造者模式优点</h3><p>1.建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指导者类中对整体而言可以取得比较好的稳定性。<br>2.建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成。</p><p><h3>适用场景\n</h3>需要生成的对象具有复杂的内部结构；需要生成的对象内部属性本身相互依赖。</p><h3>举例</h3><p>似乎很抽象。举个例子：前面你创建了一个生产保时捷的工厂，生产一台保时捷911需要的主要部件都一样(引擎，轮子，方向盘...)和流程是不变的，变的是引擎，轮子，控制系统等等部件具体实现，这些部件的生产交由具体的builder去生产。</p><p></p><h3>代码</h3><pre><code>//建造者模式\nvar DP = require(\"./DesignPattern.js\");\n\nfunction Car() {\n  var _frame, _engine, _wheel;\n  this.setFrame = function (val) {\n    _frame = val;\n  };\n  this.setEngine = function (val) {\n    _engine = val;\n  };\n  this.setWheel = function (val) {\n    _wheel = val;\n  };\n  this.getFrame = function () {\n    return _frame\n  };\n  this.getEngine = function () {\n    return _engine\n  };\n  this.getWheel = function () {\n    return _wheel\n  };\n  this.check = function () {\n    console.log(_frame + '检查完毕');\n    console.log(_engine + '检查完毕');\n    console.log(_wheel + '检查完毕');\n  };\n}\n\n//抽象生产者\nfunction Builder() {\n  DP.Interface(this, ['buildFrame', 'buildEngine', 'buildWheel', 'buildCar'])\n}\n\n//指导者,产品生产流程规范\nfunction Director(Builder) {\n  //传入具体制造者\n  var _builder = Builder;\n  this.build = function () {\n    _builder.buildFrame();\n    _builder.buildEngine();\n    _builder.buildWheel();\n    return _builder.buildCar();\n  };\n}\n\nfunction Builder911() {\n  this.__proto__ = new Builder();\n  var _car = new Car();\n  this.buildFrame = function () {\n    console.log('制造911骨架');\n    _car.setFrame('911骨架');\n  };\n  this.buildEngine = function () {\n    console.log('制造911引擎');\n    _car.setEngine('911引擎');\n  };\n  this.buildWheel = function () {\n    console.log('制造911轮子');\n    _car.setWheel('911轮子');\n  };\n  this.buildCar = function () {\n    console.log('911汽车各部组装完毕');\n    return _car;\n  };\n}\n\nfunction BuilderCayma() {\n  this.__proto__ = new Builder();\n  var _car = new Car();\n  this.buildFrame = function () {\n    console.log('制造Cayma骨架');\n    _car.setFrame('Cayma骨架');\n  };\n  this.buildEngine = function () {\n    console.log('制造Cayma引擎');\n    _car.setEngine('Cayma引擎');\n  };\n  this.buildWheel = function () {\n    console.log('制造Cayma轮子');\n    _car.setWheel('Cayma轮子');\n  };\n  this.buildCar = function () {\n    console.log('Cayma汽车各部组装完毕');\n    return _car;\n  };\n}\n\nvar builder911 = new Builder911();\nvar director911 = new Director(builder911);\nvar car911 = director911.build();\ncar911.check();\n\nvar builderCayma = new BuilderCayma();\nvar directorCayma = new Director(builderCayma);\nvar Cayma = directorCayma.build();\nCayma.check();</code></pre><p><br></p>"}}