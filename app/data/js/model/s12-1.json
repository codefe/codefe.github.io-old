{"sta":1,"data":{"subTitle":"装饰器模式","content":"<h3>装饰器模式</h3><p>对客户透明的方式动态地给一个对象附加上更多的责任，同时又不改变其结构。装饰模式可以在不使用创造更多子类的情况下，将对象的功能加以扩展。</p><h3>装饰器要素</h3><p>1.抽象构件(Component)角色：给出一个抽象接口，以规范准备接收附加责任的对象。<br>2.具体构件(ConcreteComponent)角色：定义一个将要接收附加责任的类。<br>3.装饰(Decorator)角色：持有一个构件(Component)对象的实例，并定义一个与抽象构件接口一致的接口。<br>4.具体装饰(ConcreteDecorator)角色：负责给构件对象“贴上”附加的责任。</p><p><h3>装饰器模式优点</h3>1.装饰类和被装饰类可以独立发展，不会相互耦合。\n<br>2.装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。就增加功能来说，装饰器模式相比生成子类更为灵活。\n<br>\n<br><h3>适用场景</h3>1.扩展一个类的功能。\n<br>2.动态增加功能，动态撤销。</p><h3>例子</h3><p></p><p>咖啡，可加牛奶，也可加糖，或者都加。</p><pre><code>//装饰着模式    \nvar DP = require(\"./DesignPattern.js\");\n\nfunction Icoffee() {\n  DP.Interface(this, ['showCoffee', 'getPrice']);\n}\n\nfunction Coffee(name, price) {\n  this.__proto__ = new Icoffee();\n  var _name, _price;\n  _name = name;\n  _price = price;\n  this.showCoffee = function () {\n    console.log(_name + 'coffee');\n  }\n  this.getPrice = function () {\n    return _price;\n  }\n}\n\nfunction Decorator(Coffee) {\n  var _coffee;\n  _coffee = Coffee;\n  this.showCoffee = function () {\n    _coffee.showCoffee();\n  }\n  this.getPrice = function () {\n    return _coffee.getPrice();\n  }\n}\n\nfunction Sugar(Coffee) {\n  this.__proto__ = new Decorator(Coffee);\n  this.showCoffee = function () {\n    console.log('加糖');\n    this.__proto__.showCoffee();\n  }\n  this.getPrice = function () {\n    return this.__proto__.getPrice() + 5;\n  }\n}\n\nfunction Milk(Coffee) {\n  this.__proto__ = new Decorator(Coffee);\n  this.showCoffee = function () {\n    console.log('加牛奶');\n    this.__proto__.showCoffee();\n  }\n  this.getPrice = function () {\n    this.__proto__.getPrice();\n    return this.__proto__.getPrice() + 5;\n  }\n}\n\nvar coffee = new Coffee(\"拿铁\", 20);\n\nvar sugar = new Sugar(coffee);\nsugar.showCoffee();\nconsole.log(sugar.getPrice());\nconsole.log('--------------------------------------------');\nvar milk = new Milk(coffee);\nmilk.showCoffee();\nconsole.log(milk.getPrice());\nconsole.log('--------------------------------------------');\nvar sugarmilk = new Milk(sugar);\nsugarmilk.showCoffee();\nconsole.log(sugarmilk.getPrice());\nconsole.log('--------------------------------------------');\nvar sugarmilkmilk = new Milk(sugarmilk);\nsugarmilkmilk.showCoffee();\nconsole.log(sugarmilkmilk.getPrice());</code></pre><p><br></p>"}}