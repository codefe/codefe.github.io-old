{"sta":1,"data":{"subTitle":"适配器模式","content":"<h3>适配器模式</h3><p>是指将一个接口转换成客户端希望的另外一个接口，该模式使得原本不兼容的类可以一起工作。<br>举个例子：macbook pro有一个HDMI接口，一条HDMI接口的数据线，现在要外接显示器，而显示器只有VGI接口，我们需要一个HDMI-VGI转换器，这个转换器其实起到的作用就是适配器，让两个不兼容的接口可以一起工作。</p><h3>适配器有4种角色</h3><p>1.目标抽象角色(Target)：定义客户所期待的使用接口。(VGI接口)<br>2.源角色(Adaptee)：需要被适配的接口。(HDMI接口)<br>3.适配器角色(Adapter)：把源接口转换成符合要求的目标接口的设备。(HDMI-VGI转换器)<br>4.客户端(client)：例子中指的VGI接口显示器。</p><h3>实例</h3><p></p><h4>假设有两种充电接口MicroUSB和USBTypec</h4><pre><code>function ChargingCord(name) {\n  var _name = name || '默认：无接口'\n  this.work = function () {\n    console.log('使用' + _name + '接口');\n  }\n  this.getName = function () {\n    return _name;\n  }\n  this.check = function (target) {\n    return _name == target.getName();\n  }\n}\n\nfunction MicroUSB() {\n  this.__proto__ = new ChargingCord('MicroUSB');\n}\n\nfunction USBTypec() {\n  this.__proto__ = new ChargingCord('USBTypec');\n}</code></pre><h4>有两种车分别有不同的充电接口</h4><pre><code>function Car(name, chargingCord) {\n  var _name = name || '默认：车'\n  var _chargingCord = chargingCord || new ChargingCord();\n  this.getName = function () {\n    return _name;\n  };\n  this.charge = function (target) {\n    if (_chargingCord.check(target.getChargingCord())) {\n      console.log(this.getName());\n      _chargingCord.work();\n      console.log('充电');\n      target.charging();\n    }\n    else {\n      console.log(this.getName()+\"的\"+_chargingCord.getName());\n      console.log(target.getName()+\"的\"+target.getChargingCord().getName());\n      console.log('接口不对无法充电');\n    }\n  }\n}    \nfunction Porsche911() {\n  this.__proto__ = new Car('Porsche911', new USBTypec());\n}    \nfunction Porsche781() {\n  this.__proto__ = new Car('Porsche781', new MicroUSB());\n}</code></pre><h4>有两种手机有不同的接受充电的接口</h4><pre><code>function Phone(name, chargingCord) {\n  var _name = name || '默认：手机'\n  var _chargingCord = chargingCord || new ChargingCord();\n  this.getChargingCord = function () {\n    return _chargingCord;\n  };\n  this.getName = function () {\n    return _name;\n  };\n  this.charging = function () {\n    console.log(_name);\n    _chargingCord.work();\n    console.log('接收');\n  }\n}    \nfunction IPhone() {\n  this.__proto__ = new Phone('IPhone', new USBTypec());\n}    \nfunction MIPhone() {\n  this.__proto__ = new Phone('MIPhone', new MicroUSB());\n}</code></pre><h4>我们分别用辆车个两种手机充电</h4><pre><code>var porsche911 = new Porsche911();\nvar porsche781 = new Porsche781();    \nvar iPhone = new IPhone();\nvar miPhone = new MIPhone();    \nconsole.log('-----------------------------------------');\nporsche911.charge(iPhone);\nconsole.log('-----------------------------------------');\nporsche781.charge(miPhone);\nconsole.log('-----------------------------------------');\nporsche781.charge(iPhone);\nconsole.log('-----------------------------------------');</code></pre><h4>结果</h4><pre><code>-----------------------------------------\nPorsche911\n使用USBTypec接口\n充电\nIPhone\n使用USBTypec接口\n接收\n-----------------------------------------\nPorsche781\n使用MicroUSB接口\n充电\nMIPhone\n使用MicroUSB接口\n接收\n-----------------------------------------\nPorsche781的MicroUSB\nIPhone的USBTypec\n接口不对无法充电\n-----------------------------------------\nPorsche911的USBTypec\nMIPhone的MicroUSB\n接口不对无法充电\n-----------------------------------------</code></pre><h4>所以我们要创建适配器函数</h4><pre><code>function PhoneUSBTypecToMicroUSB(Phone) {\n  var _USBTypec = new ChargingCord('USBTypec');\n  var _MicroUSB = new ChargingCord('MicroUSB');\n  if (_USBTypec.check(Phone.getChargingCord())) {\n    Phone.charging = function () {\n      console.log(this.getName());\n      _USBTypec.work();\n      console.log('转接');\n      _MicroUSB.work();\n      console.log('接收');\n    }\n    Phone.getChargingCord = function () {\n      return _MicroUSB;\n    };\n    return Phone;\n  }\n  else {\n    console.log('接口不对无法转换');\n  }\n}\n\nfunction PhoneMicroUSBToUSBTypec(Phone) {\n  var _USBTypec = new ChargingCord('USBTypec');\n  var _MicroUSB = new ChargingCord('MicroUSB');\n  if (_MicroUSB.check(Phone.getChargingCord())) {\n    Phone.charging = function () {\n      console.log(this.getName());\n      _MicroUSB.work();\n      console.log('转接');\n      _USBTypec.work();\n      console.log('接收');\n    }\n    Phone.getChargingCord = function () {\n      return _USBTypec;\n    };\n    return Phone;\n  }\n  else {\n    console.log('接口不对无法转换');\n  }\n}\n\nfunction PhoneDeleteInterface(Phone){\n  delete Phone.charging;\n  delete Phone.getChargingCord;\n  return Phone;\n}</code></pre><h4>再来测试接口转换和充电情况</h4><pre><code>PhoneMicroUSBToUSBTypec(iPhone);\nconsole.log('-----------------------------------------');\nPhoneUSBTypecToMicroUSB(miPhone);\nconsole.log('-----------------------------------------');\nporsche781.charge(PhoneUSBTypecToMicroUSB(iPhone));\nconsole.log('-----------------------------------------');\nporsche911.charge(PhoneMicroUSBToUSBTypec(miPhone));\nconsole.log('-----------------------------------------');\nporsche781.charge(PhoneDeleteInterface(iPhone));\nconsole.log('-----------------------------------------');\nporsche911.charge(PhoneDeleteInterface(miPhone));</code></pre><h4>适配后结果</h4><pre><code>接口不对无法转换\n-----------------------------------------\n接口不对无法转换\n-----------------------------------------\nPorsche781\n使用MicroUSB接口\n充电\nIPhone\n使用USBTypec接口\n转接\n使用MicroUSB接口\n接收\n-----------------------------------------\nPorsche911\n使用USBTypec接口\n充电\nMIPhone\n使用MicroUSB接口\n转接\n使用USBTypec接口\n接收\n-----------------------------------------\nPorsche781的MicroUSB\nIPhone的USBTypec\n接口不对无法充电\n-----------------------------------------\nPorsche911的USBTypec\nMIPhone的MicroUSB\n接口不对无法充电</code></pre><p><h3>适配器模式优点\n</h3>1.可以让任何两个没有关联的类一起运行。\n<br>2.提高了类的复用。\n<br>3.增加了类的透明度。\n<br>4.灵活性好。\n<br>\n<br><h3>适用场景\n</h3>1.系统需要使用现有的类，而此类的接口不符合系统的需要。\n<br>2.想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。\n<br>3.通过接口转换，将一个类插入另一个类系中。</p>"}}