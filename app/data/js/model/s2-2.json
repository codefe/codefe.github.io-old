{"sta":1,"data":{"subTitle":"闭包实现封装类","content":"<p>主要参考《javascript设计模式》的例子</p><pre><code>var Person = (function () {\n  // 静态变量\n  var PersonCount = 0;\n  // 静态方法\n  function checkage(age) {\n    var r = /^\\+?[1-9][0-9]*$/;   //正整数\n    return r.test(age);\n  }\n\n  return function (name, age) {\n    // 私有属性.\n    var name, age;\n    this.getName = function () {\n      return name;\n    }\n    this.getAge = function () {\n      return age;\n    }\n    this.setName = function (name) {\n      name = name || 'No Name';\n    };\n    this.setAge = function (age) {\n      if (!checkage(age)) throw new Error('年龄不是一个正整数');\n      age = age;\n    }\n    PersonCount++;\n    if (PersonCount &gt; 50) throw new Error('一个只能创建50个人');\n    this.setName(name);\n    this.setAge(age);\n  }\n})();\n//测试静态变量\n/*\n var Persons = [];\n for (var i = 0; i &lt; 51; i++) {\n Persons[i] = new Person(i, i + 1);\n console.log('name:' + Persons[i].getName() + 'age:' + Persons[i].getName());\n }\n //*/\n//测试封装效果\n/*\n var Test = new Person(\"111\", \"1\");\n console.log(Test.name);\n //*/\n//测试静态函数checkage\n//var TestAge =new Person(\"111\",\"asd\");</code></pre><p>可以看到这样实现了封装效果。不过对于私有函数的测试。只能通过测试接口的用例囊括才能实现。对于测试的要求可能就变高了。</p><p><br></p>"}}