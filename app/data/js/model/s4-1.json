{"sta":1,"data":{"subTitle":"单例及其实现","content":"<h3>单例</h3><p>单例是一个全局变量，使用单例可以更好的控制全局变量，还可以利用分支技术来封装浏览器之间的差异。网页中使用全局变量由于可以被重写风险很大。所以使用单例会更好的控制全局变量。</p><h3>懒加载</h3><p>单例模式多数都是在加载脚本的时候被创建出来。不过对于一些使用方式单例适合在用到的时候被加载，所以需要一个可以懒加载的单例。</p><h3>分支</h3><p>是一种区分运行环境差异的技术，更加有效的针对加载的环境来定制代码，达到更好的灵活性。</p><p></p><h3>代码</h3><pre><code>var os = require(\"os\");\nSingleton = (function () {\n  var uniqueInstance; // 单例实体\n  constructor = function () { // 单例初始化\n    return function Singleton () {\n      var count = 10;\n      function initCount(){\n        count = 10;\n      }\n      this.getCount = function () {\n        return count;\n      }\n      this.setCount = function (value) {\n        count = value;\n      };\n      this.init=function(){\n        initCount();\n      }\n    };\n  }();\n\n  return {\n    getInstance: function () {\n      if (!uniqueInstance) { // 判断是否初始化过\n        uniqueInstance = new constructor();\n      }\n      return  (os.type()==='Windows_NT')?uniqueInstance:undefined;//单例分支使单例有更高的兼容性\n    }\n  }\n})();\nvar S=Singleton .getInstance();//懒加载，在这里开始加载和创建实例。\nconsole.log(S.count);\nconsole.log(S.getCount());\nS.setCount(550);\nconsole.log(S.getCount());\n//S.initCount();\nS.init();\nconsole.log(S.getCount());</code></pre><p>单例主要在于代码的整洁性，是全局变量变得可控，使用懒加载可以减少不必要的内存消耗。分支提高不用环境的兼容性，只需判断一次环境而不用在每次使用都判断环境。</p>"}}