{
	"sta": 1,
	"data": {
		"type": "JavaScript",
		"name": "模式",
		"subType": "js-model",
		"title": "JS设计模式",
		"author": "网络",
		"star": "★★★★★",
		"desc": "每个JS开发者都力求写出可维护、复用性和可读性高的代码。随着应用不断扩大，代码组织的合理性也越来越重要。设计模式为特定环境下的常见问题提供了一个组织结构，对于克服这些挑战起到至关重要的作用。",
		"items": [
			{"step": "设计模式一：接口","item":[
				{"title":"接口及其利弊","url":"s1-1"},
				{"title":"接口实现方法","url":"s1-2"}
			]},
			{"step": "设计模式二：封装","item":[
				{"title":"封装及其利弊","url":"s2-1"},
				{"title":"闭包实现封装类","url":"s2-2"}
			]},
			{"step": "设计模式三：继承","item":[
				{"title":"什么是继承","url":"s3-1"},
				{"title":"类继承","url":"s3-2"},
				{"title":"原型继承","url":"s3-3"},
				{"title":"掺元类","url":"s3-4"}
			]},
			{"step": "设计模式四：单例","item":[
				{"title":"单例及其实现","url":"s4-1"},
				{"title":"单例模式基本用法","url":"s4-2"}
			]},
			{"step": "设计模式五：链式调用","item":[
				{"title":"链式调用的实现","url":"s5-1"}
			]},
			{"step": "设计模式六：工厂模式","item":[
				{"title":"工厂模式","url":"s6-1"}
			]},
			{"step": "设计模式七：抽象工厂模式","item":[
				{"title":"抽象工厂模式","url":"s7-1"}
			]},
			{"step": "设计模式八：建造者模式","item":[
				{"title":"建造者模式","url":"s8-1"}
			]},
			{"step": "设计模式九：模板模式","item":[
				{"title":"模板模式","url":"s9-1"}
			]},
			{"step": "设计模式十：适配器模式","item":[
				{"title":"适配器模式","url":"s10-1"}
			]},
			{"step": "设计模式十一：外观模式","item":[
				{"title":"外观模式","url":"s11-1"}
			]},
			{"step": "设计模式十二：装饰器模式","item":[
				{"title":"装饰器模式","url":"s12-1"}
			]},
			{"step": "设计模式十三：观察者模式","item":[
				{"title":"观察者模式","url":"s13-1"},
				{"title":"浅谈Nodejs观察者模式","url":"s13-2"},
				{"title":"观察者模式（发布者-订阅者模式）","url":"s13-3"}
			]},
			{"step": "设计模式十四：策略模式","item":[
				{"title":"策略模式","url":"s14-1"}
			]}
		]
	}
}