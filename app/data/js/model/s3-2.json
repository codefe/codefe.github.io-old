{"sta":1,"data":{"subTitle":"类继承","content":"<pre><code>function extend(subClass, superClass) {\n  var F = function () {\n  };\n  F.prototype = superClass.prototype;\n  subClass.prototype = new F();\n  subClass.prototype.constructor = subClass;\n\n  subClass.superclass = superClass.prototype;\n  if (superClass.prototype.constructor == Object.prototype.constructor) {\n    superClass.prototype.constructor = superClass;\n  }\n}\n\nfunction Person(name) {\n  this.name = name;\n}\nPerson.prototype.getName = function () {\n  return this.name;\n}\nfunction Author(name, books) {\n  Author.superclass.constructor.call(this, name);\n  this.books = books;\n}\nextend(Author, Person);\nAuthor.prototype.getBooks = function () {\n  return this.books;\n};\nAuthor.prototype.getName = function () {\n  var name = Author.superclass.getName.call(this);\n  return name + ', Author of ' + this.getBooks().join(', ');\n};\n\nvar hugo = new Author('hugo', ['Notre-Dame de Paris']);\nhugo.getName();\nhugo.getBooks();</code></pre><p>这种继承方式比较适合不熟悉javascript语言原型的程序员使用。</p>"}}